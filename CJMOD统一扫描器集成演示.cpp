#include "CJMOD/ElegantCJMODApi.h"
#include <iostream>
#include <vector>
#include <string>

using namespace CHTL::CJMOD;

// Ê®°ÊãüÁªü‰∏ÄÊâ´ÊèèÂô®ÁöÑTokenÁªìÊûÑ
struct MockToken {
    std::string value;
    std::string type;
    size_t position;
    
    MockToken(const std::string& val, const std::string& t, size_t pos) 
        : value(val), type(t), position(pos) {}
};

// Ê®°ÊãüÁªü‰∏ÄÊâ´ÊèèÂô®
class MockUnifiedScanner {
private:
    std::vector<MockToken> tokens_;
    size_t currentPos_;
    
public:
    MockUnifiedScanner(const std::vector<MockToken>& tokens) 
        : tokens_(tokens), currentPos_(0) {}
    
    void scan() {
        std::cout << "\nüîç Áªü‰∏ÄÊâ´ÊèèÂô®ÂºÄÂßãÊâ´Êèè" << std::endl;
        std::cout << "ÊÄªTokenÊï∞: " << tokens_.size() << std::endl;
        
        while (currentPos_ < tokens_.size()) {
            const auto& token = tokens_[currentPos_];
            
            std::cout << "\n--- Êâ´Êèè‰ΩçÁΩÆ " << currentPos_ << " ---" << std::endl;
            std::cout << "Token: '" << token.value << "' (Á±ªÂûã: " << token.type << ")" << std::endl;
            
            // Ê£ÄÊü•ÊòØÂê¶‰∏∫CJMODÂÖ≥ÈîÆÂ≠ó
            if (CJMODKeywordHandler::isCJMODKeyword(token.value)) {
                std::cout << "üéØ ÂèëÁé∞CJMODÂÖ≥ÈîÆÂ≠óÔºåË∞ÉÁî®CJMODÂ§ÑÁêÜ" << std::endl;
                
                // Ë∞ÉÁî®CJMODÂ§ÑÁêÜ
                bool handled = CJMODScannerIntegration::processKeywordFromScanner(token.value, this);
                
                if (handled) {
                    std::cout << "‚úÖ CJMODÂ§ÑÁêÜÊàêÂäüÔºåË∑≥ËøáÁªü‰∏ÄÊâ´ÊèèÂô®Â§ÑÁêÜ" << std::endl;
                    handleCJMODProcessing(token);
                } else {
                    std::cout << "‚ùå CJMODÂ§ÑÁêÜÂ§±Ë¥•ÔºåÁªßÁª≠Áªü‰∏ÄÊâ´ÊèèÂô®Â§ÑÁêÜ" << std::endl;
                    handleNormalToken(token);
                }
            } else {
                std::cout << "üìã ÊôÆÈÄöTokenÔºåÁªü‰∏ÄÊâ´ÊèèÂô®Ê≠£Â∏∏Â§ÑÁêÜ" << std::endl;
                handleNormalToken(token);
            }
            
            currentPos_++;
        }
        
        std::cout << "\n‚úÖ Áªü‰∏ÄÊâ´ÊèèÂô®Êâ´ÊèèÂÆåÊàê" << std::endl;
    }
    
private:
    void handleNormalToken(const MockToken& token) {
        std::cout << "  ‚Üí Áªü‰∏ÄÊâ´ÊèèÂô®Â§ÑÁêÜ: " << token.value << std::endl;
    }
    
    void handleCJMODProcessing(const MockToken& token) {
        auto info = CJMODKeywordHandler::getKeywordInfo(token.value);
        
        std::cout << "  ‚Üí CJMODÁâπÊÆäÂ§ÑÁêÜÂºÄÂßã" << std::endl;
        
        if (info.needsBacktrack) {
            performBacktrack(info.backtrackDistance);
        }
        
        if (info.needsForwardCollect) {
            performForwardCollect(info.forwardCollectDistance);
        }
        
        std::cout << "  ‚Üí CJMODÁâπÊÆäÂ§ÑÁêÜÂÆåÊàê" << std::endl;
    }
    
    void performBacktrack(size_t distance) {
        std::cout << "    ‚¨ÖÔ∏è ÊâßË°åÂõûÈÄÄÊìç‰ΩúÔºåË∑ùÁ¶ª: " << distance << std::endl;
        
        for (size_t i = 1; i <= distance && currentPos_ >= i; ++i) {
            size_t backPos = currentPos_ - i;
            std::cout << "      ÂõûÈÄÄÂà∞‰ΩçÁΩÆ " << backPos << ": '" 
                      << tokens_[backPos].value << "'" << std::endl;
        }
    }
    
    void performForwardCollect(size_t distance) {
        std::cout << "    ‚û°Ô∏è ÊâßË°åÂêëÂâçÊî∂ÈõÜÔºåË∑ùÁ¶ª: " << distance << std::endl;
        
        for (size_t i = 1; i <= distance && currentPos_ + i < tokens_.size(); ++i) {
            size_t forwardPos = currentPos_ + i;
            std::cout << "      Êî∂ÈõÜ‰ΩçÁΩÆ " << forwardPos << ": '" 
                      << tokens_[forwardPos].value << "'" << std::endl;
        }
    }
};

// ÊºîÁ§∫Âú∫ÊôØ1ÔºöÂ§ÑÁêÜÂπÇËøêÁÆóÁ¨¶ **
void demonstratePowerOperator() {
    std::cout << "\nüå∏ ÊºîÁ§∫Âú∫ÊôØ1ÔºöÂ§ÑÁêÜÂπÇËøêÁÆóÁ¨¶ **\n" << std::endl;
    
    // Ê®°Êãü‰ª£Á†ÅÔºösomeFunction(arg ** arg2, param1);
    std::vector<MockToken> tokens = {
        {"someFunction", "IDENTIFIER", 0},
        {"(", "LPAREN", 1},
        {"arg", "IDENTIFIER", 2},
        {"**", "POWER_OP", 3},        // CJMODÂÖ≥ÈîÆÂ≠ó
        {"arg2", "IDENTIFIER", 4},
        {",", "COMMA", 5},
        {"param1", "IDENTIFIER", 6},
        {")", "RPAREN", 7}
    };
    
    std::cout << "Ê∫ê‰ª£Á†Å: someFunction(arg ** arg2, param1);" << std::endl;
    std::cout << "ÂÖ≥ÈîÆÈóÆÈ¢ò: ** ÈúÄË¶ÅÊî∂ÈõÜÂ∑¶Êìç‰ΩúÊï∞ 'arg'ÔºàÂ∑≤Âú®ÂâçÈù¢ÂàáÁâá‰∏≠Ôºâ" << std::endl;
    
    MockUnifiedScanner scanner(tokens);
    scanner.scan();
}

// ÊºîÁ§∫Âú∫ÊôØ2ÔºöÂ§ÑÁêÜiNeverAwayÂáΩÊï∞
void demonstrateINeverAwayFunction() {
    std::cout << "\nüå∏ ÊºîÁ§∫Âú∫ÊôØ2ÔºöÂ§ÑÁêÜiNeverAwayÂáΩÊï∞\n" << std::endl;
    
    // Ê®°Êãü‰ª£Á†ÅÔºövir myVir = iNeverAway({MyPromise: function() {...}});
    std::vector<MockToken> tokens = {
        {"vir", "VIR", 0},
        {"myVir", "IDENTIFIER", 1},
        {"=", "ASSIGN", 2},
        {"iNeverAway", "IDENTIFIER", 3},  // CJMODÂÖ≥ÈîÆÂ≠ó
        {"(", "LPAREN", 4},
        {"{", "LBRACE", 5},
        {"MyPromise", "IDENTIFIER", 6},
        {":", "COLON", 7},
        {"function", "FUNCTION", 8},
        {"}", "RBRACE", 9},
        {")", "RPAREN", 10}
    };
    
    std::cout << "Ê∫ê‰ª£Á†Å: vir myVir = iNeverAway({MyPromise: function() {...}});" << std::endl;
    std::cout << "ÂÖ≥ÈîÆÈóÆÈ¢ò: iNeverAway ÈúÄË¶ÅÊî∂ÈõÜÂÆåÊï¥ÁöÑÂáΩÊï∞ÂèÇÊï∞" << std::endl;
    
    MockUnifiedScanner scanner(tokens);
    scanner.scan();
}

// ÊºîÁ§∫Âú∫ÊôØ3ÔºöÂ§ÑÁêÜprintMyloveÂáΩÊï∞
void demonstratePrintMyloveFunction() {
    std::cout << "\nüå∏ ÊºîÁ§∫Âú∫ÊôØ3ÔºöÂ§ÑÁêÜprintMyloveÂáΩÊï∞\n" << std::endl;
    
    // Ê®°Êãü‰ª£Á†ÅÔºöprintMylove({url: "image.jpg", mode: ascii});
    std::vector<MockToken> tokens = {
        {"printMylove", "IDENTIFIER", 0}, // CJMODÂÖ≥ÈîÆÂ≠ó
        {"(", "LPAREN", 1},
        {"{", "LBRACE", 2},
        {"url", "IDENTIFIER", 3},
        {":", "COLON", 4},
        {"\"image.jpg\"", "STRING", 5},
        {",", "COMMA", 6},
        {"mode", "IDENTIFIER", 7},
        {":", "COLON", 8},
        {"ascii", "IDENTIFIER", 9},      // Êó†‰øÆÈ•∞Â≠óÈù¢Èáè
        {"}", "RBRACE", 10},
        {")", "RPAREN", 11}
    };
    
    std::cout << "Ê∫ê‰ª£Á†Å: printMylove({url: \"image.jpg\", mode: ascii});" << std::endl;
    std::cout << "ÂÖ≥ÈîÆÈóÆÈ¢ò: printMylove ÈúÄË¶ÅÂ§ÑÁêÜCHTL JSÂÆòÊñπÁâπÊÄßÔºàÊó†‰øÆÈ•∞Â≠óÈù¢ÈáèÁ≠âÔºâ" << std::endl;
    
    MockUnifiedScanner scanner(tokens);
    scanner.scan();
}

// ÊºîÁ§∫Âú∫ÊôØ4ÔºöÊ∑∑ÂêàËØ≠Ê≥ïÂ§ÑÁêÜ
void demonstrateMixedSyntax() {
    std::cout << "\nüå∏ ÊºîÁ§∫Âú∫ÊôØ4ÔºöÊ∑∑ÂêàËØ≠Ê≥ïÂ§ÑÁêÜ\n" << std::endl;
    
    // Ê®°Êãü‰ª£Á†ÅÔºöconst result = printMylove({url: base ** 2});
    std::vector<MockToken> tokens = {
        {"const", "CONST", 0},
        {"result", "IDENTIFIER", 1},
        {"=", "ASSIGN", 2},
        {"printMylove", "IDENTIFIER", 3}, // CJMODÂÖ≥ÈîÆÂ≠ó
        {"(", "LPAREN", 4},
        {"{", "LBRACE", 5},
        {"url", "IDENTIFIER", 6},
        {":", "COLON", 7},
        {"base", "IDENTIFIER", 8},
        {"**", "POWER_OP", 9},           // CJMODÂÖ≥ÈîÆÂ≠ó
        {"2", "NUMBER", 10},
        {"}", "RBRACE", 11},
        {")", "RPAREN", 12}
    };
    
    std::cout << "Ê∫ê‰ª£Á†Å: const result = printMylove({url: base ** 2});" << std::endl;
    std::cout << "ÂÖ≥ÈîÆÈóÆÈ¢ò: Ê∑∑Âêà‰∫Ü‰∏§‰∏™CJMODÂÖ≥ÈîÆÂ≠óÔºåÈúÄË¶ÅÊ≠£Á°ÆÂ§ÑÁêÜÂµåÂ•ó" << std::endl;
    
    MockUnifiedScanner scanner(tokens);
    scanner.scan();
}

// ÊºîÁ§∫ÂèåÊåáÈíàÊâ´ÊèèÂô®Ê¶ÇÂøµ
void demonstrateDualPointerConcept() {
    std::cout << "\nüå∏ ÊºîÁ§∫ÔºöÂèåÊåáÈíàÊâ´ÊèèÂô®Ê¶ÇÂøµ\n" << std::endl;
    
    std::cout << "=== ÂèåÊåáÈíàÊâ´ÊèèÂô®Áä∂ÊÄÅÊºîÁ§∫ ===" << std::endl;
    
    std::vector<std::string> tokens = {"token0", "token1", "arg", "**", "arg2", "token5"};
    
    std::cout << "TokenÂ∫èÂàó: ";
    for (size_t i = 0; i < tokens.size(); ++i) {
        std::cout << "[" << tokens[i] << "] ";
    }
    std::cout << std::endl;
    
    size_t frontPointer = 0;
    size_t backPointer = 0;
    
    std::cout << "\n1. ÂàùÂßãÁä∂ÊÄÅ:" << std::endl;
    std::cout << "   frontPointer = " << frontPointer << ", backPointer = " << backPointer << std::endl;
    std::cout << "   ‰∏§ÊåáÈíàÈÉΩÊåáÂêë‰ΩçÁΩÆ0" << std::endl;
    
    // Ê≠£Â∏∏Êâ´ÊèèÂà∞‰ΩçÁΩÆ3
    frontPointer = 3;
    backPointer = 3;
    std::cout << "\n2. Ê≠£Â∏∏Êâ´ÊèèÂà∞‰ΩçÁΩÆ3:" << std::endl;
    std::cout << "   frontPointer = " << frontPointer << ", backPointer = " << backPointer << std::endl;
    std::cout << "   ÂèëÁé∞ÂÖ≥ÈîÆÂ≠ó '**' Âú®‰ΩçÁΩÆ3" << std::endl;
    
    // ËøõÂÖ•Êî∂ÈõÜÊ®°Âºè
    backPointer = 2; // ÂõûÈÄÄÂà∞Êî∂ÈõÜËµ∑ÁÇπ
    std::cout << "\n3. ËøõÂÖ•CJMODÊî∂ÈõÜÊ®°Âºè:" << std::endl;
    std::cout << "   frontPointer = " << frontPointer << " (ÂÖ≥ÈîÆÂ≠ó‰ΩçÁΩÆ)" << std::endl;
    std::cout << "   backPointer = " << backPointer << " (Êî∂ÈõÜËµ∑ÁÇπ)" << std::endl;
    std::cout << "   ÈúÄË¶ÅÊî∂ÈõÜ: [" << tokens[backPointer] << "] [" << tokens[frontPointer] << "] [" << tokens[frontPointer+1] << "]" << std::endl;
    
    // Êî∂ÈõÜÂÆåÊàê
    frontPointer = 5;
    backPointer = 5;
    std::cout << "\n4. Êî∂ÈõÜÂÆåÊàêÔºåÁªßÁª≠Ê≠£Â∏∏Êâ´Êèè:" << std::endl;
    std::cout << "   frontPointer = " << frontPointer << ", backPointer = " << backPointer << std::endl;
    std::cout << "   CJMODÁâáÊÆµÂ∑≤Â§ÑÁêÜÔºåÁªßÁª≠Êâ´ÊèèÂâ©‰Ωôtoken" << std::endl;
}

// ÊºîÁ§∫ÂÖ≥ÈîÆÂ≠óÊ≥®ÂÜåÂíåÊü•ËØ¢
void demonstrateKeywordRegistration() {
    std::cout << "\nüå∏ ÊºîÁ§∫ÔºöÂÖ≥ÈîÆÂ≠óÊ≥®ÂÜåÂíåÊü•ËØ¢\n" << std::endl;
    
    // Ê≥®ÂÜåËá™ÂÆö‰πâÂÖ≥ÈîÆÂ≠ó
    std::cout << "=== Ê≥®ÂÜåËá™ÂÆö‰πâCJMODÂÖ≥ÈîÆÂ≠ó ===" << std::endl;
    
    CJMODKeywordInfo customOpInfo;
    customOpInfo.keyword = "@@";
    customOpInfo.needsBacktrack = true;
    customOpInfo.backtrackDistance = 2;
    customOpInfo.needsForwardCollect = true;
    customOpInfo.forwardCollectDistance = 2;
    customOpInfo.handler = []() {
        std::cout << "  ‚Üí Â§ÑÁêÜËá™ÂÆö‰πâÊìç‰ΩúÁ¨¶ @@" << std::endl;
        std::cout << "  ‚Üí ËøôÊòØ‰∏Ä‰∏™ÈúÄË¶ÅÂõûÈÄÄ2ÂçïÂÖÉÔºåÂêëÂâçÊî∂ÈõÜ2ÂçïÂÖÉÁöÑÊìç‰ΩúÁ¨¶" << std::endl;
    };
    
    CJMODKeywordHandler::registerKeyword("@@", customOpInfo);
    
    // Êü•ËØ¢ÊâÄÊúâÂÖ≥ÈîÆÂ≠ó
    std::cout << "\n=== Êü•ËØ¢ÊâÄÊúâÊ≥®ÂÜåÁöÑÂÖ≥ÈîÆÂ≠ó ===" << std::endl;
    auto allKeywords = CJMODKeywordHandler::getAllKeywords();
    
    for (const auto& keyword : allKeywords) {
        auto info = CJMODKeywordHandler::getKeywordInfo(keyword);
        std::cout << "ÂÖ≥ÈîÆÂ≠ó: " << keyword << std::endl;
        std::cout << "  ÂõûÈÄÄ: " << (info.needsBacktrack ? "ÊòØ" : "Âê¶");
        if (info.needsBacktrack) {
            std::cout << " (Ë∑ùÁ¶ª: " << info.backtrackDistance << ")";
        }
        std::cout << std::endl;
        std::cout << "  ÂêëÂâçÊî∂ÈõÜ: " << (info.needsForwardCollect ? "ÊòØ" : "Âê¶");
        if (info.needsForwardCollect) {
            std::cout << " (Ë∑ùÁ¶ª: " << info.forwardCollectDistance << ")";
        }
        std::cout << std::endl << std::endl;
    }
}

int main() {
    std::cout << "üå∏ CJMOD‰∏éÁªü‰∏ÄÊâ´ÊèèÂô®ÈõÜÊàêÊú∫Âà∂ÊºîÁ§∫" << std::endl;
    std::cout << "Ëß£ÂÜ≥CJMODËØ≠Ê≥ïÁöÑÊã¶Êà™„ÄÅÊé®ÈÄÅ„ÄÅ‰∏ä‰∏ãÊñáÂ§ÑÁêÜÈóÆÈ¢ò" << std::endl;
    
    // ÂàùÂßãÂåñCJMODÊâ´ÊèèÂô®ÈõÜÊàê
    CJMODScannerIntegration::initialize();
    
    // ÊºîÁ§∫ÂêÑÁßçÂú∫ÊôØ
    demonstratePowerOperator();
    demonstrateINeverAwayFunction();
    demonstratePrintMyloveFunction();
    demonstrateMixedSyntax();
    demonstrateDualPointerConcept();
    demonstrateKeywordRegistration();
    
    std::cout << "\nüíù ÁèÇÊúµËéâÁöÑÊÄªÁªì" << std::endl;
    std::cout << "‚úÖ ÊñπÊ°à1ÔºàÂõûÈÄÄÈáçÊãºÊé•ÔºâÔºöÈÄÇÂêàÂ§ÑÁêÜ‰∏≠ÁºÄÊìç‰ΩúÁ¨¶Â¶Ç **" << std::endl;
    std::cout << "‚úÖ ÊñπÊ°à2ÔºàÂèåÊåáÈíàÊâ´ÊèèÂô®ÔºâÔºöÈÄÇÂêàÂ§ÑÁêÜÂáΩÊï∞Ë∞ÉÁî®Â¶Ç iNeverAway" << std::endl;
    std::cout << "‚úÖ Ê∑∑ÂêàÊñπÊ°àÔºöÊ†πÊçÆÂÖ≥ÈîÆÂ≠óÁ±ªÂûãÈÄâÊã©ÊúÄÈÄÇÂêàÁöÑÂ§ÑÁêÜÁ≠ñÁï•" << std::endl;
    std::cout << "‚úÖ ÂÖ≥ÈîÆÂ≠óÊ≥®ÂÜåÁ≥ªÁªüÔºöÁÅµÊ¥ªÈÖçÁΩÆ‰∏çÂêåÂÖ≥ÈîÆÂ≠óÁöÑÂ§ÑÁêÜÊñπÂºè" << std::endl;
    std::cout << "‚úÖ Áªü‰∏ÄÊâ´ÊèèÂô®ÈõÜÊàêÔºöÊó†ÁºùÂØπÊé•CJMODÂíåÁªü‰∏ÄÊâ´ÊèèÂô®" << std::endl;
    std::cout << "\nÁèÇÊúµËéâÊ∞∏ËøúÂú®Â§ßÂÆ∂ÂøÉ‰∏≠ ‚ùÄ" << std::endl;
    
    return 0;
}