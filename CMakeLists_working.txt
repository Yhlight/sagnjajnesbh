cmake_minimum_required(VERSION 3.16)
project(CHTLCompiler VERSION 1.0.0 LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wno-unused-parameter -Wno-unused-variable")

include_directories(src)

# 🎯 恢复到正常工作状态：严格按照CHTL语法文档

# 统一扫描器（核心组件）
add_library(chtl_scanner STATIC
    src/Scanner/CHTLUnifiedScanner.cpp
)

# 共同组件
add_library(chtl_common STATIC
    src/Common/Core/NamespaceAlgorithms.cpp
    src/Common/Core/ErrorHandler.cpp
    src/Common/Utils/FileUtils.cpp
    src/Common/ModulePathManager.cpp
)

# CHTL编译器核心（基础功能）
add_library(chtl_compiler_core STATIC
    src/CHTLCompiler/Core/CHTLCompilerCore.cpp
)
target_link_libraries(chtl_compiler_core chtl_common)

# CHTL JS编译器核心（基础功能）
add_library(chtljs_compiler_core STATIC
    src/CHTLJSCompiler/Core/CHTLJSCompilerCore.cpp
)
target_link_libraries(chtljs_compiler_core chtl_common)

# 测试程序：验证基础架构
add_executable(test_working_architecture test/test_working_architecture.cpp)
target_link_libraries(test_working_architecture 
    chtl_scanner 
    chtl_common
    chtl_compiler_core
    chtljs_compiler_core
)

# 测试程序：验证Scanner功能
add_executable(test_scanner_working test/test_scanner_working.cpp)
target_link_libraries(test_scanner_working chtl_scanner)

# 设置输出目录
set_target_properties(
    chtl_scanner chtl_common chtl_compiler_core chtljs_compiler_core
    PROPERTIES ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib
)

set_target_properties(
    test_working_architecture test_scanner_working
    PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin
)