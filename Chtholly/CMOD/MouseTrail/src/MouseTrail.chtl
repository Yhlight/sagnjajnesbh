[Template] @Style ChthollyMouseTrailStyle {
    .chtholly-mouse-trail-container {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        pointer-events: none;
        z-index: 9997;
        overflow: hidden;
    }
    
    .chtholly-trail-particle {
        position: absolute;
        border-radius: 50%;
        pointer-events: none;
        mix-blend-mode: screen;
        transition: all 0.3s ease-out;
    }
    
    .chtholly-trail-particle.heart {
        width: 12px;
        height: 12px;
        color: var(--chtholly-primary);
        font-size: 12px;
        text-shadow: 0 0 6px rgba(253, 121, 168, 0.8);
        animation: heartTrail 2s ease-out forwards;
    }
    
    .chtholly-trail-particle.sparkle {
        width: 8px;
        height: 8px;
        background: radial-gradient(circle, var(--chtholly-secondary), var(--chtholly-accent));
        box-shadow: 0 0 8px var(--chtholly-secondary);
        animation: sparkleTrail 1.5s ease-out forwards;
    }
    
    .chtholly-trail-particle.bubble {
        width: 16px;
        height: 16px;
        background: radial-gradient(circle at 30% 30%, 
            rgba(255, 255, 255, 0.8), 
            rgba(253, 121, 168, 0.4), 
            rgba(253, 203, 110, 0.2));
        border: 1px solid rgba(253, 121, 168, 0.3);
        animation: bubbleTrail 3s ease-out forwards;
    }
    
    .chtholly-trail-particle.star {
        width: 10px;
        height: 10px;
        color: var(--chtholly-accent);
        font-size: 10px;
        text-shadow: 0 0 4px rgba(253, 203, 110, 0.8);
        animation: starTrail 1.8s ease-out forwards;
    }
    
    .chtholly-trail-particle.magic {
        width: 14px;
        height: 14px;
        background: conic-gradient(from 0deg, 
            var(--chtholly-primary), 
            var(--chtholly-secondary), 
            var(--chtholly-accent), 
            var(--chtholly-primary));
        animation: magicTrail 2.5s ease-out forwards;
    }
    
    .chtholly-trail-controller {
        position: fixed;
        bottom: 140px;
        right: 20px;
        background: linear-gradient(45deg, var(--chtholly-secondary), var(--chtholly-accent));
        border: none;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        color: white;
        font-size: 18px;
        cursor: pointer;
        box-shadow: var(--chtholly-shadow-lg);
        transition: all ChthollyAnimations();
        z-index: 10000;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .chtholly-trail-controller:hover {
        transform: scale(1.1) rotate(15deg);
        box-shadow: var(--chtholly-shadow-magical);
    }
    
    .chtholly-trail-controller.active {
        background: linear-gradient(45deg, var(--chtholly-success), var(--chtholly-primary));
        animation: pulseTrailController 2s ease-in-out infinite;
    }
    
    .chtholly-trail-settings {
        position: fixed;
        bottom: 200px;
        right: 20px;
        background: rgba(255, 255, 255, 0.95);
        border-radius: var(--chtholly-radius-lg);
        padding: var(--chtholly-space-4);
        box-shadow: var(--chtholly-shadow-lg);
        min-width: 200px;
        z-index: 10001;
        display: none;
        backdrop-filter: blur(10px);
        border: 2px solid rgba(253, 121, 168, 0.2);
    }
    
    .chtholly-trail-settings.show {
        display: block;
        animation: settingsSlideIn 0.3s ease-out;
    }
    
    .chtholly-trail-setting-item {
        margin-bottom: var(--chtholly-space-3);
        font-family: ChthollyFonts();
    }
    
    .chtholly-trail-setting-label {
        display: block;
        font-size: var(--chtholly-font-sm);
        font-weight: var(--chtholly-font-semibold);
        color: var(--chtholly-text-primary);
        margin-bottom: var(--chtholly-space-1);
    }
    
    .chtholly-trail-select {
        width: 100%;
        padding: var(--chtholly-space-2);
        border: 2px solid rgba(253, 121, 168, 0.3);
        border-radius: var(--chtholly-radius-base);
        font-family: inherit;
        font-size: var(--chtholly-font-sm);
        background: white;
        transition: border-color ChthollyAnimations();
    }
    
    .chtholly-trail-select:focus {
        outline: none;
        border-color: var(--chtholly-primary);
        box-shadow: 0 0 0 2px rgba(253, 121, 168, 0.2);
    }
    
    .chtholly-trail-slider {
        width: 100%;
        margin: var(--chtholly-space-2) 0;
    }
    
    .chtholly-trail-slider input[type="range"] {
        width: 100%;
        height: 6px;
        border-radius: 3px;
        background: linear-gradient(to right, 
            rgba(253, 121, 168, 0.3), 
            rgba(253, 121, 168, 0.8));
        outline: none;
        -webkit-appearance: none;
    }
    
    .chtholly-trail-slider input[type="range"]::-webkit-slider-thumb {
        -webkit-appearance: none;
        width: 16px;
        height: 16px;
        border-radius: 50%;
        background: linear-gradient(45deg, var(--chtholly-primary), var(--chtholly-secondary));
        cursor: pointer;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }
    
    .chtholly-trail-value {
        font-size: var(--chtholly-font-xs);
        color: var(--chtholly-text-secondary);
        text-align: center;
    }
    
    /* Âä®ÁîªÂÆö‰πâ */
    @keyframes heartTrail {
        0% {
            opacity: 1;
            transform: scale(0) rotate(0deg);
        }
        50% {
            opacity: 0.8;
            transform: scale(1.2) rotate(180deg);
        }
        100% {
            opacity: 0;
            transform: scale(0.5) rotate(360deg);
        }
    }
    
    @keyframes sparkleTrail {
        0% {
            opacity: 1;
            transform: scale(0);
        }
        30% {
            opacity: 1;
            transform: scale(1.5);
        }
        100% {
            opacity: 0;
            transform: scale(0.3);
        }
    }
    
    @keyframes bubbleTrail {
        0% {
            opacity: 0.8;
            transform: scale(0) translateY(0);
        }
        50% {
            opacity: 0.6;
            transform: scale(1) translateY(-20px);
        }
        100% {
            opacity: 0;
            transform: scale(1.5) translateY(-60px);
        }
    }
    
    @keyframes starTrail {
        0% {
            opacity: 1;
            transform: scale(0) rotate(0deg);
        }
        60% {
            opacity: 0.8;
            transform: scale(1.3) rotate(144deg);
        }
        100% {
            opacity: 0;
            transform: scale(0.4) rotate(288deg);
        }
    }
    
    @keyframes magicTrail {
        0% {
            opacity: 0.9;
            transform: scale(0) rotate(0deg);
        }
        40% {
            opacity: 0.7;
            transform: scale(1.1) rotate(180deg);
        }
        100% {
            opacity: 0;
            transform: scale(0.6) rotate(720deg);
        }
    }
    
    @keyframes pulseTrailController {
        0%, 100% {
            transform: scale(1);
        }
        50% {
            transform: scale(1.05);
        }
    }
    
    @keyframes settingsSlideIn {
        from {
            opacity: 0;
            transform: translateX(20px) scale(0.9);
        }
        to {
            opacity: 1;
            transform: translateX(0) scale(1);
        }
    }
    
    /* ÁâπÊÆäÊ®°ÂºèÊ†∑Âºè */
    .chtholly-mouse-trail-container.rainbow-mode {
        animation: trailRainbow 4s linear infinite;
    }
    
    @keyframes trailRainbow {
        0% { filter: hue-rotate(0deg); }
        100% { filter: hue-rotate(360deg); }
    }
    
    .chtholly-mouse-trail-container.dreamy-mode .chtholly-trail-particle {
        filter: blur(1px) brightness(1.2);
    }
}

[Template] @Element ChthollyMouseTrailSystem {
    div {
        class: "chtholly-mouse-trail-container";
        id: mouseTrailId;
        style: "display: none;";
    }
    
    button {
        class: "chtholly-trail-controller";
        id: trailControlId;
        onclick: "toggleMouseTrail()";
        oncontextmenu: "event.preventDefault(); showTrailSettings(); return false;";
        title: "ÁèÇÊúµËéâÈº†Ê†áÊãñÂ∞æ (Âè≥ÈîÆËÆæÁΩÆ)";
        text: "üåô";
    }
    
    div {
        class: "chtholly-trail-settings";
        id: trailSettingsId;
        
        div {
            class: "chtholly-trail-setting-item";
            
            label {
                class: "chtholly-trail-setting-label";
                text: "ÊãñÂ∞æÁ±ªÂûã";
            }
            
            select {
                class: "chtholly-trail-select";
                id: "trail-type-select";
                onchange: "changeTrailType(this.value)";
                
                option { value: "heart"; text: "üíï Áà±ÂøÉ"; }
                option { value: "sparkle"; text: "‚ú® Èó™ÂÖâ"; selected: true; }
                option { value: "bubble"; text: "ü´ß Ê∞îÊ≥°"; }
                option { value: "star"; text: "‚≠ê ÊòüÊòü"; }
                option { value: "magic"; text: "üîÆ È≠îÊ≥ï"; }
            }
        }
        
        div {
            class: "chtholly-trail-setting-item";
            
            label {
                class: "chtholly-trail-setting-label";
                text: "ÊãñÂ∞æÂØÜÂ∫¶";
            }
            
            div {
                class: "chtholly-trail-slider";
                
                input {
                    type: "range";
                    id: "trail-density";
                    min: "1";
                    max: "10";
                    value: "5";
                    oninput: "changeTrailDensity(this.value)";
                }
                
                div {
                    class: "chtholly-trail-value";
                    id: "density-value";
                    text: "5";
                }
            }
        }
        
        div {
            class: "chtholly-trail-setting-item";
            
            label {
                class: "chtholly-trail-setting-label";
                text: "ÊïàÊûúÊ®°Âºè";
            }
            
            select {
                class: "chtholly-trail-select";
                id: "trail-mode-select";
                onchange: "changeTrailMode(this.value)";
                
                option { value: "normal"; text: "ÊôÆÈÄöÊ®°Âºè"; selected: true; }
                option { value: "rainbow"; text: "ÂΩ©ËôπÊ®°Âºè"; }
                option { value: "dreamy"; text: "Ê¢¶ÂπªÊ®°Âºè"; }
            }
        }
    }
}

// Âú®Element‰∏≠‰ªªÊÑè‰ΩçÁΩÆ‰ΩøÁî®[Origin]Â±ïÁ§∫ËØ≠Ê≥ïÁâπÊÄß
[Origin] @JavaScript MouseTrailScript {
    class ChthollyMouseTrail {
        constructor(containerId, controllerId, settingsId) {
            this.container = document.getElementById(containerId);
            this.controller = document.getElementById(controllerId);
            this.settings = document.getElementById(settingsId);
            this.isActive = false;
            this.particles = [];
            this.mouseX = 0;
            this.mouseY = 0;
            this.lastTrailTime = 0;
            
            // ÈÖçÁΩÆÈÄâÈ°π
            this.config = {
                type: 'sparkle',
                density: 5,
                mode: 'normal',
                maxParticles: 50
            };
            
            this.particleTypes = {
                heart: { symbol: 'üíï', class: 'heart' },
                sparkle: { symbol: '', class: 'sparkle' },
                bubble: { symbol: '', class: 'bubble' },
                star: { symbol: '‚≠ê', class: 'star' },
                magic: { symbol: '', class: 'magic' }
            };
            
            this.init();
        }
        
        init() {
            this.loadSettings();
            this.bindEvents();
            
            // Ê£ÄÊü•Áî®Êà∑ÂÅèÂ•Ω
            const savedState = localStorage.getItem('chtholly-mouse-trail-enabled');
            if (savedState === 'true') {
                this.start();
            }
        }
        
        loadSettings() {
            const savedConfig = localStorage.getItem('chtholly-mouse-trail-config');
            if (savedConfig) {
                this.config = { ...this.config, ...JSON.parse(savedConfig) };
            }
            
            // Êõ¥Êñ∞UI
            this.updateSettingsUI();
        }
        
        saveSettings() {
            localStorage.setItem('chtholly-mouse-trail-config', JSON.stringify(this.config));
        }
        
        updateSettingsUI() {
            const typeSelect = document.getElementById('trail-type-select');
            const densitySlider = document.getElementById('trail-density');
            const densityValue = document.getElementById('density-value');
            const modeSelect = document.getElementById('trail-mode-select');
            
            if (typeSelect) typeSelect.value = this.config.type;
            if (densitySlider) densitySlider.value = this.config.density;
            if (densityValue) densityValue.textContent = this.config.density;
            if (modeSelect) modeSelect.value = this.config.mode;
        }
        
        bindEvents() {
            // Èº†Ê†áÁßªÂä®‰∫ã‰ª∂
            document.addEventListener('mousemove', (e) => {
                this.mouseX = e.clientX;
                this.mouseY = e.clientY;
                
                if (this.isActive) {
                    this.createTrail();
                }
            });
            
            // ÁÇπÂáªÁ©∫ÁôΩÂ§ÑÂÖ≥Èó≠ËÆæÁΩÆ
            document.addEventListener('click', (e) => {
                if (!this.settings.contains(e.target) && !this.controller.contains(e.target)) {
                    this.hideSettings();
                }
            });
            
            // ÈîÆÁõòÂø´Êç∑ÈîÆ
            document.addEventListener('keydown', (e) => {
                if (e.ctrlKey && e.shiftKey && e.key === 'T') {
                    this.toggle();
                }
            });
        }
        
        start() {
            if (this.isActive) return;
            
            this.isActive = true;
            this.container.style.display = 'block';
            this.controller.classList.add('active');
            
            // Â∫îÁî®ÊïàÊûúÊ®°Âºè
            this.applyMode();
            
            // ‰øùÂ≠òÁî®Êà∑ÂÅèÂ•Ω
            localStorage.setItem('chtholly-mouse-trail-enabled', 'true');
            
            this.showTrailToast('ÁèÇÊúµËéâÊãñÂ∞æÊïàÊûúÂ∑≤ÂêØÂä®ÔºÅüåô', 'success');
        }
        
        stop() {
            if (!this.isActive) return;
            
            this.isActive = false;
            this.controller.classList.remove('active');
            
            // Ê∑°Âá∫Áé∞ÊúâÁ≤íÂ≠ê
            this.fadeOutAllParticles();
            
            setTimeout(() => {
                this.container.style.display = 'none';
                this.clearAllParticles();
            }, 1000);
            
            // ‰øùÂ≠òÁî®Êà∑ÂÅèÂ•Ω
            localStorage.setItem('chtholly-mouse-trail-enabled', 'false');
            
            this.showTrailToast('ÊãñÂ∞æÊïàÊûúÂ∑≤ÂÖ≥Èó≠');
        }
        
        toggle() {
            if (this.isActive) {
                this.stop();
            } else {
                this.start();
            }
        }
        
        showSettings() {
            this.settings.classList.add('show');
        }
        
        hideSettings() {
            this.settings.classList.remove('show');
        }
        
        changeType(type) {
            this.config.type = type;
            this.saveSettings();
            this.showTrailToast(`ÂàáÊç¢Âà∞${this.getTypeName(type)}ÊãñÂ∞æ`);
        }
        
        changeDensity(density) {
            this.config.density = parseInt(density);
            document.getElementById('density-value').textContent = density;
            this.saveSettings();
        }
        
        changeMode(mode) {
            this.config.mode = mode;
            this.applyMode();
            this.saveSettings();
            
            const modeNames = {
                normal: 'ÊôÆÈÄöÊ®°Âºè',
                rainbow: 'ÂΩ©ËôπÊ®°Âºè',
                dreamy: 'Ê¢¶ÂπªÊ®°Âºè'
            };
            
            this.showTrailToast(`ÂàáÊç¢Âà∞${modeNames[mode]}`);
        }
        
        applyMode() {
            this.container.className = 'chtholly-mouse-trail-container';
            
            switch (this.config.mode) {
                case 'rainbow':
                    this.container.classList.add('rainbow-mode');
                    break;
                case 'dreamy':
                    this.container.classList.add('dreamy-mode');
                    break;
            }
        }
        
        getTypeName(type) {
            const names = {
                heart: 'Áà±ÂøÉ',
                sparkle: 'Èó™ÂÖâ',
                bubble: 'Ê∞îÊ≥°',
                star: 'ÊòüÊòü',
                magic: 'È≠îÊ≥ï'
            };
            return names[type] || 'Êú™Áü•';
        }
        
        createTrail() {
            const now = Date.now();
            const interval = Math.max(50, 200 - (this.config.density * 15));
            
            if (now - this.lastTrailTime < interval) return;
            
            this.lastTrailTime = now;
            
            // ÂàõÂª∫Â§ö‰∏™Á≤íÂ≠êÂΩ¢ÊàêÊãñÂ∞æÊïàÊûú
            const particleCount = Math.ceil(this.config.density / 3);
            
            for (let i = 0; i < particleCount; i++) {
                setTimeout(() => {
                    this.createParticle();
                }, i * 20);
            }
        }
        
        createParticle() {
            if (this.particles.length >= this.config.maxParticles) {
                this.removeOldestParticle();
            }
            
            const particle = document.createElement('div');
            const particleInfo = this.particleTypes[this.config.type];
            
            particle.className = `chtholly-trail-particle ${particleInfo.class}`;
            particle.textContent = particleInfo.symbol;
            
            // Ê∑ªÂä†ÈöèÊú∫ÂÅèÁßª
            const offsetX = (Math.random() - 0.5) * 20;
            const offsetY = (Math.random() - 0.5) * 20;
            
            particle.style.left = (this.mouseX + offsetX) + 'px';
            particle.style.top = (this.mouseY + offsetY) + 'px';
            
            // Ê∑ªÂä†ÈöèÊú∫Â§ßÂ∞èÂèòÂåñ
            const scale = 0.8 + Math.random() * 0.4;
            particle.style.transform = `scale(${scale})`;
            
            this.container.appendChild(particle);
            this.particles.push(particle);
            
            // Ëé∑ÂèñÂä®ÁîªÊó∂ÈïøÂπ∂Ëá™Âä®Ê∏ÖÁêÜ
            const animationDuration = this.getAnimationDuration(this.config.type);
            setTimeout(() => {
                this.removeParticle(particle);
            }, animationDuration);
        }
        
        getAnimationDuration(type) {
            const durations = {
                heart: 2000,
                sparkle: 1500,
                bubble: 3000,
                star: 1800,
                magic: 2500
            };
            return durations[type] || 1500;
        }
        
        removeParticle(particle) {
            const index = this.particles.indexOf(particle);
            if (index > -1) {
                this.particles.splice(index, 1);
            }
            
            if (particle.parentNode) {
                particle.parentNode.removeChild(particle);
            }
        }
        
        removeOldestParticle() {
            if (this.particles.length > 0) {
                const oldestParticle = this.particles.shift();
                if (oldestParticle.parentNode) {
                    oldestParticle.parentNode.removeChild(oldestParticle);
                }
            }
        }
        
        fadeOutAllParticles() {
            this.particles.forEach(particle => {
                particle.style.transition = 'opacity 1s ease-out';
                particle.style.opacity = '0';
            });
        }
        
        clearAllParticles() {
            this.particles.forEach(particle => {
                if (particle.parentNode) {
                    particle.parentNode.removeChild(particle);
                }
            });
            this.particles = [];
        }
        
        showTrailToast(message, type = 'info') {
            const colors = {
                success: 'linear-gradient(45deg, #00b894, #55a3ff)',
                info: 'linear-gradient(45deg, #a29bfe, #fd79a8)',
                warning: 'linear-gradient(45deg, #fdcb6e, #e17055)'
            };
            
            const toast = document.createElement('div');
            toast.style.cssText = `
                position: fixed;
                top: 20px;
                left: 50%;
                transform: translateX(-50%);
                background: ${colors[type] || colors.info};
                color: white;
                padding: 12px 20px;
                border-radius: 20px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.2);
                z-index: 10002;
                font-family: ${getComputedStyle(document.documentElement).getPropertyValue('--chtholly-font-family')};
                font-weight: 600;
                animation: trailToastIn 0.3s ease-out;
                text-align: center;
            `;
            toast.textContent = message;
            
            document.body.appendChild(toast);
            
            setTimeout(() => {
                toast.style.animation = 'trailToastOut 0.3s ease-in';
                setTimeout(() => toast.remove(), 300);
            }, 2000);
        }
    }
    
    // ÂÖ®Â±ÄÂÆû‰æã
    let chthollyMouseTrail = null;
    
    // ÂÖ®Â±ÄÂáΩÊï∞
    function toggleMouseTrail() {
        if (chthollyMouseTrail) {
            chthollyMouseTrail.toggle();
        }
    }
    
    function showTrailSettings() {
        if (chthollyMouseTrail) {
            chthollyMouseTrail.showSettings();
        }
    }
    
    function changeTrailType(type) {
        if (chthollyMouseTrail) {
            chthollyMouseTrail.changeType(type);
        }
    }
    
    function changeTrailDensity(density) {
        if (chthollyMouseTrail) {
            chthollyMouseTrail.changeDensity(density);
        }
    }
    
    function changeTrailMode(mode) {
        if (chthollyMouseTrail) {
            chthollyMouseTrail.changeMode(mode);
        }
    }
    
    function initializeMouseTrail() {
        // Á≠âÂæÖDOMÂä†ËΩΩÂÆåÊàê
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializeMouseTrail);
            return;
        }
        
        // Êü•ÊâæÊãñÂ∞æÂÖÉÁ¥†
        const trailContainer = document.querySelector('.chtholly-mouse-trail-container');
        const controller = document.querySelector('.chtholly-trail-controller');
        const settings = document.querySelector('.chtholly-trail-settings');
        
        if (trailContainer && controller && settings) {
            chthollyMouseTrail = new ChthollyMouseTrail(
                trailContainer.id,
                controller.id,
                settings.id
            );
        }
    }
    
    // È°µÈù¢Âä†ËΩΩÊó∂ÂàùÂßãÂåñ
    initializeMouseTrail();
}

// ToastÂä®ÁîªÊ†∑Âºè - Âú®Êñá‰ª∂Êú´Â∞æ‰ΩøÁî®[Origin]
[Origin] @Style TrailToastAnimations {
    @keyframes trailToastIn {
        from {
            transform: translateX(-50%) translateY(-20px) scale(0.8);
            opacity: 0;
        }
        to {
            transform: translateX(-50%) translateY(0) scale(1);
            opacity: 1;
        }
    }
    
    @keyframes trailToastOut {
        from {
            transform: translateX(-50%) translateY(0) scale(1);
            opacity: 1;
        }
        to {
            transform: translateX(-50%) translateY(-20px) scale(0.8);
            opacity: 0;
        }
    }
}