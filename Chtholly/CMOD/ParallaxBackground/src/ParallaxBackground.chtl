[Template] @Style ChthollyParallaxBackgroundStyle {
    .chtholly-parallax-container {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        overflow: hidden;
        z-index: -1;
        background: linear-gradient(135deg, 
            var(--chtholly-bg-light) 0%,
            var(--chtholly-bg-secondary) 50%,
            var(--chtholly-primary) 100%);
    }
    
    .chtholly-parallax-layer {
        position: absolute;
        width: 120%;
        height: 120%;
        background-repeat: repeat;
        background-size: cover;
        will-change: transform;
        transition: transform 0.1s ease-out;
    }
    
    .chtholly-parallax-layer.stars {
        background-image: 
            radial-gradient(2px 2px at 20px 30px, #fff, transparent),
            radial-gradient(2px 2px at 40px 70px, rgba(253, 121, 168, 0.8), transparent),
            radial-gradient(1px 1px at 90px 40px, rgba(253, 203, 110, 0.6), transparent),
            radial-gradient(1px 1px at 130px 80px, #fff, transparent),
            radial-gradient(2px 2px at 160px 30px, rgba(253, 121, 168, 0.4), transparent);
        background-size: 200px 100px;
        animation: twinkleStars 8s ease-in-out infinite;
        z-index: 1;
    }
    
    .chtholly-parallax-layer.clouds {
        background-image: 
            radial-gradient(ellipse at center, rgba(255, 255, 255, 0.3) 0%, transparent 70%),
            radial-gradient(ellipse at 30% 20%, rgba(255, 255, 255, 0.2) 0%, transparent 60%),
            radial-gradient(ellipse at 70% 80%, rgba(253, 121, 168, 0.1) 0%, transparent 50%);
        background-size: 300px 150px, 200px 100px, 250px 120px;
        z-index: 2;
    }
    
    .chtholly-parallax-layer.mountains {
        background-image: 
            linear-gradient(to bottom, transparent 60%, rgba(162, 155, 254, 0.4) 70%, rgba(162, 155, 254, 0.6) 85%, rgba(108, 92, 231, 0.8) 100%),
            linear-gradient(to bottom, transparent 70%, rgba(253, 121, 168, 0.3) 80%, rgba(253, 121, 168, 0.5) 90%, rgba(214, 48, 49, 0.7) 100%);
        background-size: 400px 100%, 350px 100%;
        z-index: 3;
    }
    
    .chtholly-parallax-layer.sakura {
        background-image: 
            radial-gradient(circle at 25% 25%, rgba(255, 179, 217, 0.6) 0%, transparent 50%),
            radial-gradient(circle at 75% 75%, rgba(253, 121, 168, 0.4) 0%, transparent 40%),
            radial-gradient(circle at 50% 10%, rgba(253, 203, 110, 0.3) 0%, transparent 30%);
        background-size: 150px 150px, 100px 100px, 80px 80px;
        animation: floatingSakura 12s ease-in-out infinite;
        z-index: 4;
    }
    
    .chtholly-parallax-layer.magical-particles {
        background-image: 
            radial-gradient(circle, rgba(253, 121, 168, 0.8) 1px, transparent 1px),
            radial-gradient(circle, rgba(253, 203, 110, 0.6) 1px, transparent 1px),
            radial-gradient(circle, rgba(162, 155, 254, 0.7) 1px, transparent 1px);
        background-size: 80px 80px, 120px 120px, 100px 100px;
        animation: magicalFloat 10s linear infinite;
        z-index: 5;
    }
    
    .chtholly-parallax-controller {
        position: fixed;
        bottom: 200px;
        right: 20px;
        background: linear-gradient(45deg, var(--chtholly-accent), var(--chtholly-primary));
        border: none;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        color: white;
        font-size: 18px;
        cursor: pointer;
        box-shadow: var(--chtholly-shadow-lg);
        transition: all ChthollyAnimations();
        z-index: 10000;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .chtholly-parallax-controller:hover {
        transform: scale(1.1) rotate(180deg);
        box-shadow: var(--chtholly-shadow-magical);
    }
    
    .chtholly-parallax-controller.active {
        background: linear-gradient(45deg, var(--chtholly-success), var(--chtholly-secondary));
        animation: pulseParallaxController 3s ease-in-out infinite;
    }
    
    .chtholly-parallax-settings {
        position: fixed;
        bottom: 260px;
        right: 20px;
        background: rgba(255, 255, 255, 0.95);
        border-radius: var(--chtholly-radius-lg);
        padding: var(--chtholly-space-4);
        box-shadow: var(--chtholly-shadow-xl);
        min-width: 220px;
        z-index: 10001;
        display: none;
        backdrop-filter: blur(15px);
        border: 2px solid rgba(253, 121, 168, 0.2);
    }
    
    .chtholly-parallax-settings.show {
        display: block;
        animation: parallaxSettingsSlideIn 0.4s ease-out;
    }
    
    .chtholly-parallax-setting-group {
        margin-bottom: var(--chtholly-space-4);
        font-family: ChthollyFonts();
    }
    
    .chtholly-parallax-setting-title {
        font-size: var(--chtholly-font-sm);
        font-weight: var(--chtholly-font-bold);
        color: var(--chtholly-primary);
        margin-bottom: var(--chtholly-space-2);
        display: flex;
        align-items: center;
        gap: var(--chtholly-space-2);
    }
    
    .chtholly-parallax-layer-control {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: var(--chtholly-space-2);
        padding: var(--chtholly-space-2);
        background: rgba(253, 121, 168, 0.05);
        border-radius: var(--chtholly-radius-base);
    }
    
    .chtholly-parallax-layer-name {
        font-size: var(--chtholly-font-xs);
        color: var(--chtholly-text-primary);
        flex: 1;
    }
    
    .chtholly-parallax-toggle {
        width: 40px;
        height: 20px;
        background: #ddd;
        border-radius: 10px;
        position: relative;
        cursor: pointer;
        transition: background ChthollyAnimations();
    }
    
    .chtholly-parallax-toggle.active {
        background: var(--chtholly-primary);
    }
    
    .chtholly-parallax-toggle::after {
        content: "";
        position: absolute;
        width: 16px;
        height: 16px;
        border-radius: 50%;
        background: white;
        top: 2px;
        left: 2px;
        transition: transform ChthollyAnimations();
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }
    
    .chtholly-parallax-toggle.active::after {
        transform: translateX(20px);
    }
    
    .chtholly-parallax-speed-control {
        margin-top: var(--chtholly-space-2);
    }
    
    .chtholly-parallax-speed-label {
        font-size: var(--chtholly-font-xs);
        color: var(--chtholly-text-secondary);
        margin-bottom: var(--chtholly-space-1);
    }
    
    .chtholly-parallax-speed-slider {
        width: 100%;
        margin: var(--chtholly-space-1) 0;
    }
    
    .chtholly-parallax-speed-slider input[type="range"] {
        width: 100%;
        height: 4px;
        border-radius: 2px;
        background: linear-gradient(to right, 
            rgba(253, 121, 168, 0.3), 
            rgba(253, 121, 168, 0.8));
        outline: none;
        -webkit-appearance: none;
    }
    
    .chtholly-parallax-speed-slider input[type="range"]::-webkit-slider-thumb {
        -webkit-appearance: none;
        width: 14px;
        height: 14px;
        border-radius: 50%;
        background: linear-gradient(45deg, var(--chtholly-primary), var(--chtholly-secondary));
        cursor: pointer;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }
    
    .chtholly-parallax-preset-buttons {
        display: flex;
        gap: var(--chtholly-space-2);
        margin-top: var(--chtholly-space-3);
    }
    
    .chtholly-parallax-preset-btn {
        flex: 1;
        padding: var(--chtholly-space-2);
        border: 1px solid rgba(253, 121, 168, 0.3);
        border-radius: var(--chtholly-radius-base);
        background: white;
        color: var(--chtholly-text-primary);
        font-size: var(--chtholly-font-xs);
        cursor: pointer;
        transition: all ChthollyAnimations();
    }
    
    .chtholly-parallax-preset-btn:hover,
    .chtholly-parallax-preset-btn.active {
        background: var(--chtholly-primary);
        color: white;
        border-color: var(--chtholly-primary);
    }
    
    /* 动画定义 */
    @keyframes twinkleStars {
        0%, 100% {
            opacity: 0.8;
            transform: scale(1);
        }
        50% {
            opacity: 1;
            transform: scale(1.1);
        }
    }
    
    @keyframes floatingSakura {
        0%, 100% {
            transform: translateY(0) rotate(0deg);
        }
        25% {
            transform: translateY(-10px) rotate(5deg);
        }
        50% {
            transform: translateY(-5px) rotate(-3deg);
        }
        75% {
            transform: translateY(-8px) rotate(2deg);
        }
    }
    
    @keyframes magicalFloat {
        0% {
            transform: translateY(0) translateX(0);
        }
        25% {
            transform: translateY(-15px) translateX(5px);
        }
        50% {
            transform: translateY(-10px) translateX(-3px);
        }
        75% {
            transform: translateY(-20px) translateX(8px);
        }
        100% {
            transform: translateY(0) translateX(0);
        }
    }
    
    @keyframes pulseParallaxController {
        0%, 100% {
            transform: scale(1);
            box-shadow: var(--chtholly-shadow-lg);
        }
        50% {
            transform: scale(1.05);
            box-shadow: var(--chtholly-shadow-magical);
        }
    }
    
    @keyframes parallaxSettingsSlideIn {
        from {
            opacity: 0;
            transform: translateX(30px) scale(0.9);
        }
        to {
            opacity: 1;
            transform: translateX(0) scale(1);
        }
    }
    
    /* 特殊模式 */
    .chtholly-parallax-container.dreamy-mode {
        filter: blur(0.5px) brightness(1.1) saturate(1.3);
    }
    
    .chtholly-parallax-container.night-mode {
        background: linear-gradient(135deg, 
            #2c3e50 0%,
            #34495e 50%, 
            #2c3e50 100%);
    }
    
    .chtholly-parallax-container.rainbow-mode {
        animation: parallaxRainbow 6s linear infinite;
    }
    
    @keyframes parallaxRainbow {
        0% { filter: hue-rotate(0deg); }
        100% { filter: hue-rotate(360deg); }
    }
}

[Template] @Element ChthollyParallaxBackgroundSystem {
    div {
        class: "chtholly-parallax-container";
        id: parallaxContainerId;
        
        div {
            class: "chtholly-parallax-layer stars";
            id: "parallax-stars";
            data-speed: "0.2";
        }
        
        div {
            class: "chtholly-parallax-layer clouds";
            id: "parallax-clouds";
            data-speed: "0.5";
        }
        
        div {
            class: "chtholly-parallax-layer mountains";
            id: "parallax-mountains";
            data-speed: "0.8";
        }
        
        div {
            class: "chtholly-parallax-layer sakura";
            id: "parallax-sakura";
            data-speed: "1.0";
        }
        
        div {
            class: "chtholly-parallax-layer magical-particles";
            id: "parallax-particles";
            data-speed: "1.5";
        }
    }
    
    button {
        class: "chtholly-parallax-controller";
        id: parallaxControlId;
        onclick: "toggleParallaxBackground()";
        oncontextmenu: "event.preventDefault(); showParallaxSettings(); return false;";
        title: "珂朵莉视差背景 (右键设置)";
        text: "🏔️";
    }
    
    div {
        class: "chtholly-parallax-settings";
        id: parallaxSettingsId;
        
        div {
            class: "chtholly-parallax-setting-group";
            
            div {
                class: "chtholly-parallax-setting-title";
                text: "🌟 图层控制";
            }
            
            div {
                class: "chtholly-parallax-layer-control";
                
                span {
                    class: "chtholly-parallax-layer-name";
                    text: "星空";
                }
                
                div {
                    class: "chtholly-parallax-toggle active";
                    data-layer: "stars";
                    onclick: "toggleParallaxLayer(this)";
                }
            }
            
            div {
                class: "chtholly-parallax-layer-control";
                
                span {
                    class: "chtholly-parallax-layer-name";
                    text: "云朵";
                }
                
                div {
                    class: "chtholly-parallax-toggle active";
                    data-layer: "clouds";
                    onclick: "toggleParallaxLayer(this)";
                }
            }
            
            div {
                class: "chtholly-parallax-layer-control";
                
                span {
                    class: "chtholly-parallax-layer-name";
                    text: "山峦";
                }
                
                div {
                    class: "chtholly-parallax-toggle active";
                    data-layer: "mountains";
                    onclick: "toggleParallaxLayer(this)";
                }
            }
            
            div {
                class: "chtholly-parallax-layer-control";
                
                span {
                    class: "chtholly-parallax-layer-name";
                    text: "樱花";
                }
                
                div {
                    class: "chtholly-parallax-toggle active";
                    data-layer: "sakura";
                    onclick: "toggleParallaxLayer(this)";
                }
            }
            
            div {
                class: "chtholly-parallax-layer-control";
                
                span {
                    class: "chtholly-parallax-layer-name";
                    text: "魔法粒子";
                }
                
                div {
                    class: "chtholly-parallax-toggle active";
                    data-layer: "magical-particles";
                    onclick: "toggleParallaxLayer(this)";
                }
            }
        }
        
        div {
            class: "chtholly-parallax-setting-group";
            
            div {
                class: "chtholly-parallax-setting-title";
                text: "⚡ 滚动速度";
            }
            
            div {
                class: "chtholly-parallax-speed-control";
                
                div {
                    class: "chtholly-parallax-speed-label";
                    text: "整体速度倍数";
                }
                
                div {
                    class: "chtholly-parallax-speed-slider";
                    
                    input {
                        type: "range";
                        id: "parallax-speed";
                        min: "0.1";
                        max: "3.0";
                        step: "0.1";
                        value: "1.0";
                        oninput: "changeParallaxSpeed(this.value)";
                    }
                }
            }
        }
        
        div {
            class: "chtholly-parallax-setting-group";
            
            div {
                class: "chtholly-parallax-setting-title";
                text: "🎨 预设模式";
            }
            
            div {
                class: "chtholly-parallax-preset-buttons";
                
                button {
                    class: "chtholly-parallax-preset-btn active";
                    data-preset: "normal";
                    onclick: "applyParallaxPreset(this, 'normal')";
                    text: "普通";
                }
                
                button {
                    class: "chtholly-parallax-preset-btn";
                    data-preset: "dreamy";
                    onclick: "applyParallaxPreset(this, 'dreamy')";
                    text: "梦幻";
                }
                
                button {
                    class: "chtholly-parallax-preset-btn";
                    data-preset: "night";
                    onclick: "applyParallaxPreset(this, 'night')";
                    text: "夜晚";
                }
                
                button {
                    class: "chtholly-parallax-preset-btn";
                    data-preset: "rainbow";
                    onclick: "applyParallaxPreset(this, 'rainbow')";
                    text: "彩虹";
                }
            }
        }
    }
}

// 在Template内使用[Origin]，展示语法灵活性
[Origin] @JavaScript ParallaxBackgroundScript {
    class ChthollyParallaxBackground {
        constructor(containerId, controllerId, settingsId) {
            this.container = document.getElementById(containerId);
            this.controller = document.getElementById(controllerId);
            this.settings = document.getElementById(settingsId);
            this.isActive = true; // 默认启用
            this.layers = [];
            this.lastScrollY = 0;
            this.ticking = false;
            
            // 配置选项
            this.config = {
                speed: 1.0,
                preset: 'normal',
                enabledLayers: {
                    stars: true,
                    clouds: true,
                    mountains: true,
                    sakura: true,
                    'magical-particles': true
                }
            };
            
            this.init();
        }
        
        init() {
            this.collectLayers();
            this.loadSettings();
            this.bindEvents();
            this.start();
        }
        
        collectLayers() {
            this.layers = Array.from(this.container.querySelectorAll('.chtholly-parallax-layer'));
            this.layers.forEach(layer => {
                layer.style.transform = 'translateY(0px)';
            });
        }
        
        loadSettings() {
            const savedConfig = localStorage.getItem('chtholly-parallax-config');
            if (savedConfig) {
                this.config = { ...this.config, ...JSON.parse(savedConfig) };
            }
            
            this.updateSettingsUI();
            this.applyLayerVisibility();
            this.applyPreset(this.config.preset);
        }
        
        saveSettings() {
            localStorage.setItem('chtholly-parallax-config', JSON.stringify(this.config));
        }
        
        updateSettingsUI() {
            // 更新速度滑块
            const speedSlider = document.getElementById('parallax-speed');
            if (speedSlider) speedSlider.value = this.config.speed;
            
            // 更新图层开关
            Object.keys(this.config.enabledLayers).forEach(layerName => {
                const toggle = document.querySelector(`[data-layer="${layerName}"]`);
                if (toggle) {
                    toggle.classList.toggle('active', this.config.enabledLayers[layerName]);
                }
            });
            
            // 更新预设按钮
            document.querySelectorAll('.chtholly-parallax-preset-btn').forEach(btn => {
                btn.classList.toggle('active', btn.dataset.preset === this.config.preset);
            });
        }
        
        bindEvents() {
            // 滚动事件优化
            document.addEventListener('scroll', () => {
                this.lastScrollY = window.pageYOffset;
                this.requestTick();
            }, { passive: true });
            
            // 鼠标移动增强效果
            document.addEventListener('mousemove', (e) => {
                if (this.isActive) {
                    this.addMouseParallax(e);
                }
            });
            
            // 点击空白处关闭设置
            document.addEventListener('click', (e) => {
                if (!this.settings.contains(e.target) && !this.controller.contains(e.target)) {
                    this.hideSettings();
                }
            });
            
            // 键盘快捷键
            document.addEventListener('keydown', (e) => {
                if (e.ctrlKey && e.shiftKey && e.key === 'P') {
                    this.toggle();
                }
            });
        }
        
        requestTick() {
            if (!this.ticking) {
                requestAnimationFrame(() => {
                    this.updateParallax();
                    this.ticking = false;
                });
                this.ticking = true;
            }
        }
        
        updateParallax() {
            if (!this.isActive) return;
            
            this.layers.forEach(layer => {
                if (!this.config.enabledLayers[this.getLayerName(layer)]) return;
                
                const speed = parseFloat(layer.dataset.speed) * this.config.speed;
                const yPos = -(this.lastScrollY * speed);
                layer.style.transform = `translateY(${yPos}px)`;
            });
        }
        
        addMouseParallax(e) {
            const mouseX = (e.clientX / window.innerWidth - 0.5) * 2;
            const mouseY = (e.clientY / window.innerHeight - 0.5) * 2;
            
            this.layers.forEach(layer => {
                if (!this.config.enabledLayers[this.getLayerName(layer)]) return;
                
                const speed = parseFloat(layer.dataset.speed) * this.config.speed;
                const scrollOffset = -(this.lastScrollY * speed);
                const mouseXOffset = mouseX * speed * 10;
                const mouseYOffset = mouseY * speed * 5;
                
                layer.style.transform = `translateY(${scrollOffset + mouseYOffset}px) translateX(${mouseXOffset}px)`;
            });
        }
        
        getLayerName(layer) {
            const classes = layer.className.split(' ');
            return classes[classes.length - 1];
        }
        
        start() {
            this.isActive = true;
            this.controller.classList.add('active');
            localStorage.setItem('chtholly-parallax-enabled', 'true');
        }
        
        stop() {
            this.isActive = false;
            this.controller.classList.remove('active');
            
            // 重置所有层位置
            this.layers.forEach(layer => {
                layer.style.transform = 'translateY(0px) translateX(0px)';
            });
            
            localStorage.setItem('chtholly-parallax-enabled', 'false');
        }
        
        toggle() {
            if (this.isActive) {
                this.stop();
                this.showParallaxToast('视差背景已关闭');
            } else {
                this.start();
                this.showParallaxToast('视差背景已启动！', 'success');
            }
        }
        
        showSettings() {
            this.settings.classList.add('show');
        }
        
        hideSettings() {
            this.settings.classList.remove('show');
        }
        
        toggleLayer(toggle) {
            const layerName = toggle.dataset.layer;
            const isEnabled = toggle.classList.contains('active');
            
            toggle.classList.toggle('active');
            this.config.enabledLayers[layerName] = !isEnabled;
            
            this.applyLayerVisibility();
            this.saveSettings();
            
            const statusText = this.config.enabledLayers[layerName] ? '已显示' : '已隐藏';
            this.showParallaxToast(`${this.getLayerDisplayName(layerName)}${statusText}`);
        }
        
        getLayerDisplayName(layerName) {
            const names = {
                'stars': '星空',
                'clouds': '云朵',
                'mountains': '山峦',
                'sakura': '樱花',
                'magical-particles': '魔法粒子'
            };
            return names[layerName] || layerName;
        }
        
        applyLayerVisibility() {
            this.layers.forEach(layer => {
                const layerName = this.getLayerName(layer);
                const isEnabled = this.config.enabledLayers[layerName];
                layer.style.opacity = isEnabled ? '1' : '0';
                layer.style.pointerEvents = isEnabled ? 'none' : 'none';
            });
        }
        
        changeSpeed(speed) {
            this.config.speed = parseFloat(speed);
            this.saveSettings();
        }
        
        applyPreset(presetName, button = null) {
            this.config.preset = presetName;
            
            // 更新按钮状态
            if (button) {
                document.querySelectorAll('.chtholly-parallax-preset-btn').forEach(btn => {
                    btn.classList.remove('active');
                });
                button.classList.add('active');
            }
            
            // 应用预设样式
            this.container.className = 'chtholly-parallax-container';
            
            switch (presetName) {
                case 'dreamy':
                    this.container.classList.add('dreamy-mode');
                    break;
                case 'night':
                    this.container.classList.add('night-mode');
                    break;
                case 'rainbow':
                    this.container.classList.add('rainbow-mode');
                    break;
            }
            
            this.saveSettings();
            
            const presetNames = {
                normal: '普通模式',
                dreamy: '梦幻模式',
                night: '夜晚模式',
                rainbow: '彩虹模式'
            };
            
            this.showParallaxToast(`切换到${presetNames[presetName]}`);
        }
        
        showParallaxToast(message, type = 'info') {
            const colors = {
                success: 'linear-gradient(45deg, #00b894, #55a3ff)',
                info: 'linear-gradient(45deg, #a29bfe, #fd79a8)',
                warning: 'linear-gradient(45deg, #fdcb6e, #e17055)'
            };
            
            const toast = document.createElement('div');
            toast.style.cssText = `
                position: fixed;
                top: 20px;
                left: 50%;
                transform: translateX(-50%);
                background: ${colors[type] || colors.info};
                color: white;
                padding: 12px 20px;
                border-radius: 20px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.2);
                z-index: 10002;
                font-family: ${getComputedStyle(document.documentElement).getPropertyValue('--chtholly-font-family')};
                font-weight: 600;
                animation: parallaxToastIn 0.3s ease-out;
                text-align: center;
            `;
            toast.textContent = message;
            
            document.body.appendChild(toast);
            
            setTimeout(() => {
                toast.style.animation = 'parallaxToastOut 0.3s ease-in';
                setTimeout(() => toast.remove(), 300);
            }, 2000);
        }
    }
    
    // 全局实例
    let chthollyParallaxBackground = null;
    
    // 全局函数
    function toggleParallaxBackground() {
        if (chthollyParallaxBackground) {
            chthollyParallaxBackground.toggle();
        }
    }
    
    function showParallaxSettings() {
        if (chthollyParallaxBackground) {
            chthollyParallaxBackground.showSettings();
        }
    }
    
    function toggleParallaxLayer(toggle) {
        if (chthollyParallaxBackground) {
            chthollyParallaxBackground.toggleLayer(toggle);
        }
    }
    
    function changeParallaxSpeed(speed) {
        if (chthollyParallaxBackground) {
            chthollyParallaxBackground.changeSpeed(speed);
        }
    }
    
    function applyParallaxPreset(button, preset) {
        if (chthollyParallaxBackground) {
            chthollyParallaxBackground.applyPreset(preset, button);
        }
    }
    
    function initializeParallaxBackground() {
        // 等待DOM加载完成
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializeParallaxBackground);
            return;
        }
        
        // 查找视差背景元素
        const parallaxContainer = document.querySelector('.chtholly-parallax-container');
        const controller = document.querySelector('.chtholly-parallax-controller');
        const settings = document.querySelector('.chtholly-parallax-settings');
        
        if (parallaxContainer && controller && settings) {
            chthollyParallaxBackground = new ChthollyParallaxBackground(
                parallaxContainer.id,
                controller.id,
                settings.id
            );
        }
    }
    
    // 页面加载时初始化
    initializeParallaxBackground();
}

// Toast动画样式 - 文件末尾使用[Origin]
[Origin] @Style ParallaxToastAnimations {
    @keyframes parallaxToastIn {
        from {
            transform: translateX(-50%) translateY(-20px) scale(0.8);
            opacity: 0;
        }
        to {
            transform: translateX(-50%) translateY(0) scale(1);
            opacity: 1;
        }
    }
    
    @keyframes parallaxToastOut {
        from {
            transform: translateX(-50%) translateY(0) scale(1);
            opacity: 1;
        }
        to {
            transform: translateX(-50%) translateY(-20px) scale(0.8);
            opacity: 0;
        }
    }
}