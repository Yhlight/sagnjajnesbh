[Template] @Style ChthollyProgressBarStyle {
    .chtholly-progress-container {
        width: 100%;
        margin: ChthollySpacing() 0;
        font-family: ChthollyFonts();
    }
    
    .chtholly-progress-label {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: var(--chtholly-space-2);
        font-size: var(--chtholly-font-sm);
        color: var(--chtholly-text-primary);
    }
    
    .chtholly-progress-title {
        font-weight: var(--chtholly-font-semibold);
        display: flex;
        align-items: center;
        gap: var(--chtholly-space-2);
    }
    
    .chtholly-progress-percentage {
        font-weight: var(--chtholly-font-bold);
        color: var(--chtholly-primary);
        font-size: var(--chtholly-font-base);
    }
    
    .chtholly-progress-bar {
        width: 100%;
        height: 12px;
        background: linear-gradient(90deg, 
            rgba(253, 121, 168, 0.1), 
            rgba(253, 203, 110, 0.1));
        border-radius: var(--chtholly-radius-full);
        overflow: hidden;
        position: relative;
        box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.1);
        border: 1px solid rgba(253, 121, 168, 0.2);
    }
    
    .chtholly-progress-fill {
        height: 100%;
        background: linear-gradient(90deg, 
            var(--chtholly-primary), 
            var(--chtholly-secondary), 
            var(--chtholly-accent));
        border-radius: inherit;
        transition: width ChthollyAnimations();
        position: relative;
        overflow: hidden;
        animation: progressShimmer 2s ease-in-out infinite;
    }
    
    .chtholly-progress-fill::before {
        content: "";
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, 
            transparent, 
            rgba(255, 255, 255, 0.4), 
            transparent);
        animation: progressGlow 2s ease-in-out infinite;
    }
    
    .chtholly-progress-segments {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
    }
    
    .chtholly-progress-segment {
        flex: 1;
        border-right: 1px solid rgba(255, 255, 255, 0.3);
        height: 100%;
    }
    
    .chtholly-progress-segment:last-child {
        border-right: none;
    }
    
    .chtholly-progress-status {
        margin-top: var(--chtholly-space-2);
        font-size: var(--chtholly-font-xs);
        color: var(--chtholly-text-secondary);
        display: flex;
        align-items: center;
        gap: var(--chtholly-space-2);
    }
    
    .chtholly-progress-status-icon {
        font-size: var(--chtholly-font-sm);
        animation: statusPulse 2s ease-in-out infinite;
    }
    
    /* 不同类型的进度条 */
    .chtholly-progress-container.success .chtholly-progress-fill {
        background: linear-gradient(90deg, 
            var(--chtholly-success), 
            #55a3ff, 
            var(--chtholly-accent));
    }
    
    .chtholly-progress-container.warning .chtholly-progress-fill {
        background: linear-gradient(90deg, 
            var(--chtholly-warning), 
            #fdcb6e, 
            #e17055);
    }
    
    .chtholly-progress-container.danger .chtholly-progress-fill {
        background: linear-gradient(90deg, 
            var(--chtholly-danger), 
            #e17055, 
            #d63031);
    }
    
    .chtholly-progress-container.magical .chtholly-progress-fill {
        background: linear-gradient(90deg, 
            #a29bfe, 
            var(--chtholly-primary), 
            #6c5ce7);
        animation: progressMagical 3s ease-in-out infinite;
    }
    
    /* 圆形进度条 */
    .chtholly-progress-circle {
        width: 120px;
        height: 120px;
        position: relative;
        margin: 0 auto;
    }
    
    .chtholly-progress-circle-svg {
        width: 100%;
        height: 100%;
        transform: rotate(-90deg);
    }
    
    .chtholly-progress-circle-bg {
        fill: none;
        stroke: rgba(253, 121, 168, 0.1);
        stroke-width: 8;
    }
    
    .chtholly-progress-circle-fill {
        fill: none;
        stroke: url(#chthollyGradient);
        stroke-width: 8;
        stroke-linecap: round;
        stroke-dasharray: 314.16;
        stroke-dashoffset: 314.16;
        transition: stroke-dashoffset ChthollyAnimations();
        animation: circleShimmer 3s ease-in-out infinite;
    }
    
    .chtholly-progress-circle-center {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        text-align: center;
    }
    
    .chtholly-progress-circle-percentage {
        font-size: var(--chtholly-font-xl);
        font-weight: var(--chtholly-font-bold);
        color: var(--chtholly-primary);
        line-height: 1;
    }
    
    .chtholly-progress-circle-label {
        font-size: var(--chtholly-font-xs);
        color: var(--chtholly-text-secondary);
        margin-top: var(--chtholly-space-1);
    }
    
    /* 控制器 */
    .chtholly-progress-controller {
        position: fixed;
        bottom: 320px;
        right: 20px;
        background: linear-gradient(45deg, var(--chtholly-accent), var(--chtholly-secondary));
        border: none;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        color: white;
        font-size: 18px;
        cursor: pointer;
        box-shadow: var(--chtholly-shadow-lg);
        transition: all ChthollyAnimations();
        z-index: 10000;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .chtholly-progress-controller:hover {
        transform: scale(1.1) rotate(45deg);
        box-shadow: var(--chtholly-shadow-magical);
    }
    
    .chtholly-progress-controller.active {
        background: linear-gradient(45deg, var(--chtholly-success), var(--chtholly-primary));
        animation: pulseProgressController 2s ease-in-out infinite;
    }
    
    .chtholly-progress-demo {
        position: fixed;
        bottom: 380px;
        right: 20px;
        background: rgba(255, 255, 255, 0.95);
        border-radius: var(--chtholly-radius-lg);
        padding: ChthollySpacing();
        box-shadow: var(--chtholly-shadow-lg);
        min-width: 300px;
        z-index: 10001;
        display: none;
        backdrop-filter: blur(15px);
        border: 2px solid rgba(253, 121, 168, 0.2);
    }
    
    .chtholly-progress-demo.show {
        display: block;
        animation: progressDemoSlideIn 0.4s ease-out;
    }
    
    .chtholly-progress-demo-title {
        font-size: var(--chtholly-font-base);
        font-weight: var(--chtholly-font-bold);
        color: var(--chtholly-primary);
        margin-bottom: ChthollySpacing();
        text-align: center;
    }
    
    .chtholly-progress-demo-controls {
        display: flex;
        gap: var(--chtholly-space-2);
        margin-bottom: ChthollySpacing();
        justify-content: center;
    }
    
    .chtholly-progress-demo-btn {
        padding: var(--chtholly-space-2) var(--chtholly-space-3);
        border: 1px solid rgba(253, 121, 168, 0.3);
        border-radius: var(--chtholly-radius-base);
        background: white;
        color: var(--chtholly-text-primary);
        font-size: var(--chtholly-font-xs);
        cursor: pointer;
        transition: all ChthollyAnimations();
    }
    
    .chtholly-progress-demo-btn:hover,
    .chtholly-progress-demo-btn.active {
        background: var(--chtholly-primary);
        color: white;
        border-color: var(--chtholly-primary);
    }
    
    /* 动画定义 */
    @keyframes progressShimmer {
        0%, 100% {
            box-shadow: 0 0 5px rgba(253, 121, 168, 0.3);
        }
        50% {
            box-shadow: 0 0 15px rgba(253, 121, 168, 0.6);
        }
    }
    
    @keyframes progressGlow {
        0% {
            left: -100%;
        }
        100% {
            left: 100%;
        }
    }
    
    @keyframes progressMagical {
        0%, 100% {
            filter: hue-rotate(0deg) saturate(1);
        }
        50% {
            filter: hue-rotate(45deg) saturate(1.3);
        }
    }
    
    @keyframes circleShimmer {
        0%, 100% {
            filter: drop-shadow(0 0 3px rgba(253, 121, 168, 0.4));
        }
        50% {
            filter: drop-shadow(0 0 8px rgba(253, 121, 168, 0.8));
        }
    }
    
    @keyframes statusPulse {
        0%, 100% {
            opacity: 0.7;
            transform: scale(1);
        }
        50% {
            opacity: 1;
            transform: scale(1.1);
        }
    }
    
    @keyframes pulseProgressController {
        0%, 100% {
            transform: scale(1);
        }
        50% {
            transform: scale(1.05);
        }
    }
    
    @keyframes progressDemoSlideIn {
        from {
            opacity: 0;
            transform: translateX(30px) scale(0.9);
        }
        to {
            opacity: 1;
            transform: translateX(0) scale(1);
        }
    }
}

[Template] @Element ChthollyProgressBar {
    div {
        class: "chtholly-progress-container";
        id: progressContainerId;
        data-type: type;
        
        div {
            class: "chtholly-progress-label";
            
            div {
                class: "chtholly-progress-title";
                text: title;
            }
            
            div {
                class: "chtholly-progress-percentage";
                id: progressPercentageId;
                text: "0%";
            }
        }
        
        div {
            class: "chtholly-progress-bar";
            
            div {
                class: "chtholly-progress-fill";
                id: progressFillId;
                style: "width: 0%;";
                
                div {
                    class: "chtholly-progress-segments";
                    
                    div { class: "chtholly-progress-segment"; }
                    div { class: "chtholly-progress-segment"; }
                    div { class: "chtholly-progress-segment"; }
                    div { class: "chtholly-progress-segment"; }
                    div { class: "chtholly-progress-segment"; }
                }
            }
        }
        
        div {
            class: "chtholly-progress-status";
            
            span {
                class: "chtholly-progress-status-icon";
                id: progressStatusIcon;
                text: "⏳";
            }
            
            span {
                id: progressStatusText;
                text: statusText;
            }
        }
    }
}

[Template] @Element ChthollyCircularProgress {
    div {
        class: "chtholly-progress-circle";
        id: circularProgressId;
        
        svg {
            class: "chtholly-progress-circle-svg";
            viewBox: "0 0 120 120";
            
            defs {
                linearGradient {
                    id: "chthollyGradient";
                    x1: "0%";
                    y1: "0%";
                    x2: "100%";
                    y2: "100%";
                    
                    stop {
                        offset: "0%";
                        style: "stop-color:#fd79a8;stop-opacity:1";
                    }
                    stop {
                        offset: "50%";
                        style: "stop-color:#fdcb6e;stop-opacity:1";
                    }
                    stop {
                        offset: "100%";
                        style: "stop-color:#a29bfe;stop-opacity:1";
                    }
                }
            }
            
            circle {
                class: "chtholly-progress-circle-bg";
                cx: "60";
                cy: "60";
                r: "50";
            }
            
            circle {
                class: "chtholly-progress-circle-fill";
                id: circularProgressFill;
                cx: "60";
                cy: "60";
                r: "50";
            }
        }
        
        div {
            class: "chtholly-progress-circle-center";
            
            div {
                class: "chtholly-progress-circle-percentage";
                id: circularProgressPercentage;
                text: "0%";
            }
            
            div {
                class: "chtholly-progress-circle-label";
                text: circularLabel;
            }
        }
    }
}

[Custom] @Element ChthollyProgressSystem {
    button {
        class: "chtholly-progress-controller";
        id: progressControlId;
        onclick: "toggleProgressDemo()";
        title: "珂朵莉进度条演示";
        text: "📊";
    }
    
    div {
        class: "chtholly-progress-demo";
        id: progressDemoId;
        
        div {
            class: "chtholly-progress-demo-title";
            text: "📊 进度条演示";
        }
        
        div {
            class: "chtholly-progress-demo-controls";
            
            button {
                class: "chtholly-progress-demo-btn active";
                onclick: "setProgressDemoType('normal')";
                text: "普通";
            }
            
            button {
                class: "chtholly-progress-demo-btn";
                onclick: "setProgressDemoType('success')";
                text: "成功";
            }
            
            button {
                class: "chtholly-progress-demo-btn";
                onclick: "setProgressDemoType('warning')";
                text: "警告";
            }
            
            button {
                class: "chtholly-progress-demo-btn";
                onclick: "setProgressDemoType('magical')";
                text: "魔法";
            }
        }
        
        // 演示进度条
        ChthollyProgressBar {
            progressContainerId: "demo-progress-1";
            progressPercentageId: "demo-percentage-1";
            progressFillId: "demo-fill-1";
            progressStatusIcon: "demo-status-icon-1";
            progressStatusText: "demo-status-text-1";
            title: "🌸 樱花加载中";
            statusText: "正在准备珂朵莉的魔法...";
            type: "normal";
        }
        
        // 圆形进度条演示
        ChthollyCircularProgress {
            circularProgressId: "demo-circular-1";
            circularProgressFill: "demo-circular-fill-1";
            circularProgressPercentage: "demo-circular-percentage-1";
            circularLabel: "珂朵莉";
        }
    }
}

// 在Custom中任意位置使用[Origin] - 展示语法灵活性
[Origin] @JavaScript ProgressBarScript {
    class ChthollyProgressBar {
        constructor(containerId, options = {}) {
            this.container = document.getElementById(containerId);
            this.fillElement = this.container?.querySelector('.chtholly-progress-fill');
            this.percentageElement = this.container?.querySelector('.chtholly-progress-percentage');
            this.statusIcon = this.container?.querySelector('.chtholly-progress-status-icon');
            this.statusText = this.container?.querySelector('.chtholly-progress-status span:last-child');
            
            this.options = {
                duration: 2000,
                autoStart: false,
                showPercentage: true,
                showStatus: true,
                type: 'normal',
                onComplete: null,
                onProgress: null,
                ...options
            };
            
            this.progress = 0;
            this.isAnimating = false;
            this.animationId = null;
            
            this.init();
        }
        
        init() {
            if (this.container) {
                this.container.classList.add(this.options.type);
                
                if (this.options.autoStart) {
                    this.start();
                }
            }
        }
        
        setProgress(value, animated = true) {
            value = Math.max(0, Math.min(100, value));
            this.progress = value;
            
            if (animated) {
                this.animateToProgress(value);
            } else {
                this.updateUI(value);
            }
        }
        
        animateToProgress(targetProgress) {
            if (this.isAnimating) {
                cancelAnimationFrame(this.animationId);
            }
            
            const startProgress = this.getCurrentProgress();
            const progressDiff = targetProgress - startProgress;
            const startTime = performance.now();
            
            this.isAnimating = true;
            
            const animate = (currentTime) => {
                const elapsed = currentTime - startTime;
                const progress = Math.min(elapsed / this.options.duration, 1);
                
                // 使用缓动函数
                const easeProgress = this.easeOutCubic(progress);
                const currentValue = startProgress + (progressDiff * easeProgress);
                
                this.updateUI(currentValue);
                
                if (this.options.onProgress) {
                    this.options.onProgress(currentValue);
                }
                
                if (progress < 1) {
                    this.animationId = requestAnimationFrame(animate);
                } else {
                    this.isAnimating = false;
                    this.updateStatus(targetProgress);
                    
                    if (this.options.onComplete && targetProgress >= 100) {
                        this.options.onComplete();
                    }
                }
            };
            
            this.animationId = requestAnimationFrame(animate);
        }
        
        updateUI(progress) {
            if (this.fillElement) {
                this.fillElement.style.width = progress + '%';
            }
            
            if (this.percentageElement && this.options.showPercentage) {
                this.percentageElement.textContent = Math.round(progress) + '%';
            }
        }
        
        updateStatus(progress) {
            if (!this.options.showStatus) return;
            
            let icon = '⏳';
            let text = '进行中...';
            
            if (progress >= 100) {
                icon = '✅';
                text = '完成！';
            } else if (progress >= 75) {
                icon = '🔥';
                text = '即将完成...';
            } else if (progress >= 50) {
                icon = '⚡';
                text = '进展顺利...';
            } else if (progress >= 25) {
                icon = '🌸';
                text = '努力加载中...';
            }
            
            if (this.statusIcon) {
                this.statusIcon.textContent = icon;
            }
            
            if (this.statusText) {
                this.statusText.textContent = text;
            }
        }
        
        getCurrentProgress() {
            if (!this.fillElement) return 0;
            return parseFloat(this.fillElement.style.width) || 0;
        }
        
        start(targetProgress = 100) {
            this.setProgress(targetProgress);
        }
        
        reset() {
            this.setProgress(0, false);
            this.updateStatus(0);
        }
        
        setType(type) {
            if (this.container) {
                this.container.className = this.container.className.replace(/\b(normal|success|warning|danger|magical)\b/g, '');
                this.container.classList.add(type);
                this.options.type = type;
            }
        }
        
        easeOutCubic(t) {
            return 1 - Math.pow(1 - t, 3);
        }
    }
    
    class ChthollyCircularProgress {
        constructor(containerId, options = {}) {
            this.container = document.getElementById(containerId);
            this.fillElement = this.container?.querySelector('.chtholly-progress-circle-fill');
            this.percentageElement = this.container?.querySelector('.chtholly-progress-circle-percentage');
            
            this.options = {
                duration: 2000,
                radius: 50,
                ...options
            };
            
            this.circumference = 2 * Math.PI * this.options.radius;
            this.progress = 0;
            
            this.init();
        }
        
        init() {
            if (this.fillElement) {
                this.fillElement.style.strokeDasharray = this.circumference;
                this.fillElement.style.strokeDashoffset = this.circumference;
            }
        }
        
        setProgress(value, animated = true) {
            value = Math.max(0, Math.min(100, value));
            this.progress = value;
            
            const offset = this.circumference - (value / 100) * this.circumference;
            
            if (this.fillElement) {
                if (animated) {
                    this.fillElement.style.transition = `stroke-dashoffset ${this.options.duration}ms ease-out`;
                } else {
                    this.fillElement.style.transition = 'none';
                }
                
                this.fillElement.style.strokeDashoffset = offset;
            }
            
            if (this.percentageElement) {
                this.percentageElement.textContent = Math.round(value) + '%';
            }
        }
        
        reset() {
            this.setProgress(0, false);
        }
    }
    
    // 演示控制器
    class ProgressDemo {
        constructor() {
            this.isVisible = false;
            this.demoType = 'normal';
            this.progressBars = new Map();
            this.circularBars = new Map();
            this.demoInterval = null;
            
            this.init();
        }
        
        init() {
            this.initializeDemoBars();
        }
        
        initializeDemoBars() {
            // 等待DOM加载
            setTimeout(() => {
                const linearDemo = new ChthollyProgressBar('demo-progress-1', {
                    type: this.demoType,
                    duration: 3000,
                    onComplete: () => this.showCompletionEffect()
                });
                
                const circularDemo = new ChthollyCircularProgress('demo-circular-1', {
                    duration: 3000
                });
                
                this.progressBars.set('demo', linearDemo);
                this.circularBars.set('demo', circularDemo);
            }, 100);
        }
        
        toggle() {
            const demo = document.getElementById('progressDemoId');
            const controller = document.getElementById('progressControlId');
            
            if (!demo || !controller) return;
            
            this.isVisible = !this.isVisible;
            
            if (this.isVisible) {
                demo.classList.add('show');
                controller.classList.add('active');
                this.startDemo();
            } else {
                demo.classList.remove('show');
                controller.classList.remove('active');
                this.stopDemo();
            }
        }
        
        setType(type) {
            this.demoType = type;
            
            // 更新按钮状态
            document.querySelectorAll('.chtholly-progress-demo-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            
            event.target.classList.add('active');
            
            // 更新进度条类型
            const linearBar = this.progressBars.get('demo');
            if (linearBar) {
                linearBar.setType(type);
            }
            
            this.restartDemo();
        }
        
        startDemo() {
            this.demoInterval = setInterval(() => {
                const randomProgress = Math.floor(Math.random() * 100) + 1;
                
                const linearBar = this.progressBars.get('demo');
                const circularBar = this.circularBars.get('demo');
                
                if (linearBar) {
                    linearBar.setProgress(randomProgress);
                }
                
                if (circularBar) {
                    circularBar.setProgress(randomProgress);
                }
            }, 4000);
            
            // 立即开始一次演示
            setTimeout(() => {
                const linearBar = this.progressBars.get('demo');
                const circularBar = this.circularBars.get('demo');
                
                if (linearBar) linearBar.start(100);
                if (circularBar) circularBar.setProgress(100);
            }, 500);
        }
        
        stopDemo() {
            if (this.demoInterval) {
                clearInterval(this.demoInterval);
                this.demoInterval = null;
            }
            
            this.progressBars.forEach(bar => bar.reset());
            this.circularBars.forEach(bar => bar.reset());
        }
        
        restartDemo() {
            this.stopDemo();
            if (this.isVisible) {
                this.startDemo();
            }
        }
        
        showCompletionEffect() {
            this.showProgressToast('珂朵莉的进度条演示完成！✨', 'success');
        }
        
        showProgressToast(message, type = 'info') {
            const colors = {
                success: 'linear-gradient(45deg, #00b894, #55a3ff)',
                info: 'linear-gradient(45deg, #a29bfe, #fd79a8)',
                warning: 'linear-gradient(45deg, #fdcb6e, #e17055)'
            };
            
            const toast = document.createElement('div');
            toast.style.cssText = `
                position: fixed;
                top: 20px;
                left: 50%;
                transform: translateX(-50%);
                background: ${colors[type] || colors.info};
                color: white;
                padding: 12px 20px;
                border-radius: 20px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.2);
                z-index: 10002;
                font-family: ${getComputedStyle(document.documentElement).getPropertyValue('--chtholly-font-family')};
                font-weight: 600;
                animation: progressToastIn 0.3s ease-out;
                text-align: center;
            `;
            toast.textContent = message;
            
            document.body.appendChild(toast);
            
            setTimeout(() => {
                toast.style.animation = 'progressToastOut 0.3s ease-in';
                setTimeout(() => toast.remove(), 300);
            }, 2000);
        }
    }
    
    // 全局实例
    let progressDemo = null;
    
    // 全局函数
    function toggleProgressDemo() {
        if (progressDemo) {
            progressDemo.toggle();
        }
    }
    
    function setProgressDemoType(type) {
        if (progressDemo) {
            progressDemo.setType(type);
        }
    }
    
    // 导出类供其他模块使用
    window.ChthollyProgressBar = ChthollyProgressBar;
    window.ChthollyCircularProgress = ChthollyCircularProgress;
    
    function initializeProgressSystem() {
        // 等待DOM加载完成
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializeProgressSystem);
            return;
        }
        
        progressDemo = new ProgressDemo();
    }
    
    // 页面加载时初始化
    initializeProgressSystem();
}

// Toast动画样式 - 在文件末尾使用[Origin]
[Origin] @Style ProgressToastAnimations {
    @keyframes progressToastIn {
        from {
            transform: translateX(-50%) translateY(-20px) scale(0.8);
            opacity: 0;
        }
        to {
            transform: translateX(-50%) translateY(0) scale(1);
            opacity: 1;
        }
    }
    
    @keyframes progressToastOut {
        from {
            transform: translateX(-50%) translateY(0) scale(1);
            opacity: 1;
        }
        to {
            transform: translateX(-50%) translateY(-20px) scale(0.8);
            opacity: 0;
        }
    }
}