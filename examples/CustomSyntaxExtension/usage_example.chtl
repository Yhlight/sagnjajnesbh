// ========================================
// 🚀 CJMOD语法扩展使用示例
// 展示如何用C++编写的扩展语法在CHTL JS中使用
// ========================================

html {
    head {
        title { text { 🚀 CJMOD语法扩展演示 } }
        
        style {
            body {
                margin: 0;
                padding: 20px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                font-family: 'Arial', sans-serif;
                min-height: 100vh;
            }
            
            .demo-container {
                max-width: 800px;
                margin: 0 auto;
                background: white;
                border-radius: 20px;
                padding: 30px;
                box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            }
            
            .demo-section {
                margin-bottom: 30px;
                padding: 20px;
                border: 2px solid #e0e0e0;
                border-radius: 10px;
            }
            
            .demo-btn {
                padding: 12px 24px;
                margin: 5px;
                background: linear-gradient(45deg, #667eea, #764ba2);
                color: white;
                border: none;
                border-radius: 8px;
                cursor: pointer;
                font-weight: bold;
                transition: all 0.3s ease;
            }
            
            .demo-btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            }
            
            .demo-input {
                padding: 10px;
                border: 2px solid #ddd;
                border-radius: 5px;
                margin: 5px;
                width: 200px;
            }
            
            .demo-output {
                background: #f5f5f5;
                padding: 15px;
                border-radius: 5px;
                margin-top: 10px;
                font-family: monospace;
                border-left: 4px solid #667eea;
            }
        }
    }
    
    body {
        div {
            class: demo-container;
            
            h1 { 
                text { 🚀 CJMOD语法扩展演示 }
                style { text-align: center; color: #667eea; margin-bottom: 30px; }
            }
            
            p { 
                text { 以下演示了用C++编写的CJMOD语法扩展，这些语法会被编译成标准JavaScript代码 }
                style { text-align: center; color: #666; margin-bottom: 40px; }
            }
            
            // 1. 动画扩展演示
            div {
                class: demo-section;
                
                h3 { text { 🎨 动画扩展 - animate语法增强 } }
                
                div {
                    id: animate-box;
                    text { 我是动画盒子 }
                    style {
                        width: 100px;
                        height: 100px;
                        background: #ff6b6b;
                        color: white;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        border-radius: 10px;
                        margin: 10px 0;
                    }
                }
                
                button { id: bounce-btn; class: demo-btn; text { 弹跳动画 } }
                button { id: shake-btn; class: demo-btn; text { 震动动画 } }
                button { id: pulse-btn; class: demo-btn; text { 脉冲动画 } }
                
                div { id: animate-output; class: demo-output; }
            }
            
            // 2. 存储扩展演示
            div {
                class: demo-section;
                
                h3 { text { 💾 存储扩展 - storage语法增强 } }
                
                input { id: storage-key; class: demo-input; placeholder: 存储键名; }
                input { id: storage-value; class: demo-input; placeholder: 存储值; }
                
                button { id: save-btn; class: demo-btn; text { 保存数据 } }
                button { id: load-btn; class: demo-btn; text { 读取数据 } }
                button { id: clear-storage-btn; class: demo-btn; text { 清空存储 } }
                
                div { id: storage-output; class: demo-output; }
            }
            
            // 3. 网络请求扩展演示
            div {
                class: demo-section;
                
                h3 { text { 🌐 网络扩展 - http语法增强 } }
                
                input { id: api-url; class: demo-input; placeholder: API地址; value: https://api.github.com/users/octocat; }
                
                button { id: get-btn; class: demo-btn; text { GET请求 } }
                button { id: post-btn; class: demo-btn; text { POST请求 } }
                
                div { id: http-output; class: demo-output; }
            }
            
            // 4. 定时器扩展演示
            div {
                class: demo-section;
                
                h3 { text { ⏰ 定时器扩展 - timer语法增强 } }
                
                button { id: timer-after-btn; class: demo-btn; text { 3秒后执行 } }
                button { id: timer-every-btn; class: demo-btn; text { 每秒执行 } }
                button { id: stop-timer-btn; class: demo-btn; text { 停止定时器 } }
                
                div { id: timer-output; class: demo-output; }
            }
            
            // 5. 验证器扩展演示
            div {
                class: demo-section;
                
                h3 { text { ✅ 验证扩展 - validator语法增强 } }
                
                input { id: email-input; class: demo-input; placeholder: 输入邮箱地址; }
                input { id: phone-input; class: demo-input; placeholder: 输入手机号码; }
                
                button { id: validate-email-btn; class: demo-btn; text { 验证邮箱 } }
                button { id: validate-phone-btn; class: demo-btn; text { 验证手机 } }
                
                div { id: validator-output; class: demo-output; }
            }
            
            // 6. 数学计算扩展演示
            div {
                class: demo-section;
                
                h3 { text { 🧮 数学扩展 - math语法增强 } }
                
                input { id: math-expression; class: demo-input; placeholder: 数学表达式; value: 2 + 3 * 4 - 1; }
                
                button { id: calculate-btn; class: demo-btn; text { 计算表达式 } }
                button { id: random-btn; class: demo-btn; text { 随机数1-100 } }
                
                div { id: math-output; class: demo-output; }
            }
            
            script {
                // ========================================
                // 🚀 使用CJMOD扩展的CHTL JS语法！
                // 这些语法都是用C++编写的，会编译成JavaScript
                // ========================================
                
                let timerController = null;
                
                // 🎨 动画扩展使用
                {{#bounce-btn}}->listen({
                    click: function() {
                        // 🚀 使用C++编写的animate扩展语法！
                        animate({
                            target: {{#animate-box}},
                            effect: 'bounce',
                            duration: 800
                        });
                        
                        {{#animate-output}}->textContent = '✅ 弹跳动画已触发';
                    }
                });
                
                {{#shake-btn}}->listen({
                    click: function() {
                        // 🚀 震动效果
                        animate({
                            target: {{#animate-box}},
                            effect: 'shake',
                            duration: 600
                        });
                        
                        {{#animate-output}}->textContent = '✅ 震动动画已触发';
                    }
                });
                
                {{#pulse-btn}}->listen({
                    click: function() {
                        // 🚀 脉冲效果
                        animate({
                            target: {{#animate-box}},
                            effect: 'pulse',
                            duration: 1000
                        });
                        
                        {{#animate-output}}->textContent = '✅ 脉冲动画已触发';
                    }
                });
                
                // 💾 存储扩展使用
                {{#save-btn}}->listen({
                    click: function() {
                        const key = {{#storage-key}}->value;
                        const value = {{#storage-value}}->value;
                        
                        if (key && value) {
                            // 🚀 使用C++编写的storage扩展语法！
                            const success = storage.set(key, value);
                            {{#storage-output}}->textContent = success ? 
                                '✅ 数据保存成功' : '❌ 保存失败';
                        }
                    }
                });
                
                {{#load-btn}}->listen({
                    click: function() {
                        const key = {{#storage-key}}->value;
                        
                        if (key) {
                            // 🚀 使用C++编写的storage扩展语法！
                            const value = storage.get(key, '未找到数据');
                            {{#storage-output}}->textContent = `📁 读取结果: ${value}`;
                        }
                    }
                });
                
                // 🌐 网络请求扩展使用
                {{#get-btn}}->listen({
                    click: async function() {
                        const url = {{#api-url}}->value;
                        
                        {{#http-output}}->textContent = '🌐 正在请求...';
                        
                        // 🚀 使用C++编写的http扩展语法！
                        const result = await http.get(url);
                        
                        {{#http-output}}->textContent = `✅ 请求完成: ${JSON.stringify(result, null, 2)}`;
                    }
                });
                
                {{#post-btn}}->listen({
                    click: async function() {
                        const url = {{#api-url}}->value;
                        const postData = { message: 'Hello from CJMOD!', timestamp: Date.now() };
                        
                        {{#http-output}}->textContent = '🌐 正在发送POST...';
                        
                        // 🚀 使用C++编写的http扩展语法！
                        const result = await http.post(url, postData);
                        
                        {{#http-output}}->textContent = `✅ POST完成: ${JSON.stringify(result, null, 2)}`;
                    }
                });
                
                // ⏰ 定时器扩展使用
                {{#timer-after-btn}}->listen({
                    click: function() {
                        {{#timer-output}}->textContent = '⏰ 3秒后将执行...';
                        
                        // 🚀 使用C++编写的timer扩展语法！
                        timer.after(3000, function() {
                            {{#timer-output}}->textContent = '✅ 定时任务执行完成！';
                            
                            // 显示通知
                            notification.show('定时器', '3秒定时任务完成！', 'success');
                        });
                    }
                });
                
                {{#timer-every-btn}}->listen({
                    click: function() {
                        if (timerController) {
                            timerController.stop();
                        }
                        
                        {{#timer-output}}->textContent = '🔄 每秒定时器启动...';
                        
                        // 🚀 使用C++编写的timer扩展语法！
                        timerController = timer.every(1000, function(count) {
                            {{#timer-output}}->textContent = `🔄 定时器执行第 ${count} 次`;
                            
                            if (count >= 5) {
                                timerController.stop();
                                {{#timer-output}}->textContent = '✅ 定时器自动停止（执行5次）';
                            }
                        });
                    }
                });
                
                {{#stop-timer-btn}}->listen({
                    click: function() {
                        if (timerController) {
                            timerController.stop();
                            timerController = null;
                            {{#timer-output}}->textContent = '⏹️ 定时器已手动停止';
                        }
                    }
                });
                
                // ✅ 验证器扩展使用
                {{#validate-email-btn}}->listen({
                    click: function() {
                        // 🚀 使用C++编写的validator扩展语法！
                        const isValid = validator.email({{#email-input}});
                        
                        {{#validator-output}}->textContent = isValid ? 
                            '✅ 邮箱格式正确' : '❌ 邮箱格式错误';
                    }
                });
                
                {{#validate-phone-btn}}->listen({
                    click: function() {
                        // 🚀 手机号验证（类似实现）
                        const phone = {{#phone-input}}->value;
                        const phoneRegex = /^1[3-9]\d{9}$/;
                        const isValid = phoneRegex.test(phone);
                        
                        {{#validator-output}}->textContent = isValid ? 
                            '✅ 手机号格式正确' : '❌ 手机号格式错误';
                    }
                });
                
                // 🧮 数学扩展使用
                {{#calculate-btn}}->listen({
                    click: function() {
                        const expression = {{#math-expression}}->value;
                        
                        // 🚀 使用C++编写的math扩展语法！
                        const result = math.calculate(expression, 4);
                        
                        {{#math-output}}->textContent = `🧮 计算结果: ${expression} = ${result}`;
                        
                        // 显示通知
                        notification.show('计算完成', `${expression} = ${result}`, 'info');
                    }
                });
                
                {{#random-btn}}->listen({
                    click: function() {
                        // 🚀 使用C++编写的math扩展语法！
                        const randomNum = math.random(1, 100);
                        
                        {{#math-output}}->textContent = `🎲 随机数: ${randomNum}`;
                        
                        // 如果是幸运数字，特殊动画
                        if (randomNum === 88) {
                            animate({
                                target: {{#math-output}},
                                effect: 'bounce',
                                duration: 1000
                            });
                            
                            notification.show('幸运数字！', '你获得了幸运数字88！', 'success');
                        }
                    }
                });
                
                // 🎯 综合演示按钮
                button {
                    id: demo-all-btn;
                    class: demo-btn;
                    text { 🎉 综合演示所有扩展 }
                    style { 
                        display: block; 
                        margin: 30px auto; 
                        font-size: 18px; 
                        padding: 15px 30px;
                    }
                }
                
                {{#demo-all-btn}}->listen({
                    click: async function() {
                        // 🚀 连续使用多个CJMOD扩展语法！
                        
                        // 1. 显示开始通知
                        notification.show('演示开始', '开始综合演示所有CJMOD扩展功能', 'info');
                        
                        // 2. 保存演示数据
                        storage.set('demo_start_time', new Date().toISOString());
                        storage.set('demo_count', (storage.get('demo_count', 0) + 1));
                        
                        // 3. 动画效果
                        animate({
                            target: {{.demo-container}},
                            effect: 'pulse',
                            duration: 2000
                        });
                        
                        // 4. 定时执行系列任务
                        timer.after(1000, function() {
                            notification.show('步骤1', '数据已保存到本地存储', 'success');
                        });
                        
                        timer.after(2000, function() {
                            const calculation = math.calculate('10 * 5 + 3');
                            notification.show('步骤2', `数学计算完成: ${calculation}`, 'info');
                        });
                        
                        timer.after(3000, async function() {
                            // 发送网络请求
                            const apiResult = await http.get('https://api.github.com/users/octocat');
                            notification.show('步骤3', '网络请求完成', 'success');
                        });
                        
                        timer.after(4000, function() {
                            const demoCount = storage.get('demo_count');
                            notification.show('演示完成', `这是第${demoCount}次演示！`, 'success');
                            
                            // 最终动画
                            animate({
                                target: {{#demo-all-btn}},
                                effect: 'bounce',
                                duration: 800
                            });
                        });
                    }
                });
                
                // 🎯 初始化演示
                function initDemo() {
                    console.log('🚀 CJMOD语法扩展演示初始化...');
                    
                    // 显示欢迎通知
                    notification.show('欢迎', '欢迎体验CJMOD语法扩展！', 'info');
                    
                    // 读取演示次数
                    const demoCount = storage.get('demo_count', 0);
                    if (demoCount > 0) {
                        notification.show('欢迎回来', `这是您第${demoCount + 1}次访问`, 'success');
                    }
                    
                    // 设置示例值
                    {{#storage-key}}->value = 'test_key';
                    {{#storage-value}}->value = 'Hello CJMOD!';
                    {{#email-input}}->value = 'test@example.com';
                    {{#phone-input}}->value = '13812345678';
                    
                    console.log('✅ 演示初始化完成！');
                    console.log('💡 所有按钮都使用了C++编写的CJMOD语法扩展');
                }
                
                // 启动演示
                initDemo();
            }
        }
    }
}