// ========================================
// 🎮 游戏引擎示例 - CJMOD驱动的游戏开发
// ========================================

html {
    head {
        title { text { 🎮 CJMOD游戏引擎演示 } }
        
        style {
            body {
                margin: 0;
                padding: 0;
                background: linear-gradient(45deg, #1e3c72, #2a5298);
                font-family: 'Arial', sans-serif;
                color: white;
            }
            
            .game-container {
                width: 100vw;
                height: 100vh;
                position: relative;
                overflow: hidden;
            }
            
            .game-canvas {
                width: 100%;
                height: 80%;
                background: radial-gradient(circle, #000428, #004e92);
                position: relative;
                border: 2px solid #00ff88;
            }
            
            .game-object {
                position: absolute;
                width: 20px;
                height: 20px;
                background: #ff6b6b;
                border-radius: 50%;
                box-shadow: 0 0 10px #ff6b6b;
                transition: all 0.1s ease;
            }
            
            .game-object.enemy {
                background: #ff4757;
                box-shadow: 0 0 15px #ff4757;
            }
            
            .game-object.player {
                background: #00ff88;
                box-shadow: 0 0 20px #00ff88;
                width: 25px;
                height: 25px;
            }
            
            .game-ui {
                position: absolute;
                top: 10px;
                left: 10px;
                background: rgba(0,0,0,0.8);
                padding: 15px;
                border-radius: 10px;
                border: 1px solid #00ff88;
            }
            
            .game-controls {
                position: absolute;
                bottom: 10px;
                left: 50%;
                transform: translateX(-50%);
                display: flex;
                gap: 10px;
            }
            
            .control-btn {
                padding: 15px 25px;
                background: linear-gradient(45deg, #667eea, #764ba2);
                border: none;
                border-radius: 8px;
                color: white;
                cursor: pointer;
                font-weight: bold;
                transition: all 0.3s ease;
            }
            
            .control-btn:hover {
                transform: scale(1.05);
                box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            }
            
            .control-btn:active {
                transform: scale(0.95);
            }
        }
    }
    
    body {
        div {
            class: game-container;
            
            // 游戏画布
            div {
                id: game-canvas;
                class: game-canvas;
            }
            
            // 游戏UI
            div {
                id: game-ui;
                class: game-ui;
                
                h3 { text { 🎮 CJMOD游戏引擎 } }
                div { id: score; text { 分数: 0 } }
                div { id: level; text { 等级: 1 } }
                div { id: fps; text { FPS: 60 } }
                div { id: objects; text { 对象: 0 } }
            }
            
            // 游戏控制
            div {
                class: game-controls;
                
                button {
                    id: start-btn;
                    class: control-btn;
                    text { 🚀 启动游戏 }
                }
                
                button {
                    id: spawn-btn;
                    class: control-btn;
                    text { 👹 生成敌人 }
                }
                
                button {
                    id: physics-btn;
                    class: control-btn;
                    text { ⚡ 物理引擎 }
                }
                
                button {
                    id: sound-btn;
                    class: control-btn;
                    text { 🔊 音效 }
                }
                
                button {
                    id: save-btn;
                    class: control-btn;
                    text { 💾 保存游戏 }
                }
            }
            
            script {
                // ========================================
                // 🚀 使用CJMOD创造的游戏引擎语法！
                // ========================================
                
                let gameState = {
                    running: false,
                    score: 0,
                    level: 1,
                    playerPosition: {x: 400, y: 300},
                    enemies: [],
                    gameObjects: []
                };
                
                let gameLoop = null;
                
                // 🎮 初始化游戏引擎
                async function initGameEngine() {
                    try {
                        console.log('🚀 初始化CJMOD游戏引擎...');
                        
                        // 🔧 初始化物理引擎（使用CJMOD的C++物理系统）
                        const physicsResult = await {{initGamePhysics}}();
                        console.log('⚡ 物理引擎:', physicsResult);
                        
                        // 🎨 初始化渲染系统
                        const renderResult = await {{initGameRender}}();
                        console.log('🎨 渲染系统:', renderResult);
                        
                        console.log('✅ 游戏引擎初始化完成！');
                        
                    } catch (error) {
                        console.error('❌ 初始化失败:', error);
                    }
                }
                
                // 🚀 启动游戏
                async function startGame() {
                    if (gameState.running) return;
                    
                    gameState.running = true;
                    {{#start-btn}}->textContent = '⏸️ 暂停游戏';
                    
                    console.log('🎮 游戏启动！');
                    
                    // 创建玩家
                    await {{spawnPlayer}}({
                        type: 'player',
                        position: gameState.playerPosition,
                        health: 100
                    });
                    
                    // 启动游戏循环
                    gameLoop = setInterval(async () => {
                        await updateGameFrame();
                    }, 16); // 60 FPS
                    
                    // 播放背景音乐
                    await {{playSound}}({
                        file: 'background.mp3',
                        volume: 0.5,
                        loop: true
                    });
                }
                
                // 🔄 游戏帧更新
                async function updateGameFrame() {
                    try {
                        // ⚡ 更新物理系统（使用CJMOD的高性能C++物理引擎）
                        const physicsUpdate = await {{updatePhysics}}();
                        
                        // 💥 碰撞检测
                        const collisions = await {{checkCollisions}}();
                        
                        // 🎨 渲染帧
                        const renderData = await {{getRenderData}}();
                        
                        // 更新UI显示
                        updateGameUI(renderData);
                        
                        // 检查游戏状态
                        if (gameState.score > 1000) {
                            levelUp();
                        }
                        
                    } catch (error) {
                        console.error('❌ 游戏更新失败:', error);
                    }
                }
                
                // 👹 生成敌人
                async function spawnEnemy() {
                    try {
                        // 🚀 使用CJMOD创造的spawnEnemy语法！
                        const enemy = await {{spawnEnemy}}({
                            type: 'basic_enemy',
                            position: {
                                x: Math.random() * 800,
                                y: Math.random() * 600
                            },
                            health: 50,
                            speed: 2.0,
                            ai: 'aggressive'
                        });
                        
                        console.log('👹 敌人已生成:', enemy);
                        
                        // 创建视觉表示
                        createEnemyVisual(enemy);
                        
                        // 播放生成音效
                        await {{playSound}}({
                            file: 'enemy_spawn.wav',
                            volume: 0.7,
                            loop: false
                        });
                        
                        gameState.enemies.push(enemy);
                        
                    } catch (error) {
                        console.error('❌ 生成敌人失败:', error);
                    }
                }
                
                // 🎨 创建敌人视觉效果
                function createEnemyVisual(enemy) {
                    const canvas = {{#game-canvas}};
                    const enemyDiv = document.createElement('div');
                    enemyDiv->className = 'game-object enemy';
                    enemyDiv->id = 'enemy_' + enemy.id;
                    enemyDiv->style.left = enemy.position.x + 'px';
                    enemyDiv->style.top = enemy.position.y + 'px';
                    
                    canvas->appendChild(enemyDiv);
                    
                    // 添加动画效果
                    enemyDiv->animate([
                        { transform: 'scale(0)', opacity: 0 },
                        { transform: 'scale(1.2)', opacity: 1 },
                        { transform: 'scale(1)', opacity: 1 }
                    ], {
                        duration: 500,
                        easing: 'ease-out'
                    });
                }
                
                // 📊 更新游戏UI
                function updateGameUI(renderData) {
                    {{#score}}->textContent = '分数: ' + gameState.score;
                    {{#level}}->textContent = '等级: ' + gameState.level;
                    {{#objects}}->textContent = '对象: ' + renderData.objects.length;
                    
                    // 更新FPS显示
                    const fps = Math.round(1000 / 16); // 简化计算
                    {{#fps}}->textContent = 'FPS: ' + fps;
                }
                
                // 🆙 升级
                async function levelUp() {
                    gameState.level++;
                    gameState.score += 500;
                    
                    console.log('🆙 升级到等级', gameState.level);
                    
                    // 播放升级音效
                    await {{playSound}}({
                        file: 'levelup.wav',
                        volume: 0.8,
                        loop: false
                    });
                    
                    // 生成更多敌人
                    for (let i = 0; i < gameState.level; i++) {
                        setTimeout(() => spawnEnemy(), i * 1000);
                    }
                }
                
                // 💾 保存游戏
                async function saveGameState() {
                    try {
                        const saveData = {
                            score: gameState.score,
                            level: gameState.level,
                            playerPosition: gameState.playerPosition,
                            enemies: gameState.enemies.length,
                            timestamp: Date.now()
                        };
                        
                        // 🚀 使用CJMOD创造的saveGame语法！
                        await {{saveGame}}({
                            slot: 1,
                            data: saveData
                        });
                        
                        console.log('💾 游戏已保存!', saveData);
                        alert('游戏保存成功！');
                        
                    } catch (error) {
                        console.error('❌ 保存失败:', error);
                        alert('保存失败: ' + error.message);
                    }
                }
                
                // 🎵 音效管理
                async function playGameSound(soundType) {
                    const sounds = {
                        shoot: { file: 'shoot.wav', volume: 0.6 },
                        explosion: { file: 'explosion.wav', volume: 0.8 },
                        powerup: { file: 'powerup.wav', volume: 0.7 },
                        background: { file: 'bg_music.mp3', volume: 0.3, loop: true }
                    };
                    
                    if (sounds[soundType]) {
                        await {{playSound}}(sounds[soundType]);
                    }
                }
                
                // 🎯 事件监听
                {{#start-btn}}->addEventListener('click', async function() {
                    if (!gameState.running) {
                        await startGame();
                    } else {
                        // 暂停游戏
                        gameState.running = false;
                        clearInterval(gameLoop);
                        this.textContent = '🚀 启动游戏';
                    }
                });
                
                {{#spawn-btn}}->addEventListener('click', spawnEnemy);
                
                {{#physics-btn}}->addEventListener('click', async function() {
                    const result = await {{updatePhysics}}();
                    console.log('⚡ 物理更新:', result);
                });
                
                {{#sound-btn}}->addEventListener('click', async function() {
                    await playGameSound('powerup');
                });
                
                {{#save-btn}}->addEventListener('click', saveGameState);
                
                // 🎮 键盘控制
                document->addEventListener('keydown', async function(e) {
                    if (!gameState.running) return;
                    
                    switch(e.key) {
                        case 'ArrowUp':
                        case 'w':
                        case 'W':
                            gameState.playerPosition.y -= 10;
                            await playGameSound('shoot');
                            break;
                        case 'ArrowDown':
                        case 's':
                        case 'S':
                            gameState.playerPosition.y += 10;
                            break;
                        case 'ArrowLeft':
                        case 'a':
                        case 'A':
                            gameState.playerPosition.x -= 10;
                            break;
                        case 'ArrowRight':
                        case 'd':
                        case 'D':
                            gameState.playerPosition.x += 10;
                            break;
                        case ' ':
                            // 空格键射击
                            await spawnProjectile();
                            await playGameSound('shoot');
                            break;
                    }
                });
                
                // 🚀 发射子弹
                async function spawnProjectile() {
                    const projectile = await {{spawnProjectile}}({
                        type: 'player_bullet',
                        position: gameState.playerPosition,
                        velocity: {x: 0, y: -10},
                        damage: 25
                    });
                    
                    gameState.score += 10;
                }
                
                // 🎯 初始化游戏
                async function initGame() {
                    console.log('🎮 初始化CJMOD游戏引擎...');
                    
                    await initGameEngine();
                    
                    // 显示欢迎信息
                    console.log('🎉 游戏引擎初始化完成！');
                    console.log('🎮 控制说明:');
                    console.log('   WASD/方向键 - 移动');
                    console.log('   空格键 - 射击');
                    console.log('   点击按钮 - 各种功能');
                    
                    // 预加载音效
                    await playGameSound('background');
                }
                
                // 启动游戏
                initGame();
            }
        }
    }
}