
// Generated from grammars/CSS3Lexer.g4 by ANTLR 4.13.2


#include "CSS3Lexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct CSS3LexerStaticData final {
  CSS3LexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  CSS3LexerStaticData(const CSS3LexerStaticData&) = delete;
  CSS3LexerStaticData(CSS3LexerStaticData&&) = delete;
  CSS3LexerStaticData& operator=(const CSS3LexerStaticData&) = delete;
  CSS3LexerStaticData& operator=(CSS3LexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag css3lexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<CSS3LexerStaticData> css3lexerLexerStaticData = nullptr;

void css3lexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (css3lexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(css3lexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<CSS3LexerStaticData>(
    std::vector<std::string>{
      "OpenBracket", "CloseBracket", "OpenParen", "CloseParen", "OpenBrace", 
      "CloseBrace", "SemiColon", "Equal", "Colon", "Dot", "Multiply", "Divide", 
      "Pipe", "Underscore", "Plus", "Greater", "Tilde", "Comma", "Minus", 
      "Only", "Not", "And", "Important", "From", "To", "At", "Hex", "NewlineOrSpace", 
      "Unicode", "Escape", "Nmstart", "Nmchar", "Name", "Nonascii", "Comment", 
      "Whitespace", "Hash", "AtKeyword", "Ident", "String_", "Number", "Percentage", 
      "Dimension", "Uri", "U", "R", "L", "UnicodeRange", "Any"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'['", "']'", "'('", "')'", "'{'", "'}'", "';'", "'='", "':'", 
      "'.'", "'*'", "'/'", "'|'", "'_'", "'+'", "'>'", "'~'", "','", "'-'", 
      "'only'", "'not'", "'and'", "'important'", "'from'", "'to'"
    },
    std::vector<std::string>{
      "", "OpenBracket", "CloseBracket", "OpenParen", "CloseParen", "OpenBrace", 
      "CloseBrace", "SemiColon", "Equal", "Colon", "Dot", "Multiply", "Divide", 
      "Pipe", "Underscore", "Plus", "Greater", "Tilde", "Comma", "Minus", 
      "Only", "Not", "And", "Important", "From", "To", "Comment", "Whitespace", 
      "Hash", "AtKeyword", "Ident", "String_", "Number", "Percentage", "Dimension", 
      "Uri", "UnicodeRange", "Any"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,37,428,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,1,0,
  	1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,
  	9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,
  	1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,
  	1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
  	1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,
  	1,27,1,27,3,27,177,8,27,1,28,1,28,1,28,3,28,182,8,28,1,28,3,28,185,8,
  	28,1,28,3,28,188,8,28,1,28,3,28,191,8,28,1,28,3,28,194,8,28,1,28,1,28,
  	1,29,1,29,1,29,3,29,201,8,29,1,30,1,30,1,30,3,30,206,8,30,1,31,1,31,1,
  	31,3,31,211,8,31,1,32,4,32,214,8,32,11,32,12,32,215,1,33,1,33,1,34,1,
  	34,1,34,1,34,5,34,224,8,34,10,34,12,34,227,9,34,1,34,1,34,1,34,1,34,1,
  	34,1,35,4,35,235,8,35,11,35,12,35,236,1,35,1,35,1,36,1,36,1,36,1,37,1,
  	37,1,37,5,37,247,8,37,10,37,12,37,250,9,37,1,38,1,38,5,38,254,8,38,10,
  	38,12,38,257,9,38,1,39,1,39,1,39,1,39,1,39,5,39,264,8,39,10,39,12,39,
  	267,9,39,1,39,1,39,1,39,1,39,1,39,1,39,5,39,275,8,39,10,39,12,39,278,
  	9,39,1,39,3,39,281,8,39,1,40,3,40,284,8,40,1,40,5,40,287,8,40,10,40,12,
  	40,290,9,40,1,40,1,40,4,40,294,8,40,11,40,12,40,295,1,40,4,40,299,8,40,
  	11,40,12,40,300,3,40,303,8,40,1,40,1,40,3,40,307,8,40,1,40,4,40,310,8,
  	40,11,40,12,40,311,3,40,314,8,40,1,41,1,41,1,41,1,42,1,42,1,42,1,43,1,
  	43,1,43,1,43,1,43,1,43,1,43,1,43,5,43,330,8,43,10,43,12,43,333,9,43,3,
  	43,335,8,43,1,43,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,
  	47,1,47,3,47,350,8,47,1,47,3,47,353,8,47,1,47,3,47,356,8,47,1,47,3,47,
  	359,8,47,1,47,3,47,362,8,47,1,47,1,47,3,47,366,8,47,1,47,3,47,369,8,47,
  	1,47,3,47,372,8,47,1,47,3,47,375,8,47,1,47,1,47,1,47,1,47,3,47,381,8,
  	47,1,47,3,47,384,8,47,1,47,3,47,387,8,47,1,47,1,47,1,47,1,47,1,47,3,47,
  	394,8,47,1,47,3,47,397,8,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,405,8,
  	47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,
  	47,1,47,1,47,1,47,1,47,3,47,425,8,47,1,48,1,48,1,225,0,49,1,1,3,2,5,3,
  	7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
  	33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,0,53,0,55,0,
  	57,0,59,0,61,0,63,0,65,0,67,0,69,26,71,27,73,28,75,29,77,30,79,31,81,
  	32,83,33,85,34,87,35,89,0,91,0,93,0,95,36,97,37,1,0,15,3,0,48,57,65,70,
  	97,102,3,0,9,10,12,13,32,32,5,0,10,10,12,13,48,57,65,70,97,102,3,0,65,
  	90,95,95,97,122,5,0,45,45,48,57,65,90,95,95,97,122,1,0,0,127,4,0,10,10,
  	12,13,34,34,92,92,4,0,10,10,12,13,39,39,92,92,2,0,43,43,45,45,1,0,48,
  	57,2,0,69,69,101,101,5,0,9,10,12,13,32,32,39,39,41,41,2,0,85,85,117,117,
  	2,0,82,82,114,114,2,0,76,76,108,108,471,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
  	0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
  	0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
  	1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,
  	0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,
  	0,49,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
  	1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,
  	0,0,0,95,1,0,0,0,0,97,1,0,0,0,1,99,1,0,0,0,3,101,1,0,0,0,5,103,1,0,0,
  	0,7,105,1,0,0,0,9,107,1,0,0,0,11,109,1,0,0,0,13,111,1,0,0,0,15,113,1,
  	0,0,0,17,115,1,0,0,0,19,117,1,0,0,0,21,119,1,0,0,0,23,121,1,0,0,0,25,
  	123,1,0,0,0,27,125,1,0,0,0,29,127,1,0,0,0,31,129,1,0,0,0,33,131,1,0,0,
  	0,35,133,1,0,0,0,37,135,1,0,0,0,39,137,1,0,0,0,41,142,1,0,0,0,43,146,
  	1,0,0,0,45,150,1,0,0,0,47,160,1,0,0,0,49,165,1,0,0,0,51,168,1,0,0,0,53,
  	170,1,0,0,0,55,176,1,0,0,0,57,178,1,0,0,0,59,200,1,0,0,0,61,205,1,0,0,
  	0,63,210,1,0,0,0,65,213,1,0,0,0,67,217,1,0,0,0,69,219,1,0,0,0,71,234,
  	1,0,0,0,73,240,1,0,0,0,75,243,1,0,0,0,77,251,1,0,0,0,79,280,1,0,0,0,81,
  	283,1,0,0,0,83,315,1,0,0,0,85,318,1,0,0,0,87,321,1,0,0,0,89,339,1,0,0,
  	0,91,341,1,0,0,0,93,343,1,0,0,0,95,345,1,0,0,0,97,426,1,0,0,0,99,100,
  	5,91,0,0,100,2,1,0,0,0,101,102,5,93,0,0,102,4,1,0,0,0,103,104,5,40,0,
  	0,104,6,1,0,0,0,105,106,5,41,0,0,106,8,1,0,0,0,107,108,5,123,0,0,108,
  	10,1,0,0,0,109,110,5,125,0,0,110,12,1,0,0,0,111,112,5,59,0,0,112,14,1,
  	0,0,0,113,114,5,61,0,0,114,16,1,0,0,0,115,116,5,58,0,0,116,18,1,0,0,0,
  	117,118,5,46,0,0,118,20,1,0,0,0,119,120,5,42,0,0,120,22,1,0,0,0,121,122,
  	5,47,0,0,122,24,1,0,0,0,123,124,5,124,0,0,124,26,1,0,0,0,125,126,5,95,
  	0,0,126,28,1,0,0,0,127,128,5,43,0,0,128,30,1,0,0,0,129,130,5,62,0,0,130,
  	32,1,0,0,0,131,132,5,126,0,0,132,34,1,0,0,0,133,134,5,44,0,0,134,36,1,
  	0,0,0,135,136,5,45,0,0,136,38,1,0,0,0,137,138,5,111,0,0,138,139,5,110,
  	0,0,139,140,5,108,0,0,140,141,5,121,0,0,141,40,1,0,0,0,142,143,5,110,
  	0,0,143,144,5,111,0,0,144,145,5,116,0,0,145,42,1,0,0,0,146,147,5,97,0,
  	0,147,148,5,110,0,0,148,149,5,100,0,0,149,44,1,0,0,0,150,151,5,105,0,
  	0,151,152,5,109,0,0,152,153,5,112,0,0,153,154,5,111,0,0,154,155,5,114,
  	0,0,155,156,5,116,0,0,156,157,5,97,0,0,157,158,5,110,0,0,158,159,5,116,
  	0,0,159,46,1,0,0,0,160,161,5,102,0,0,161,162,5,114,0,0,162,163,5,111,
  	0,0,163,164,5,109,0,0,164,48,1,0,0,0,165,166,5,116,0,0,166,167,5,111,
  	0,0,167,50,1,0,0,0,168,169,5,64,0,0,169,52,1,0,0,0,170,171,7,0,0,0,171,
  	54,1,0,0,0,172,173,5,13,0,0,173,177,5,10,0,0,174,177,7,1,0,0,175,177,
  	1,0,0,0,176,172,1,0,0,0,176,174,1,0,0,0,176,175,1,0,0,0,177,56,1,0,0,
  	0,178,179,5,92,0,0,179,181,3,53,26,0,180,182,3,53,26,0,181,180,1,0,0,
  	0,181,182,1,0,0,0,182,184,1,0,0,0,183,185,3,53,26,0,184,183,1,0,0,0,184,
  	185,1,0,0,0,185,187,1,0,0,0,186,188,3,53,26,0,187,186,1,0,0,0,187,188,
  	1,0,0,0,188,190,1,0,0,0,189,191,3,53,26,0,190,189,1,0,0,0,190,191,1,0,
  	0,0,191,193,1,0,0,0,192,194,3,53,26,0,193,192,1,0,0,0,193,194,1,0,0,0,
  	194,195,1,0,0,0,195,196,3,55,27,0,196,58,1,0,0,0,197,201,3,57,28,0,198,
  	199,5,92,0,0,199,201,8,2,0,0,200,197,1,0,0,0,200,198,1,0,0,0,201,60,1,
  	0,0,0,202,206,7,3,0,0,203,206,3,67,33,0,204,206,3,59,29,0,205,202,1,0,
  	0,0,205,203,1,0,0,0,205,204,1,0,0,0,206,62,1,0,0,0,207,211,7,4,0,0,208,
  	211,3,67,33,0,209,211,3,59,29,0,210,207,1,0,0,0,210,208,1,0,0,0,210,209,
  	1,0,0,0,211,64,1,0,0,0,212,214,3,63,31,0,213,212,1,0,0,0,214,215,1,0,
  	0,0,215,213,1,0,0,0,215,216,1,0,0,0,216,66,1,0,0,0,217,218,8,5,0,0,218,
  	68,1,0,0,0,219,220,5,47,0,0,220,221,5,42,0,0,221,225,1,0,0,0,222,224,
  	9,0,0,0,223,222,1,0,0,0,224,227,1,0,0,0,225,226,1,0,0,0,225,223,1,0,0,
  	0,226,228,1,0,0,0,227,225,1,0,0,0,228,229,5,42,0,0,229,230,5,47,0,0,230,
  	231,1,0,0,0,231,232,6,34,0,0,232,70,1,0,0,0,233,235,7,1,0,0,234,233,1,
  	0,0,0,235,236,1,0,0,0,236,234,1,0,0,0,236,237,1,0,0,0,237,238,1,0,0,0,
  	238,239,6,35,0,0,239,72,1,0,0,0,240,241,5,35,0,0,241,242,3,65,32,0,242,
  	74,1,0,0,0,243,244,3,51,25,0,244,248,3,61,30,0,245,247,3,63,31,0,246,
  	245,1,0,0,0,247,250,1,0,0,0,248,246,1,0,0,0,248,249,1,0,0,0,249,76,1,
  	0,0,0,250,248,1,0,0,0,251,255,3,61,30,0,252,254,3,63,31,0,253,252,1,0,
  	0,0,254,257,1,0,0,0,255,253,1,0,0,0,255,256,1,0,0,0,256,78,1,0,0,0,257,
  	255,1,0,0,0,258,265,5,34,0,0,259,264,8,6,0,0,260,261,5,92,0,0,261,264,
  	3,55,27,0,262,264,3,59,29,0,263,259,1,0,0,0,263,260,1,0,0,0,263,262,1,
  	0,0,0,264,267,1,0,0,0,265,263,1,0,0,0,265,266,1,0,0,0,266,268,1,0,0,0,
  	267,265,1,0,0,0,268,281,5,34,0,0,269,276,5,39,0,0,270,275,8,7,0,0,271,
  	272,5,92,0,0,272,275,3,55,27,0,273,275,3,59,29,0,274,270,1,0,0,0,274,
  	271,1,0,0,0,274,273,1,0,0,0,275,278,1,0,0,0,276,274,1,0,0,0,276,277,1,
  	0,0,0,277,279,1,0,0,0,278,276,1,0,0,0,279,281,5,39,0,0,280,258,1,0,0,
  	0,280,269,1,0,0,0,281,80,1,0,0,0,282,284,7,8,0,0,283,282,1,0,0,0,283,
  	284,1,0,0,0,284,302,1,0,0,0,285,287,7,9,0,0,286,285,1,0,0,0,287,290,1,
  	0,0,0,288,286,1,0,0,0,288,289,1,0,0,0,289,291,1,0,0,0,290,288,1,0,0,0,
  	291,293,5,46,0,0,292,294,7,9,0,0,293,292,1,0,0,0,294,295,1,0,0,0,295,
  	293,1,0,0,0,295,296,1,0,0,0,296,303,1,0,0,0,297,299,7,9,0,0,298,297,1,
  	0,0,0,299,300,1,0,0,0,300,298,1,0,0,0,300,301,1,0,0,0,301,303,1,0,0,0,
  	302,288,1,0,0,0,302,298,1,0,0,0,303,313,1,0,0,0,304,306,7,10,0,0,305,
  	307,7,8,0,0,306,305,1,0,0,0,306,307,1,0,0,0,307,309,1,0,0,0,308,310,7,
  	9,0,0,309,308,1,0,0,0,310,311,1,0,0,0,311,309,1,0,0,0,311,312,1,0,0,0,
  	312,314,1,0,0,0,313,304,1,0,0,0,313,314,1,0,0,0,314,82,1,0,0,0,315,316,
  	3,81,40,0,316,317,5,37,0,0,317,84,1,0,0,0,318,319,3,81,40,0,319,320,3,
  	77,38,0,320,86,1,0,0,0,321,322,3,89,44,0,322,323,3,91,45,0,323,324,3,
  	93,46,0,324,325,5,40,0,0,325,334,3,71,35,0,326,335,3,79,39,0,327,330,
  	8,11,0,0,328,330,3,59,29,0,329,327,1,0,0,0,329,328,1,0,0,0,330,333,1,
  	0,0,0,331,329,1,0,0,0,331,332,1,0,0,0,332,335,1,0,0,0,333,331,1,0,0,0,
  	334,326,1,0,0,0,334,331,1,0,0,0,335,336,1,0,0,0,336,337,3,71,35,0,337,
  	338,5,41,0,0,338,88,1,0,0,0,339,340,7,12,0,0,340,90,1,0,0,0,341,342,7,
  	13,0,0,342,92,1,0,0,0,343,344,7,14,0,0,344,94,1,0,0,0,345,346,7,12,0,
  	0,346,424,5,43,0,0,347,349,3,53,26,0,348,350,3,53,26,0,349,348,1,0,0,
  	0,349,350,1,0,0,0,350,352,1,0,0,0,351,353,3,53,26,0,352,351,1,0,0,0,352,
  	353,1,0,0,0,353,355,1,0,0,0,354,356,3,53,26,0,355,354,1,0,0,0,355,356,
  	1,0,0,0,356,358,1,0,0,0,357,359,3,53,26,0,358,357,1,0,0,0,358,359,1,0,
  	0,0,359,361,1,0,0,0,360,362,3,53,26,0,361,360,1,0,0,0,361,362,1,0,0,0,
  	362,425,1,0,0,0,363,365,3,53,26,0,364,366,3,53,26,0,365,364,1,0,0,0,365,
  	366,1,0,0,0,366,368,1,0,0,0,367,369,3,53,26,0,368,367,1,0,0,0,368,369,
  	1,0,0,0,369,371,1,0,0,0,370,372,3,53,26,0,371,370,1,0,0,0,371,372,1,0,
  	0,0,372,374,1,0,0,0,373,375,3,53,26,0,374,373,1,0,0,0,374,375,1,0,0,0,
  	375,376,1,0,0,0,376,377,5,63,0,0,377,425,1,0,0,0,378,380,3,53,26,0,379,
  	381,3,53,26,0,380,379,1,0,0,0,380,381,1,0,0,0,381,383,1,0,0,0,382,384,
  	3,53,26,0,383,382,1,0,0,0,383,384,1,0,0,0,384,386,1,0,0,0,385,387,3,53,
  	26,0,386,385,1,0,0,0,386,387,1,0,0,0,387,388,1,0,0,0,388,389,5,63,0,0,
  	389,390,5,63,0,0,390,425,1,0,0,0,391,393,3,53,26,0,392,394,3,53,26,0,
  	393,392,1,0,0,0,393,394,1,0,0,0,394,396,1,0,0,0,395,397,3,53,26,0,396,
  	395,1,0,0,0,396,397,1,0,0,0,397,398,1,0,0,0,398,399,5,63,0,0,399,400,
  	5,63,0,0,400,401,5,63,0,0,401,425,1,0,0,0,402,404,3,53,26,0,403,405,3,
  	53,26,0,404,403,1,0,0,0,404,405,1,0,0,0,405,406,1,0,0,0,406,407,5,63,
  	0,0,407,408,5,63,0,0,408,409,5,63,0,0,409,410,5,63,0,0,410,425,1,0,0,
  	0,411,412,3,53,26,0,412,413,5,63,0,0,413,414,5,63,0,0,414,415,5,63,0,
  	0,415,416,5,63,0,0,416,417,5,63,0,0,417,425,1,0,0,0,418,419,5,63,0,0,
  	419,420,5,63,0,0,420,421,5,63,0,0,421,422,5,63,0,0,422,423,5,63,0,0,423,
  	425,5,63,0,0,424,347,1,0,0,0,424,363,1,0,0,0,424,378,1,0,0,0,424,391,
  	1,0,0,0,424,402,1,0,0,0,424,411,1,0,0,0,424,418,1,0,0,0,425,96,1,0,0,
  	0,426,427,9,0,0,0,427,98,1,0,0,0,47,0,176,181,184,187,190,193,200,205,
  	210,215,225,236,248,255,263,265,274,276,280,283,288,295,300,302,306,311,
  	313,329,331,334,349,352,355,358,361,365,368,371,374,380,383,386,393,396,
  	404,424,1,0,1,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  css3lexerLexerStaticData = std::move(staticData);
}

}

CSS3Lexer::CSS3Lexer(CharStream *input) : Lexer(input) {
  CSS3Lexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *css3lexerLexerStaticData->atn, css3lexerLexerStaticData->decisionToDFA, css3lexerLexerStaticData->sharedContextCache);
}

CSS3Lexer::~CSS3Lexer() {
  delete _interpreter;
}

std::string CSS3Lexer::getGrammarFileName() const {
  return "CSS3Lexer.g4";
}

const std::vector<std::string>& CSS3Lexer::getRuleNames() const {
  return css3lexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& CSS3Lexer::getChannelNames() const {
  return css3lexerLexerStaticData->channelNames;
}

const std::vector<std::string>& CSS3Lexer::getModeNames() const {
  return css3lexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& CSS3Lexer::getVocabulary() const {
  return css3lexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView CSS3Lexer::getSerializedATN() const {
  return css3lexerLexerStaticData->serializedATN;
}

const atn::ATN& CSS3Lexer::getATN() const {
  return *css3lexerLexerStaticData->atn;
}




void CSS3Lexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  css3lexerLexerInitialize();
#else
  ::antlr4::internal::call_once(css3lexerLexerOnceFlag, css3lexerLexerInitialize);
#endif
}
