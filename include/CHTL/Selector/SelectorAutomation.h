#pragma once

#include <string>
#include <vector>
#include <unordered_map>
#include <unordered_set>
#include <memory>

namespace CHTL {
namespace AST {
    class ASTNode;
    class ElementNode;
    class StyleBlockNode;
    class ScriptBlockNode;
}

namespace Selector {

/**
 * @brief 选择器类型枚举
 */
enum class SelectorType {
    // CHTL选择器
    CLASS,              // 类选择器 (.class)
    ID,                 // ID选择器 (#id)
    REFERENCE,          // 引用选择器 (&) - CHTL中的&
    CHTL_REFERENCE,     // CHTL引用选择器 ({{&}}) - CHTL中的{{&}}
    
    // CHTL JS选择器（属于CHTL JS，不是CHTL）
    CHTLJS_ENHANCED_CLASS,  // CHTL JS增强类选择器 ({{.class}})
    CHTLJS_ENHANCED_ID,     // CHTL JS增强ID选择器 ({{#id}})
    CHTLJS_ENHANCED_TAG     // CHTL JS增强标签选择器 ({{tag}})
};

/**
 * @brief 选择器信息
 */
struct SelectorInfo {
    SelectorType type;          // 选择器类型
    std::string name;           // 选择器名称
    std::string fullSelector;   // 完整选择器字符串
    size_t position;            // 在代码中的位置
    bool isAutoGenerated;       // 是否为自动生成
};

/**
 * @brief 选择器自动化配置
 */
struct SelectorAutomationConfig {
    bool disableStyleAutoAddClass;     // 禁止局部样式块自动添加类选择器
    bool disableStyleAutoAddId;        // 禁止局部样式块自动添加id选择器
    bool disableScriptAutoAddClass;    // 禁止局部脚本自动添加类选择器
    bool disableScriptAutoAddId;       // 禁止局部脚本自动添加id选择器
    
    SelectorAutomationConfig() 
        : disableStyleAutoAddClass(false)
        , disableStyleAutoAddId(false)
        , disableScriptAutoAddClass(true)
        , disableScriptAutoAddId(true) {}
    
    /**
     * @brief 从配置节点加载配置
     * @param configNode 配置节点
     */
    void LoadFromConfigNode(const std::shared_ptr<AST::ASTNode>& configNode);
};

/**
 * @brief 选择器分析器
 * 
 * 分析样式块和脚本块中的选择器使用情况
 */
class SelectorAnalyzer {
public:
    /**
     * @brief 构造函数
     */
    SelectorAnalyzer();
    
    /**
     * @brief 分析样式块中的选择器
     * @param styleBlock 样式块节点
     * @return 选择器信息列表
     */
    std::vector<SelectorInfo> AnalyzeStyleSelectors(const std::shared_ptr<AST::StyleBlockNode>& styleBlock);
    
    /**
     * @brief 分析脚本块中的选择器
     * @param scriptBlock 脚本块节点
     * @return 选择器信息列表
     */
    std::vector<SelectorInfo> AnalyzeScriptSelectors(const std::shared_ptr<AST::ScriptBlockNode>& scriptBlock);
    
    /**
     * @brief 分析元素的属性选择器
     * @param element 元素节点
     * @return 选择器信息列表
     */
    std::vector<SelectorInfo> AnalyzeElementSelectors(const std::shared_ptr<AST::ElementNode>& element);

private:
    /**
     * @brief 解析CSS选择器
     * @param content CSS内容
     * @return 选择器信息列表
     */
    std::vector<SelectorInfo> ParseCSSSelectors(const std::string& content);
    
    /**
     * @brief 解析CHTL JS增强选择器
     * @param content JavaScript内容
     * @return 选择器信息列表
     */
    std::vector<SelectorInfo> ParseEnhancedSelectors(const std::string& content);
    
    /**
     * @brief 解析引用选择器
     * @param content 内容
     * @return 引用选择器信息列表
     */
    std::vector<SelectorInfo> ParseReferenceSelectors(const std::string& content);
    
    /**
     * @brief 提取选择器名称
     * @param selector 完整选择器
     * @return 选择器名称
     */
    std::string ExtractSelectorName(const std::string& selector);
};

/**
 * @brief 选择器自动化引擎
 * 
 * 根据配置和规则自动添加缺失的选择器
 */
class SelectorAutomationEngine {
public:
    /**
     * @brief 构造函数
     * @param config 自动化配置
     */
    SelectorAutomationEngine(const SelectorAutomationConfig& config);
    
    /**
     * @brief 处理元素的选择器自动化
     * @param element 元素节点
     * @return 是否进行了自动化处理
     */
    bool ProcessElementAutomation(std::shared_ptr<AST::ElementNode>& element);
    
    /**
     * @brief 更新配置
     * @param config 新配置
     */
    void UpdateConfig(const SelectorAutomationConfig& config);
    
    /**
     * @brief 获取当前配置
     */
    const SelectorAutomationConfig& GetConfig() const { return config_; }

private:
    /**
     * @brief 处理局部样式块的选择器自动化
     * @param element 元素节点
     * @param styleBlock 样式块
     * @return 是否进行了自动化处理
     */
    bool ProcessStyleBlockAutomation(std::shared_ptr<AST::ElementNode>& element,
                                    const std::shared_ptr<AST::StyleBlockNode>& styleBlock);
    
    /**
     * @brief 处理局部脚本块的选择器自动化
     * @param element 元素节点
     * @param scriptBlock 脚本块
     * @return 是否进行了自动化处理
     */
    bool ProcessScriptBlockAutomation(std::shared_ptr<AST::ElementNode>& element,
                                     const std::shared_ptr<AST::ScriptBlockNode>& scriptBlock);
    
    /**
     * @brief 自动添加类属性
     * @param element 元素节点
     * @param className 类名
     * @return 是否成功添加
     */
    bool AutoAddClassAttribute(std::shared_ptr<AST::ElementNode>& element, const std::string& className);
    
    /**
     * @brief 自动添加ID属性
     * @param element 元素节点
     * @param idName ID名
     * @return 是否成功添加
     */
    bool AutoAddIdAttribute(std::shared_ptr<AST::ElementNode>& element, const std::string& idName);
    
    /**
     * @brief 检查元素是否已有类属性
     * @param element 元素节点
     * @return 是否已有类属性
     */
    bool HasClassAttribute(const std::shared_ptr<AST::ElementNode>& element) const;
    
    /**
     * @brief 检查元素是否已有ID属性
     * @param element 元素节点
     * @return 是否已有ID属性
     */
    bool HasIdAttribute(const std::shared_ptr<AST::ElementNode>& element) const;

private:
    SelectorAutomationConfig config_;      // 自动化配置
    SelectorAnalyzer analyzer_;            // 选择器分析器
};

/**
 * @brief 引用选择器解析器
 * 
 * 处理&引用选择器的解析和替换
 */
class ReferenceSelectorResolver {
public:
    /**
     * @brief 构造函数
     */
    ReferenceSelectorResolver();
    
    /**
     * @brief 解析元素中的引用选择器
     * @param element 元素节点
     * @return 是否找到并处理了引用选择器
     */
    bool ResolveElementReferences(const std::shared_ptr<AST::ElementNode>& element);
    
    /**
     * @brief 解析样式块中的引用选择器
     * @param styleBlock 样式块
     * @param element 父元素节点
     * @return 处理的引用选择器数量
     */
    int ResolveStyleReferences(std::shared_ptr<AST::StyleBlockNode>& styleBlock,
                              const std::shared_ptr<AST::ElementNode>& element);
    
    /**
     * @brief 解析脚本块中的引用选择器
     * @param scriptBlock 脚本块
     * @param element 父元素节点
     * @return 处理的引用选择器数量
     */
    int ResolveScriptReferences(std::shared_ptr<AST::ScriptBlockNode>& scriptBlock,
                               const std::shared_ptr<AST::ElementNode>& element);

private:
    /**
     * @brief 获取样式块的优先选择器（优先class）
     * @param element 元素节点
     * @return 优先选择器字符串
     */
    std::string GetStylePrioritySelector(const std::shared_ptr<AST::ElementNode>& element) const;
    
    /**
     * @brief 获取脚本块的优先选择器（优先id）
     * @param element 元素节点
     * @return 优先选择器字符串
     */
    std::string GetScriptPrioritySelector(const std::shared_ptr<AST::ElementNode>& element) const;
    
    /**
     * @brief 替换内容中的引用选择器
     * @param content 原始内容
     * @param referenceSelector 引用选择器
     * @return 替换后的内容
     */
    std::string ReplaceReferenceSelectors(const std::string& content, const std::string& referenceSelector);
};

/**
 * @brief 选择器自动化管理器
 * 
 * 统一管理选择器自动化和引用解析
 */
class SelectorAutomationManager {
public:
    /**
     * @brief 构造函数
     */
    SelectorAutomationManager();
    
    /**
     * @brief 设置配置
     * @param config 自动化配置
     */
    void SetConfig(const SelectorAutomationConfig& config);
    
    /**
     * @brief 从配置节点加载配置
     * @param configNode 配置节点
     */
    void LoadConfigFromNode(const std::shared_ptr<AST::ASTNode>& configNode);
    
    /**
     * @brief 处理元素的完整选择器自动化
     * @param element 元素节点
     * @return 是否进行了处理
     */
    bool ProcessElement(std::shared_ptr<AST::ElementNode>& element);
    
    /**
     * @brief 获取处理统计信息
     * @return 统计信息字符串
     */
    std::string GetStatistics() const;
    
    /**
     * @brief 重置统计信息
     */
    void ResetStatistics();

private:
    /**
     * @brief 检查元素是否已有类属性
     * @param element 元素节点
     * @return 是否已有类属性
     */
    bool HasClassAttribute(const std::shared_ptr<AST::ElementNode>& element) const;
    
    /**
     * @brief 检查元素是否已有ID属性
     * @param element 元素节点
     * @return 是否已有ID属性
     */
    bool HasIdAttribute(const std::shared_ptr<AST::ElementNode>& element) const;

private:
    SelectorAutomationConfig config_;              // 自动化配置
    SelectorAutomationEngine automationEngine_;    // 自动化引擎
    ReferenceSelectorResolver referenceResolver_;  // 引用选择器解析器
    
    // 统计信息
    mutable int classAutoAddCount_;                 // 自动添加的类选择器数量
    mutable int idAutoAddCount_;                    // 自动添加的ID选择器数量
    mutable int referenceResolveCount_;             // 解析的引用选择器数量
};

} // namespace Selector
} // namespace CHTL