// ==========================================
// CMOD/CJMOD模块系统完整语法验证测试
// 验证所有模块相关语法是否符合语法文档
// ==========================================

// ========== CMOD导入测试 ==========
// 语法文档第304-306行：CMOD模块导入

// 整个CMOD模块导入
[Import] @Chtl from "Chtholly";
[Import] @Chtl from "Yuigahama";

// 精确子模块导入
[Import] @Chtl from "Chtholly.Accordion";
[Import] @Chtl from "Yuigahama.MusicPlayer";

// ========== CJMOD导入测试 ==========
// 语法文档第171-172行和第339-340行：CJMOD导入

// 导入CJMOD扩展
[Import] @CJmod from "Chtholly";
[Import] @CJmod from "printMylove";
[Import] @CJmod from "iNeverAway";

// ========== 命名导入测试 ==========
// as语法支持

[Import] @Chtl from "Chtholly" as ChtlModule;
[Import] @CJmod from "Chtholly" as ChtlJSExt;

// ========== 具体组件导入测试 ==========
// 语法文档第155-169行：精确导入

// 自定义组件导入
[Import] [Custom] @Element Accordion from "Chtholly";
[Import] [Custom] @Element CloverAlbum from "Chtholly";
[Import] [Custom] @Element MouseEffect from "Chtholly";

// 自定义样式导入
[Import] [Custom] @Style AccordionTheme from "Chtholly";
[Import] [Custom] @Style CloverAlbumTheme from "Chtholly";

// 模板导入
[Import] [Template] @Element CardBase from "Yuigahama";
[Import] [Template] @Style ButtonTheme from "Yuigahama";

// 批量导入
[Import] [Custom] @Element from "Chtholly";
[Import] [Template] @Style from "Yuigahama";

// ========== 配置导入测试 ==========
// 语法文档第174-176行：配置导入

[Import] @Config from "Chtholly";
[Import] [Configuration] @Config ModuleConfig from "Yuigahama";

// ========== 使用导入的模块内容 ==========

// 使用导入的组件
div {
    class: main-container;
    
    // 使用CMOD组件
    @Element Accordion {
        title: "测试手风琴";
        content: "这是从Chtholly模块导入的手风琴组件";
    }
    
    @Element CloverAlbum {
        images: ["img1.jpg", "img2.jpg", "img3.jpg"];
        theme: "dark";
    }
    
    // 使用导入的样式
    div {
        class: styled-section;
        style {
            @Style AccordionTheme;
            @Style CloverAlbumTheme;
        }
        text { "应用了导入的主题样式" }
    }
}

// ========== 测试CJMOD功能 ==========
script {
    // 使用CJMOD扩展的功能
    
    // printMylove功能测试（语法文档第349-352行）
    printMylove({
        url: "avatar.jpg",
        mode: "ASCII",
        width: 80,
        height: 40,
        scale: 0.5
    });
    
    printMylove({
        url: "photo.png", 
        mode: "Pixel",
        width: 100,
        height: 60
    });
    
    // iNeverAway功能测试（语法文档第354-359行）
    // 创建虚对象与状态区分
    vir MyController = iNeverAway({
        show: () => {
            {{.main-container}}->style->display = 'block';
        },
        hide: () => {
            {{.main-container}}->style->display = 'none';
        },
        toggle: () => {
            let container = {{.main-container}};
            container->style->display = container->style->display === 'none' ? 'block' : 'none';
        }
    });
    
    // 状态重载测试
    vir ControllerA = Void<A>({
        init: () => console.log('Controller A initialized'),
        process: () => console.log('Controller A processing')
    });
    
    vir ControllerB = Void<B>({
        init: () => console.log('Controller B initialized'),
        process: () => console.log('Controller B processing')
    });
    
    vir DefaultController = Void({
        init: () => console.log('Default controller initialized')
    });
    
    // 调用虚对象方法
    MyController->show();
    ControllerA->init();
    ControllerB->process();
    DefaultController->init();
    
    // 使用导入的模块组件的增强功能
    {{.accordion}}->listen({
        expand: () => {
            console.log('Accordion expanded');
            {{.accordion-content}}->animate({
                duration: 300,
                begin: { height: "0px", opacity: 0 },
                end: { height: "auto", opacity: 1 },
                easing: "ease-out"
            });
        },
        
        collapse: () => {
            console.log('Accordion collapsed');
            {{.accordion-content}}->animate({
                duration: 300,
                begin: { height: "auto", opacity: 1 },
                end: { height: "0px", opacity: 0 },
                easing: "ease-in"
            });
        }
    });
    
    // 事件委托测试
    {{.main-container}}->delegate({
        target: ".album-image",
        click: (event) => {
            console.log('Album image clicked:', event.target.src);
            // 图片放大效果
            event.target.style.transform = 'scale(1.2)';
            setTimeout(() => {
                event.target.style.transform = 'scale(1.0)';
            }, 300);
        }
    });
    
    // 全局错误处理
    window.addEventListener('error', (event) => {
        console.error('Module error caught:', event.error);
    });
}

// ========== 模块兼容性测试 ==========

// 测试模块版本兼容性检查
[Configuration] {
    DEBUG_MODE = true;
    MODULE_VERSION_CHECK = true;
    STRICT_DEPENDENCY_CHECK = false;
}

// 测试混合模块的使用
// Chtholly是CMOD + CJMOD混合模块（语法文档第324-340行）

// 从同一个模块导入CMOD和CJMOD内容
div {
    class: mixed-module-test;
    
    // 使用CMOD部分的组件
    @Element MouseEffect {
        type: "trail";
        color: "#ff6b9d";
        size: "medium";
    }
    
    // 在脚本中使用CJMOD部分的功能
    script {
        // CJMOD提供的增强功能
        iNeverAway.createState('mouse-active', true);
        
        // 与CMOD组件的交互
        {{.mouse-effect}}->listen({
            activate: () => {
                iNeverAway.setState('mouse-active', true);
                printMylove({
                    url: "cursor.png",
                    mode: "Pixel",
                    width: 32,
                    height: 32
                });
            },
            
            deactivate: () => {
                iNeverAway.setState('mouse-active', false);
            }
        });
        
        // 状态监听
        iNeverAway.onStateChange('mouse-active', (isActive) => {
            if (isActive) {
                {{.mouse-effect}}->classList->add('active');
            } else {
                {{.mouse-effect}}->classList->remove('active');
            }
        });
    }
}

// ========== 命名空间与模块的结合 ==========

[Namespace] TestNamespace {
    // 在命名空间中使用导入的模块内容
    
    [Template] @Element EnhancedCard {
        inherit @Element CardBase; // 来自Yuigahama模块
        
        // 增强功能
        style {
            @Style ButtonTheme; // 来自Yuigahama模块
            
            transition: all 0.3s ease;
            cursor: pointer;
            
            &:hover {
                transform: translateY(-4px);
                box-shadow: 0 8px 16px rgba(0,0,0,0.2);
            }
        }
        
        script {
            // 结合CJMOD功能
            {{.enhanced-card}}->listen({
                mouseenter: () => {
                    MyController->show();
                },
                
                mouseleave: () => {
                    MyController->hide();
                }
            });
        }
    }
}

// 使用命名空间中的增强组件
div {
    class: namespace-test;
    
    @Element EnhancedCard from TestNamespace {
        title: "增强卡片测试";
        content: "结合了模块导入和命名空间的组件";
    }
}

// ========== 模块约束测试 ==========

[Namespace] ConstrainedSpace {
    // 约束系统与模块的结合
    except [Custom] @Element Accordion; // 禁用特定模块组件
    except @CJmod; // 禁用所有CJMOD功能
    
    div {
        class: constrained-area;
        text { "此区域约束了某些模块功能" }
        
        // 这里不能使用被约束的组件
        // @Element Accordion; // 这会导致约束错误
        
        // 只能使用允许的组件
        @Element CloverAlbum {
            images: ["safe1.jpg", "safe2.jpg"];
        }
    }
}

// ========== 模块性能测试 ==========

script {
    // 模块加载性能监控
    console.time('module-performance');
    
    // 测试大量模块组件的性能
    for (let i = 0; i < 100; i++) {
        let element = document.createElement('div');
        element.className = 'performance-test-' + i;
        
        // 模拟使用模块功能
        if (typeof MyController !== 'undefined') {
            MyController->show();
        }
        
        document.body.appendChild(element);
    }
    
    console.timeEnd('module-performance');
    
    // 内存使用监控
    if (performance.memory) {
        console.log('Memory usage:', {
            used: performance.memory.usedJSHeapSize,
            total: performance.memory.totalJSHeapSize,
            limit: performance.memory.jsHeapSizeLimit
        });
    }
    
    // 模块依赖检查
    const moduleStatus = {
        chtholly: typeof Accordion !== 'undefined',
        yuigahama: typeof CardBase !== 'undefined',
        cjmod: typeof printMylove !== 'undefined' && typeof iNeverAway !== 'undefined'
    };
    
    console.log('Module status:', moduleStatus);
}

// ========== 全局样式与模块样式的整合 ==========

style {
    // 全局样式与模块样式的协调
    
    .main-container {
        width: 100%;
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }
    
    .mixed-module-test {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 20px;
        margin: 20px 0;
    }
    
    .namespace-test {
        background: #f5f5f5;
        padding: 20px;
        border-radius: 8px;
        margin: 20px 0;
    }
    
    .constrained-area {
        border: 2px dashed #ff6b6b;
        padding: 15px;
        margin: 10px 0;
        background: rgba(255, 107, 107, 0.1);
    }
    
    // 模块组件的全局样式覆盖
    .accordion {
        margin-bottom: 10px;
    }
    
    .clover-album {
        border-radius: 12px;
        overflow: hidden;
    }
    
    .mouse-effect.active {
        pointer-events: auto;
        opacity: 1;
    }
    
    .enhanced-card {
        background: white;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        padding: 16px;
    }
}