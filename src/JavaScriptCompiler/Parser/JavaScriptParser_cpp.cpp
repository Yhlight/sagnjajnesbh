
#include "JavaScriptLexerBase.h"
#include "JavaScriptParserBase.h"



// Generated from JavaScriptParser_cpp.g4 by ANTLR 4.13.2


#include "JavaScriptParser_cppListener.h"

#include "JavaScriptParser_cpp.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct JavaScriptParser_cppStaticData final {
  JavaScriptParser_cppStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  JavaScriptParser_cppStaticData(const JavaScriptParser_cppStaticData&) = delete;
  JavaScriptParser_cppStaticData(JavaScriptParser_cppStaticData&&) = delete;
  JavaScriptParser_cppStaticData& operator=(const JavaScriptParser_cppStaticData&) = delete;
  JavaScriptParser_cppStaticData& operator=(JavaScriptParser_cppStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag javascriptparser_cppParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<JavaScriptParser_cppStaticData> javascriptparser_cppParserStaticData = nullptr;

void javascriptparser_cppParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (javascriptparser_cppParserStaticData != nullptr) {
    return;
  }
#else
  assert(javascriptparser_cppParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<JavaScriptParser_cppStaticData>(
    std::vector<std::string>{
      "program", "sourceElement", "statement", "block", "statementList", 
      "importStatement", "importFromBlock", "importModuleItems", "importAliasName", 
      "moduleExportName", "importedBinding", "importDefault", "importNamespace", 
      "importFrom", "aliasName", "exportStatement", "exportFromBlock", "exportModuleItems", 
      "exportAliasName", "declaration", "variableStatement", "variableDeclarationList", 
      "variableDeclaration", "emptyStatement_", "expressionStatement", "ifStatement", 
      "iterationStatement", "varModifier", "continueStatement", "breakStatement", 
      "returnStatement", "yieldStatement", "withStatement", "switchStatement", 
      "caseBlock", "caseClauses", "caseClause", "defaultClause", "labelledStatement", 
      "throwStatement", "tryStatement", "catchProduction", "finallyProduction", 
      "debuggerStatement", "functionDeclaration", "classDeclaration", "classTail", 
      "classElement", "methodDefinition", "fieldDefinition", "classElementName", 
      "privateIdentifier", "formalParameterList", "formalParameterArg", 
      "lastFormalParameterArg", "functionBody", "sourceElements", "arrayLiteral", 
      "elementList", "arrayElement", "propertyAssignment", "propertyName", 
      "arguments", "argument", "expressionSequence", "singleExpression", 
      "initializer", "assignable", "objectLiteral", "anonymousFunction", 
      "arrowFunctionParameters", "arrowFunctionBody", "assignmentOperator", 
      "literal", "templateStringLiteral", "templateStringAtom", "numericLiteral", 
      "bigintLiteral", "getter", "setter", "identifierName", "identifier", 
      "reservedWord", "keyword", "let_", "eos"
    },
    std::vector<std::string>{
      "", "", "", "", "", "'['", "']'", "'('", "')'", "'{'", "", "'}'", 
      "';'", "','", "'='", "'\\u003F'", "'\\u003F.'", "':'", "'...'", "'.'", 
      "'++'", "'--'", "'+'", "'-'", "'~'", "'!'", "'*'", "'/'", "'%'", "'**'", 
      "'\\u003F\\u003F'", "'#'", "'>>'", "'<<'", "'>>>'", "'<'", "'>'", 
      "'<='", "'>='", "'=='", "'!='", "'==='", "'!=='", "'&'", "'^'", "'|'", 
      "'&&'", "'||'", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='", 
      "'>>>='", "'&='", "'^='", "'|='", "'**='", "'\\u003F\\u003F='", "'=>'", 
      "'null'", "", "", "", "", "", "", "", "", "", "", "'break'", "'do'", 
      "'instanceof'", "'typeof'", "'case'", "'else'", "'new'", "'var'", 
      "'catch'", "'finally'", "'return'", "'void'", "'continue'", "'for'", 
      "'switch'", "'while'", "'debugger'", "'function'", "'this'", "'with'", 
      "'default'", "'if'", "'throw'", "'delete'", "'in'", "'try'", "'as'", 
      "'from'", "'of'", "'yield'", "'yield*'", "'class'", "'enum'", "'extends'", 
      "'super'", "'const'", "'export'", "'import'", "'async'", "'await'", 
      "'implements'", "", "", "'private'", "'public'", "'interface'", "'package'", 
      "'protected'", "'static'"
    },
    std::vector<std::string>{
      "", "HashBangLine", "MultiLineComment", "SingleLineComment", "RegularExpressionLiteral", 
      "OpenBracket", "CloseBracket", "OpenParen", "CloseParen", "OpenBrace", 
      "TemplateCloseBrace", "CloseBrace", "SemiColon", "Comma", "Assign", 
      "QuestionMark", "QuestionMarkDot", "Colon", "Ellipsis", "Dot", "PlusPlus", 
      "MinusMinus", "Plus", "Minus", "BitNot", "Not", "Multiply", "Divide", 
      "Modulus", "Power", "NullCoalesce", "Hashtag", "RightShiftArithmetic", 
      "LeftShiftArithmetic", "RightShiftLogical", "LessThan", "MoreThan", 
      "LessThanEquals", "GreaterThanEquals", "Equals_", "NotEquals", "IdentityEquals", 
      "IdentityNotEquals", "BitAnd", "BitXOr", "BitOr", "And", "Or", "MultiplyAssign", 
      "DivideAssign", "ModulusAssign", "PlusAssign", "MinusAssign", "LeftShiftArithmeticAssign", 
      "RightShiftArithmeticAssign", "RightShiftLogicalAssign", "BitAndAssign", 
      "BitXorAssign", "BitOrAssign", "PowerAssign", "NullishCoalescingAssign", 
      "ARROW", "NullLiteral", "BooleanLiteral", "DecimalLiteral", "HexIntegerLiteral", 
      "OctalIntegerLiteral", "OctalIntegerLiteral2", "BinaryIntegerLiteral", 
      "BigHexIntegerLiteral", "BigOctalIntegerLiteral", "BigBinaryIntegerLiteral", 
      "BigDecimalIntegerLiteral", "Break", "Do", "Instanceof", "Typeof", 
      "Case", "Else", "New", "Var", "Catch", "Finally", "Return", "Void", 
      "Continue", "For", "Switch", "While", "Debugger", "Function_", "This", 
      "With", "Default", "If", "Throw", "Delete", "In", "Try", "As", "From", 
      "Of", "Yield", "YieldStar", "Class", "Enum", "Extends", "Super", "Const", 
      "Export", "Import", "Async", "Await", "Implements", "StrictLet", "NonStrictLet", 
      "Private", "Public", "Interface", "Package", "Protected", "Static", 
      "Identifier", "StringLiteral", "BackTick", "WhiteSpaces", "LineTerminator", 
      "HtmlComment", "CDataComment", "UnexpectedCharacter", "TemplateStringStartExpression", 
      "TemplateStringAtom"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,131,1098,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,1,0,3,0,174,8,0,1,0,3,0,177,8,0,1,0,1,0,1,1,1,1,1,2,1,
  	2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
  	1,2,3,2,203,8,2,1,3,1,3,3,3,207,8,3,1,3,1,3,1,4,4,4,212,8,4,11,4,12,4,
  	213,1,5,1,5,1,5,1,6,3,6,220,8,6,1,6,1,6,3,6,224,8,6,1,6,1,6,1,6,1,6,1,
  	6,3,6,231,8,6,1,7,1,7,1,7,1,7,5,7,237,8,7,10,7,12,7,240,9,7,1,7,1,7,3,
  	7,244,8,7,3,7,246,8,7,1,7,1,7,1,8,1,8,1,8,3,8,253,8,8,1,9,1,9,3,9,257,
  	8,9,1,10,1,10,1,11,1,11,1,11,1,12,1,12,3,12,266,8,12,1,12,1,12,3,12,270,
  	8,12,1,13,1,13,1,13,1,14,1,14,1,14,3,14,278,8,14,1,15,1,15,3,15,282,8,
  	15,1,15,1,15,3,15,286,8,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,295,
  	8,15,1,16,1,16,1,16,1,16,1,16,1,16,3,16,303,8,16,1,16,1,16,3,16,307,8,
  	16,1,17,1,17,1,17,1,17,5,17,313,8,17,10,17,12,17,316,9,17,1,17,1,17,3,
  	17,320,8,17,3,17,322,8,17,1,17,1,17,1,18,1,18,1,18,3,18,329,8,18,1,19,
  	1,19,1,19,3,19,334,8,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,5,21,343,8,
  	21,10,21,12,21,346,9,21,1,22,1,22,1,22,3,22,351,8,22,1,23,1,23,1,24,1,
  	24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,366,8,25,1,26,1,
  	26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
  	26,1,26,1,26,3,26,386,8,26,1,26,1,26,3,26,390,8,26,1,26,1,26,3,26,394,
  	8,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,402,8,26,1,26,1,26,1,26,1,26,
  	1,26,1,26,1,26,3,26,411,8,26,1,26,1,26,1,26,3,26,416,8,26,1,26,1,26,1,
  	26,1,26,1,26,3,26,423,8,26,1,27,1,27,1,27,3,27,428,8,27,1,28,1,28,1,28,
  	3,28,433,8,28,1,28,1,28,1,29,1,29,1,29,3,29,440,8,29,1,29,1,29,1,30,1,
  	30,1,30,3,30,447,8,30,1,30,1,30,1,31,1,31,1,31,3,31,454,8,31,1,31,1,31,
  	1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,
  	3,34,472,8,34,1,34,1,34,3,34,476,8,34,3,34,478,8,34,1,34,1,34,1,35,4,
  	35,483,8,35,11,35,12,35,484,1,36,1,36,1,36,1,36,3,36,491,8,36,1,37,1,
  	37,1,37,3,37,496,8,37,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,
  	40,1,40,1,40,1,40,3,40,511,8,40,1,40,3,40,514,8,40,1,41,1,41,1,41,3,41,
  	519,8,41,1,41,3,41,522,8,41,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,
  	44,3,44,533,8,44,1,44,1,44,3,44,537,8,44,1,44,1,44,1,44,3,44,542,8,44,
  	1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,46,1,46,3,46,553,8,46,1,46,1,46,
  	5,46,557,8,46,10,46,12,46,560,9,46,1,46,1,46,1,47,1,47,1,47,3,47,567,
  	8,47,1,47,1,47,1,47,1,47,3,47,573,8,47,1,47,1,47,1,47,1,47,3,47,579,8,
  	47,1,47,1,47,3,47,583,8,47,1,48,1,48,3,48,587,8,48,1,48,3,48,590,8,48,
  	1,48,1,48,1,48,3,48,595,8,48,1,48,1,48,1,48,1,48,3,48,601,8,48,1,48,1,
  	48,1,48,1,48,1,48,1,48,3,48,609,8,48,1,48,1,48,1,48,3,48,614,8,48,1,48,
  	1,48,1,48,3,48,619,8,48,1,49,1,49,3,49,623,8,49,1,50,1,50,3,50,627,8,
  	50,1,51,1,51,1,51,1,52,1,52,1,52,5,52,635,8,52,10,52,12,52,638,9,52,1,
  	52,1,52,3,52,642,8,52,1,52,3,52,645,8,52,1,53,1,53,1,53,3,53,650,8,53,
  	1,54,1,54,1,54,1,55,1,55,3,55,657,8,55,1,55,1,55,1,56,4,56,662,8,56,11,
  	56,12,56,663,1,57,1,57,1,57,1,57,1,58,5,58,671,8,58,10,58,12,58,674,9,
  	58,1,58,3,58,677,8,58,1,58,4,58,680,8,58,11,58,12,58,681,1,58,5,58,685,
  	8,58,10,58,12,58,688,9,58,1,58,5,58,691,8,58,10,58,12,58,694,9,58,1,59,
  	3,59,697,8,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,
  	1,60,1,60,3,60,712,8,60,1,60,3,60,715,8,60,1,60,1,60,1,60,3,60,720,8,
  	60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,
  	60,1,60,3,60,737,8,60,1,60,3,60,740,8,60,1,61,1,61,1,61,1,61,1,61,1,61,
  	1,61,3,61,749,8,61,1,62,1,62,1,62,1,62,5,62,755,8,62,10,62,12,62,758,
  	9,62,1,62,3,62,761,8,62,3,62,763,8,62,1,62,1,62,1,63,3,63,768,8,63,1,
  	63,1,63,3,63,772,8,63,1,64,1,64,1,64,5,64,777,8,64,10,64,12,64,780,9,
  	64,1,65,1,65,1,65,1,65,3,65,786,8,65,1,65,1,65,1,65,1,65,1,65,1,65,1,
  	65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,
  	65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,
  	65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,
  	65,1,65,3,65,838,8,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,
  	65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,
  	65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,
  	65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,
  	65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,900,8,65,1,65,1,65,1,
  	65,1,65,1,65,1,65,3,65,908,8,65,1,65,1,65,3,65,912,8,65,1,65,1,65,1,65,
  	1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,5,65,925,8,65,10,65,12,65,928,
  	9,65,1,66,1,66,1,66,1,67,1,67,1,67,1,67,3,67,937,8,67,1,68,1,68,1,68,
  	1,68,5,68,943,8,68,10,68,12,68,946,9,68,1,68,3,68,949,8,68,3,68,951,8,
  	68,1,68,1,68,1,69,1,69,3,69,957,8,69,1,69,1,69,3,69,961,8,69,1,69,1,69,
  	3,69,965,8,69,1,69,1,69,1,69,3,69,970,8,69,1,69,1,69,1,69,1,69,3,69,976,
  	8,69,1,70,1,70,1,70,3,70,981,8,70,1,70,3,70,984,8,70,1,71,1,71,3,71,988,
  	8,71,1,72,1,72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,999,8,73,1,74,
  	1,74,5,74,1003,8,74,10,74,12,74,1006,9,74,1,74,1,74,1,75,1,75,1,75,1,
  	75,1,75,3,75,1015,8,75,1,76,1,76,1,77,1,77,1,78,1,78,1,78,1,78,1,79,1,
  	79,1,79,1,79,1,80,1,80,3,80,1031,8,80,1,81,1,81,1,82,1,82,1,82,3,82,1038,
  	8,82,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,
  	1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,
  	1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,
  	1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,1088,8,83,1,84,1,84,1,85,1,85,
  	1,85,1,85,3,85,1096,8,85,1,85,0,1,130,86,0,2,4,6,8,10,12,14,16,18,20,
  	22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,
  	68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
  	112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
  	148,150,152,154,156,158,160,162,164,166,168,170,0,12,3,0,102,102,112,
  	112,122,122,1,0,102,103,1,0,26,28,1,0,22,23,1,0,32,34,1,0,35,38,1,0,39,
  	42,1,0,48,60,1,0,64,68,1,0,69,72,4,0,99,102,111,111,115,115,122,122,1,
  	0,114,115,1267,0,173,1,0,0,0,2,180,1,0,0,0,4,202,1,0,0,0,6,204,1,0,0,
  	0,8,211,1,0,0,0,10,215,1,0,0,0,12,230,1,0,0,0,14,232,1,0,0,0,16,249,1,
  	0,0,0,18,256,1,0,0,0,20,258,1,0,0,0,22,260,1,0,0,0,24,265,1,0,0,0,26,
  	271,1,0,0,0,28,274,1,0,0,0,30,294,1,0,0,0,32,306,1,0,0,0,34,308,1,0,0,
  	0,36,325,1,0,0,0,38,333,1,0,0,0,40,335,1,0,0,0,42,338,1,0,0,0,44,347,
  	1,0,0,0,46,352,1,0,0,0,48,354,1,0,0,0,50,358,1,0,0,0,52,422,1,0,0,0,54,
  	427,1,0,0,0,56,429,1,0,0,0,58,436,1,0,0,0,60,443,1,0,0,0,62,450,1,0,0,
  	0,64,457,1,0,0,0,66,463,1,0,0,0,68,469,1,0,0,0,70,482,1,0,0,0,72,486,
  	1,0,0,0,74,492,1,0,0,0,76,497,1,0,0,0,78,501,1,0,0,0,80,506,1,0,0,0,82,
  	515,1,0,0,0,84,525,1,0,0,0,86,528,1,0,0,0,88,532,1,0,0,0,90,546,1,0,0,
  	0,92,552,1,0,0,0,94,582,1,0,0,0,96,618,1,0,0,0,98,620,1,0,0,0,100,626,
  	1,0,0,0,102,628,1,0,0,0,104,644,1,0,0,0,106,646,1,0,0,0,108,651,1,0,0,
  	0,110,654,1,0,0,0,112,661,1,0,0,0,114,665,1,0,0,0,116,672,1,0,0,0,118,
  	696,1,0,0,0,120,739,1,0,0,0,122,748,1,0,0,0,124,750,1,0,0,0,126,767,1,
  	0,0,0,128,773,1,0,0,0,130,837,1,0,0,0,132,929,1,0,0,0,134,936,1,0,0,0,
  	136,938,1,0,0,0,138,975,1,0,0,0,140,983,1,0,0,0,142,987,1,0,0,0,144,989,
  	1,0,0,0,146,998,1,0,0,0,148,1000,1,0,0,0,150,1014,1,0,0,0,152,1016,1,
  	0,0,0,154,1018,1,0,0,0,156,1020,1,0,0,0,158,1024,1,0,0,0,160,1030,1,0,
  	0,0,162,1032,1,0,0,0,164,1037,1,0,0,0,166,1087,1,0,0,0,168,1089,1,0,0,
  	0,170,1095,1,0,0,0,172,174,5,1,0,0,173,172,1,0,0,0,173,174,1,0,0,0,174,
  	176,1,0,0,0,175,177,3,112,56,0,176,175,1,0,0,0,176,177,1,0,0,0,177,178,
  	1,0,0,0,178,179,5,0,0,1,179,1,1,0,0,0,180,181,3,4,2,0,181,3,1,0,0,0,182,
  	203,3,6,3,0,183,203,3,40,20,0,184,203,3,10,5,0,185,203,3,30,15,0,186,
  	203,3,46,23,0,187,203,3,90,45,0,188,203,3,88,44,0,189,203,3,48,24,0,190,
  	203,3,50,25,0,191,203,3,52,26,0,192,203,3,56,28,0,193,203,3,58,29,0,194,
  	203,3,60,30,0,195,203,3,62,31,0,196,203,3,64,32,0,197,203,3,76,38,0,198,
  	203,3,66,33,0,199,203,3,78,39,0,200,203,3,80,40,0,201,203,3,86,43,0,202,
  	182,1,0,0,0,202,183,1,0,0,0,202,184,1,0,0,0,202,185,1,0,0,0,202,186,1,
  	0,0,0,202,187,1,0,0,0,202,188,1,0,0,0,202,189,1,0,0,0,202,190,1,0,0,0,
  	202,191,1,0,0,0,202,192,1,0,0,0,202,193,1,0,0,0,202,194,1,0,0,0,202,195,
  	1,0,0,0,202,196,1,0,0,0,202,197,1,0,0,0,202,198,1,0,0,0,202,199,1,0,0,
  	0,202,200,1,0,0,0,202,201,1,0,0,0,203,5,1,0,0,0,204,206,5,9,0,0,205,207,
  	3,8,4,0,206,205,1,0,0,0,206,207,1,0,0,0,207,208,1,0,0,0,208,209,5,11,
  	0,0,209,7,1,0,0,0,210,212,3,4,2,0,211,210,1,0,0,0,212,213,1,0,0,0,213,
  	211,1,0,0,0,213,214,1,0,0,0,214,9,1,0,0,0,215,216,5,110,0,0,216,217,3,
  	12,6,0,217,11,1,0,0,0,218,220,3,22,11,0,219,218,1,0,0,0,219,220,1,0,0,
  	0,220,223,1,0,0,0,221,224,3,24,12,0,222,224,3,14,7,0,223,221,1,0,0,0,
  	223,222,1,0,0,0,224,225,1,0,0,0,225,226,3,26,13,0,226,227,3,170,85,0,
  	227,231,1,0,0,0,228,229,5,123,0,0,229,231,3,170,85,0,230,219,1,0,0,0,
  	230,228,1,0,0,0,231,13,1,0,0,0,232,238,5,9,0,0,233,234,3,16,8,0,234,235,
  	5,13,0,0,235,237,1,0,0,0,236,233,1,0,0,0,237,240,1,0,0,0,238,236,1,0,
  	0,0,238,239,1,0,0,0,239,245,1,0,0,0,240,238,1,0,0,0,241,243,3,16,8,0,
  	242,244,5,13,0,0,243,242,1,0,0,0,243,244,1,0,0,0,244,246,1,0,0,0,245,
  	241,1,0,0,0,245,246,1,0,0,0,246,247,1,0,0,0,247,248,5,11,0,0,248,15,1,
  	0,0,0,249,252,3,18,9,0,250,251,5,99,0,0,251,253,3,20,10,0,252,250,1,0,
  	0,0,252,253,1,0,0,0,253,17,1,0,0,0,254,257,3,160,80,0,255,257,5,123,0,
  	0,256,254,1,0,0,0,256,255,1,0,0,0,257,19,1,0,0,0,258,259,7,0,0,0,259,
  	21,1,0,0,0,260,261,3,28,14,0,261,262,5,13,0,0,262,23,1,0,0,0,263,266,
  	5,26,0,0,264,266,3,160,80,0,265,263,1,0,0,0,265,264,1,0,0,0,266,269,1,
  	0,0,0,267,268,5,99,0,0,268,270,3,160,80,0,269,267,1,0,0,0,269,270,1,0,
  	0,0,270,25,1,0,0,0,271,272,5,100,0,0,272,273,5,123,0,0,273,27,1,0,0,0,
  	274,277,3,160,80,0,275,276,5,99,0,0,276,278,3,160,80,0,277,275,1,0,0,
  	0,277,278,1,0,0,0,278,29,1,0,0,0,279,281,5,109,0,0,280,282,5,93,0,0,281,
  	280,1,0,0,0,281,282,1,0,0,0,282,285,1,0,0,0,283,286,3,32,16,0,284,286,
  	3,38,19,0,285,283,1,0,0,0,285,284,1,0,0,0,286,287,1,0,0,0,287,288,3,170,
  	85,0,288,295,1,0,0,0,289,290,5,109,0,0,290,291,5,93,0,0,291,292,3,130,
  	65,0,292,293,3,170,85,0,293,295,1,0,0,0,294,279,1,0,0,0,294,289,1,0,0,
  	0,295,31,1,0,0,0,296,297,3,24,12,0,297,298,3,26,13,0,298,299,3,170,85,
  	0,299,307,1,0,0,0,300,302,3,34,17,0,301,303,3,26,13,0,302,301,1,0,0,0,
  	302,303,1,0,0,0,303,304,1,0,0,0,304,305,3,170,85,0,305,307,1,0,0,0,306,
  	296,1,0,0,0,306,300,1,0,0,0,307,33,1,0,0,0,308,314,5,9,0,0,309,310,3,
  	36,18,0,310,311,5,13,0,0,311,313,1,0,0,0,312,309,1,0,0,0,313,316,1,0,
  	0,0,314,312,1,0,0,0,314,315,1,0,0,0,315,321,1,0,0,0,316,314,1,0,0,0,317,
  	319,3,36,18,0,318,320,5,13,0,0,319,318,1,0,0,0,319,320,1,0,0,0,320,322,
  	1,0,0,0,321,317,1,0,0,0,321,322,1,0,0,0,322,323,1,0,0,0,323,324,5,11,
  	0,0,324,35,1,0,0,0,325,328,3,18,9,0,326,327,5,99,0,0,327,329,3,18,9,0,
  	328,326,1,0,0,0,328,329,1,0,0,0,329,37,1,0,0,0,330,334,3,40,20,0,331,
  	334,3,90,45,0,332,334,3,88,44,0,333,330,1,0,0,0,333,331,1,0,0,0,333,332,
  	1,0,0,0,334,39,1,0,0,0,335,336,3,42,21,0,336,337,3,170,85,0,337,41,1,
  	0,0,0,338,339,3,54,27,0,339,344,3,44,22,0,340,341,5,13,0,0,341,343,3,
  	44,22,0,342,340,1,0,0,0,343,346,1,0,0,0,344,342,1,0,0,0,344,345,1,0,0,
  	0,345,43,1,0,0,0,346,344,1,0,0,0,347,350,3,134,67,0,348,349,5,14,0,0,
  	349,351,3,130,65,0,350,348,1,0,0,0,350,351,1,0,0,0,351,45,1,0,0,0,352,
  	353,5,12,0,0,353,47,1,0,0,0,354,355,4,24,0,0,355,356,3,128,64,0,356,357,
  	3,170,85,0,357,49,1,0,0,0,358,359,5,94,0,0,359,360,5,7,0,0,360,361,3,
  	128,64,0,361,362,5,8,0,0,362,365,3,4,2,0,363,364,5,78,0,0,364,366,3,4,
  	2,0,365,363,1,0,0,0,365,366,1,0,0,0,366,51,1,0,0,0,367,368,5,74,0,0,368,
  	369,3,4,2,0,369,370,5,88,0,0,370,371,5,7,0,0,371,372,3,128,64,0,372,373,
  	5,8,0,0,373,374,3,170,85,0,374,423,1,0,0,0,375,376,5,88,0,0,376,377,5,
  	7,0,0,377,378,3,128,64,0,378,379,5,8,0,0,379,380,3,4,2,0,380,423,1,0,
  	0,0,381,382,5,86,0,0,382,385,5,7,0,0,383,386,3,128,64,0,384,386,3,42,
  	21,0,385,383,1,0,0,0,385,384,1,0,0,0,385,386,1,0,0,0,386,387,1,0,0,0,
  	387,389,5,12,0,0,388,390,3,128,64,0,389,388,1,0,0,0,389,390,1,0,0,0,390,
  	391,1,0,0,0,391,393,5,12,0,0,392,394,3,128,64,0,393,392,1,0,0,0,393,394,
  	1,0,0,0,394,395,1,0,0,0,395,396,5,8,0,0,396,423,3,4,2,0,397,398,5,86,
  	0,0,398,401,5,7,0,0,399,402,3,130,65,0,400,402,3,42,21,0,401,399,1,0,
  	0,0,401,400,1,0,0,0,402,403,1,0,0,0,403,404,5,97,0,0,404,405,3,128,64,
  	0,405,406,5,8,0,0,406,407,3,4,2,0,407,423,1,0,0,0,408,410,5,86,0,0,409,
  	411,5,112,0,0,410,409,1,0,0,0,410,411,1,0,0,0,411,412,1,0,0,0,412,415,
  	5,7,0,0,413,416,3,130,65,0,414,416,3,42,21,0,415,413,1,0,0,0,415,414,
  	1,0,0,0,416,417,1,0,0,0,417,418,5,101,0,0,418,419,3,128,64,0,419,420,
  	5,8,0,0,420,421,3,4,2,0,421,423,1,0,0,0,422,367,1,0,0,0,422,375,1,0,0,
  	0,422,381,1,0,0,0,422,397,1,0,0,0,422,408,1,0,0,0,423,53,1,0,0,0,424,
  	428,5,80,0,0,425,428,3,168,84,0,426,428,5,108,0,0,427,424,1,0,0,0,427,
  	425,1,0,0,0,427,426,1,0,0,0,428,55,1,0,0,0,429,432,5,85,0,0,430,431,4,
  	28,1,0,431,433,3,162,81,0,432,430,1,0,0,0,432,433,1,0,0,0,433,434,1,0,
  	0,0,434,435,3,170,85,0,435,57,1,0,0,0,436,439,5,73,0,0,437,438,4,29,2,
  	0,438,440,3,162,81,0,439,437,1,0,0,0,439,440,1,0,0,0,440,441,1,0,0,0,
  	441,442,3,170,85,0,442,59,1,0,0,0,443,446,5,83,0,0,444,445,4,30,3,0,445,
  	447,3,128,64,0,446,444,1,0,0,0,446,447,1,0,0,0,447,448,1,0,0,0,448,449,
  	3,170,85,0,449,61,1,0,0,0,450,453,7,1,0,0,451,452,4,31,4,0,452,454,3,
  	128,64,0,453,451,1,0,0,0,453,454,1,0,0,0,454,455,1,0,0,0,455,456,3,170,
  	85,0,456,63,1,0,0,0,457,458,5,92,0,0,458,459,5,7,0,0,459,460,3,128,64,
  	0,460,461,5,8,0,0,461,462,3,4,2,0,462,65,1,0,0,0,463,464,5,87,0,0,464,
  	465,5,7,0,0,465,466,3,128,64,0,466,467,5,8,0,0,467,468,3,68,34,0,468,
  	67,1,0,0,0,469,471,5,9,0,0,470,472,3,70,35,0,471,470,1,0,0,0,471,472,
  	1,0,0,0,472,477,1,0,0,0,473,475,3,74,37,0,474,476,3,70,35,0,475,474,1,
  	0,0,0,475,476,1,0,0,0,476,478,1,0,0,0,477,473,1,0,0,0,477,478,1,0,0,0,
  	478,479,1,0,0,0,479,480,5,11,0,0,480,69,1,0,0,0,481,483,3,72,36,0,482,
  	481,1,0,0,0,483,484,1,0,0,0,484,482,1,0,0,0,484,485,1,0,0,0,485,71,1,
  	0,0,0,486,487,5,77,0,0,487,488,3,128,64,0,488,490,5,17,0,0,489,491,3,
  	8,4,0,490,489,1,0,0,0,490,491,1,0,0,0,491,73,1,0,0,0,492,493,5,93,0,0,
  	493,495,5,17,0,0,494,496,3,8,4,0,495,494,1,0,0,0,495,496,1,0,0,0,496,
  	75,1,0,0,0,497,498,3,162,81,0,498,499,5,17,0,0,499,500,3,4,2,0,500,77,
  	1,0,0,0,501,502,5,95,0,0,502,503,4,39,5,0,503,504,3,128,64,0,504,505,
  	3,170,85,0,505,79,1,0,0,0,506,507,5,98,0,0,507,513,3,6,3,0,508,510,3,
  	82,41,0,509,511,3,84,42,0,510,509,1,0,0,0,510,511,1,0,0,0,511,514,1,0,
  	0,0,512,514,3,84,42,0,513,508,1,0,0,0,513,512,1,0,0,0,514,81,1,0,0,0,
  	515,521,5,81,0,0,516,518,5,7,0,0,517,519,3,134,67,0,518,517,1,0,0,0,518,
  	519,1,0,0,0,519,520,1,0,0,0,520,522,5,8,0,0,521,516,1,0,0,0,521,522,1,
  	0,0,0,522,523,1,0,0,0,523,524,3,6,3,0,524,83,1,0,0,0,525,526,5,82,0,0,
  	526,527,3,6,3,0,527,85,1,0,0,0,528,529,5,89,0,0,529,530,3,170,85,0,530,
  	87,1,0,0,0,531,533,5,111,0,0,532,531,1,0,0,0,532,533,1,0,0,0,533,534,
  	1,0,0,0,534,536,5,90,0,0,535,537,5,26,0,0,536,535,1,0,0,0,536,537,1,0,
  	0,0,537,538,1,0,0,0,538,539,3,162,81,0,539,541,5,7,0,0,540,542,3,104,
  	52,0,541,540,1,0,0,0,541,542,1,0,0,0,542,543,1,0,0,0,543,544,5,8,0,0,
  	544,545,3,110,55,0,545,89,1,0,0,0,546,547,5,104,0,0,547,548,3,162,81,
  	0,548,549,3,92,46,0,549,91,1,0,0,0,550,551,5,106,0,0,551,553,3,130,65,
  	0,552,550,1,0,0,0,552,553,1,0,0,0,553,554,1,0,0,0,554,558,5,9,0,0,555,
  	557,3,94,47,0,556,555,1,0,0,0,557,560,1,0,0,0,558,556,1,0,0,0,558,559,
  	1,0,0,0,559,561,1,0,0,0,560,558,1,0,0,0,561,562,5,11,0,0,562,93,1,0,0,
  	0,563,567,5,121,0,0,564,565,4,47,6,0,565,567,3,162,81,0,566,563,1,0,0,
  	0,566,564,1,0,0,0,566,567,1,0,0,0,567,568,1,0,0,0,568,583,3,96,48,0,569,
  	573,5,121,0,0,570,571,4,47,7,0,571,573,3,162,81,0,572,569,1,0,0,0,572,
  	570,1,0,0,0,572,573,1,0,0,0,573,574,1,0,0,0,574,583,3,98,49,0,575,579,
  	5,121,0,0,576,577,4,47,8,0,577,579,3,162,81,0,578,575,1,0,0,0,578,576,
  	1,0,0,0,579,580,1,0,0,0,580,583,3,6,3,0,581,583,3,46,23,0,582,566,1,0,
  	0,0,582,572,1,0,0,0,582,578,1,0,0,0,582,581,1,0,0,0,583,95,1,0,0,0,584,
  	585,5,111,0,0,585,587,4,48,9,0,586,584,1,0,0,0,586,587,1,0,0,0,587,589,
  	1,0,0,0,588,590,5,26,0,0,589,588,1,0,0,0,589,590,1,0,0,0,590,591,1,0,
  	0,0,591,592,3,100,50,0,592,594,5,7,0,0,593,595,3,104,52,0,594,593,1,0,
  	0,0,594,595,1,0,0,0,595,596,1,0,0,0,596,597,5,8,0,0,597,598,3,110,55,
  	0,598,619,1,0,0,0,599,601,5,26,0,0,600,599,1,0,0,0,600,601,1,0,0,0,601,
  	602,1,0,0,0,602,603,3,156,78,0,603,604,5,7,0,0,604,605,5,8,0,0,605,606,
  	3,110,55,0,606,619,1,0,0,0,607,609,5,26,0,0,608,607,1,0,0,0,608,609,1,
  	0,0,0,609,610,1,0,0,0,610,611,3,158,79,0,611,613,5,7,0,0,612,614,3,104,
  	52,0,613,612,1,0,0,0,613,614,1,0,0,0,614,615,1,0,0,0,615,616,5,8,0,0,
  	616,617,3,110,55,0,617,619,1,0,0,0,618,586,1,0,0,0,618,600,1,0,0,0,618,
  	608,1,0,0,0,619,97,1,0,0,0,620,622,3,100,50,0,621,623,3,132,66,0,622,
  	621,1,0,0,0,622,623,1,0,0,0,623,99,1,0,0,0,624,627,3,122,61,0,625,627,
  	3,102,51,0,626,624,1,0,0,0,626,625,1,0,0,0,627,101,1,0,0,0,628,629,5,
  	31,0,0,629,630,3,160,80,0,630,103,1,0,0,0,631,636,3,106,53,0,632,633,
  	5,13,0,0,633,635,3,106,53,0,634,632,1,0,0,0,635,638,1,0,0,0,636,634,1,
  	0,0,0,636,637,1,0,0,0,637,641,1,0,0,0,638,636,1,0,0,0,639,640,5,13,0,
  	0,640,642,3,108,54,0,641,639,1,0,0,0,641,642,1,0,0,0,642,645,1,0,0,0,
  	643,645,3,108,54,0,644,631,1,0,0,0,644,643,1,0,0,0,645,105,1,0,0,0,646,
  	649,3,134,67,0,647,648,5,14,0,0,648,650,3,130,65,0,649,647,1,0,0,0,649,
  	650,1,0,0,0,650,107,1,0,0,0,651,652,5,18,0,0,652,653,3,130,65,0,653,109,
  	1,0,0,0,654,656,5,9,0,0,655,657,3,112,56,0,656,655,1,0,0,0,656,657,1,
  	0,0,0,657,658,1,0,0,0,658,659,5,11,0,0,659,111,1,0,0,0,660,662,3,2,1,
  	0,661,660,1,0,0,0,662,663,1,0,0,0,663,661,1,0,0,0,663,664,1,0,0,0,664,
  	113,1,0,0,0,665,666,5,5,0,0,666,667,3,116,58,0,667,668,5,6,0,0,668,115,
  	1,0,0,0,669,671,5,13,0,0,670,669,1,0,0,0,671,674,1,0,0,0,672,670,1,0,
  	0,0,672,673,1,0,0,0,673,676,1,0,0,0,674,672,1,0,0,0,675,677,3,118,59,
  	0,676,675,1,0,0,0,676,677,1,0,0,0,677,686,1,0,0,0,678,680,5,13,0,0,679,
  	678,1,0,0,0,680,681,1,0,0,0,681,679,1,0,0,0,681,682,1,0,0,0,682,683,1,
  	0,0,0,683,685,3,118,59,0,684,679,1,0,0,0,685,688,1,0,0,0,686,684,1,0,
  	0,0,686,687,1,0,0,0,687,692,1,0,0,0,688,686,1,0,0,0,689,691,5,13,0,0,
  	690,689,1,0,0,0,691,694,1,0,0,0,692,690,1,0,0,0,692,693,1,0,0,0,693,117,
  	1,0,0,0,694,692,1,0,0,0,695,697,5,18,0,0,696,695,1,0,0,0,696,697,1,0,
  	0,0,697,698,1,0,0,0,698,699,3,130,65,0,699,119,1,0,0,0,700,701,3,122,
  	61,0,701,702,5,17,0,0,702,703,3,130,65,0,703,740,1,0,0,0,704,705,5,5,
  	0,0,705,706,3,130,65,0,706,707,5,6,0,0,707,708,5,17,0,0,708,709,3,130,
  	65,0,709,740,1,0,0,0,710,712,5,111,0,0,711,710,1,0,0,0,711,712,1,0,0,
  	0,712,714,1,0,0,0,713,715,5,26,0,0,714,713,1,0,0,0,714,715,1,0,0,0,715,
  	716,1,0,0,0,716,717,3,122,61,0,717,719,5,7,0,0,718,720,3,104,52,0,719,
  	718,1,0,0,0,719,720,1,0,0,0,720,721,1,0,0,0,721,722,5,8,0,0,722,723,3,
  	110,55,0,723,740,1,0,0,0,724,725,3,156,78,0,725,726,5,7,0,0,726,727,5,
  	8,0,0,727,728,3,110,55,0,728,740,1,0,0,0,729,730,3,158,79,0,730,731,5,
  	7,0,0,731,732,3,106,53,0,732,733,5,8,0,0,733,734,3,110,55,0,734,740,1,
  	0,0,0,735,737,5,18,0,0,736,735,1,0,0,0,736,737,1,0,0,0,737,738,1,0,0,
  	0,738,740,3,130,65,0,739,700,1,0,0,0,739,704,1,0,0,0,739,711,1,0,0,0,
  	739,724,1,0,0,0,739,729,1,0,0,0,739,736,1,0,0,0,740,121,1,0,0,0,741,749,
  	3,160,80,0,742,749,5,123,0,0,743,749,3,152,76,0,744,745,5,5,0,0,745,746,
  	3,130,65,0,746,747,5,6,0,0,747,749,1,0,0,0,748,741,1,0,0,0,748,742,1,
  	0,0,0,748,743,1,0,0,0,748,744,1,0,0,0,749,123,1,0,0,0,750,762,5,7,0,0,
  	751,756,3,126,63,0,752,753,5,13,0,0,753,755,3,126,63,0,754,752,1,0,0,
  	0,755,758,1,0,0,0,756,754,1,0,0,0,756,757,1,0,0,0,757,760,1,0,0,0,758,
  	756,1,0,0,0,759,761,5,13,0,0,760,759,1,0,0,0,760,761,1,0,0,0,761,763,
  	1,0,0,0,762,751,1,0,0,0,762,763,1,0,0,0,763,764,1,0,0,0,764,765,5,8,0,
  	0,765,125,1,0,0,0,766,768,5,18,0,0,767,766,1,0,0,0,767,768,1,0,0,0,768,
  	771,1,0,0,0,769,772,3,130,65,0,770,772,3,162,81,0,771,769,1,0,0,0,771,
  	770,1,0,0,0,772,127,1,0,0,0,773,778,3,130,65,0,774,775,5,13,0,0,775,777,
  	3,130,65,0,776,774,1,0,0,0,777,780,1,0,0,0,778,776,1,0,0,0,778,779,1,
  	0,0,0,779,129,1,0,0,0,780,778,1,0,0,0,781,782,6,65,-1,0,782,838,3,138,
  	69,0,783,785,5,104,0,0,784,786,3,162,81,0,785,784,1,0,0,0,785,786,1,0,
  	0,0,786,787,1,0,0,0,787,838,3,92,46,0,788,789,5,79,0,0,789,790,3,162,
  	81,0,790,791,3,124,62,0,791,838,1,0,0,0,792,793,5,79,0,0,793,794,3,130,
  	65,0,794,795,3,124,62,0,795,838,1,0,0,0,796,797,5,79,0,0,797,838,3,130,
  	65,42,798,799,5,79,0,0,799,800,5,19,0,0,800,838,3,162,81,0,801,802,5,
  	96,0,0,802,838,3,130,65,37,803,804,5,84,0,0,804,838,3,130,65,36,805,806,
  	5,76,0,0,806,838,3,130,65,35,807,808,5,20,0,0,808,838,3,130,65,34,809,
  	810,5,21,0,0,810,838,3,130,65,33,811,812,5,22,0,0,812,838,3,130,65,32,
  	813,814,5,23,0,0,814,838,3,130,65,31,815,816,5,24,0,0,816,838,3,130,65,
  	30,817,818,5,25,0,0,818,838,3,130,65,29,819,820,5,112,0,0,820,838,3,130,
  	65,28,821,822,5,110,0,0,822,823,5,7,0,0,823,824,3,130,65,0,824,825,5,
  	8,0,0,825,838,1,0,0,0,826,838,3,62,31,0,827,838,5,91,0,0,828,838,3,162,
  	81,0,829,838,5,107,0,0,830,838,3,146,73,0,831,838,3,114,57,0,832,838,
  	3,136,68,0,833,834,5,7,0,0,834,835,3,128,64,0,835,836,5,8,0,0,836,838,
  	1,0,0,0,837,781,1,0,0,0,837,783,1,0,0,0,837,788,1,0,0,0,837,792,1,0,0,
  	0,837,796,1,0,0,0,837,798,1,0,0,0,837,801,1,0,0,0,837,803,1,0,0,0,837,
  	805,1,0,0,0,837,807,1,0,0,0,837,809,1,0,0,0,837,811,1,0,0,0,837,813,1,
  	0,0,0,837,815,1,0,0,0,837,817,1,0,0,0,837,819,1,0,0,0,837,821,1,0,0,0,
  	837,826,1,0,0,0,837,827,1,0,0,0,837,828,1,0,0,0,837,829,1,0,0,0,837,830,
  	1,0,0,0,837,831,1,0,0,0,837,832,1,0,0,0,837,833,1,0,0,0,838,926,1,0,0,
  	0,839,840,10,47,0,0,840,841,5,16,0,0,841,925,3,130,65,48,842,843,10,27,
  	0,0,843,844,5,29,0,0,844,925,3,130,65,27,845,846,10,26,0,0,846,847,7,
  	2,0,0,847,925,3,130,65,27,848,849,10,25,0,0,849,850,7,3,0,0,850,925,3,
  	130,65,26,851,852,10,24,0,0,852,853,5,30,0,0,853,925,3,130,65,25,854,
  	855,10,23,0,0,855,856,7,4,0,0,856,925,3,130,65,24,857,858,10,22,0,0,858,
  	859,7,5,0,0,859,925,3,130,65,23,860,861,10,21,0,0,861,862,5,75,0,0,862,
  	925,3,130,65,22,863,864,10,20,0,0,864,865,5,97,0,0,865,925,3,130,65,21,
  	866,867,10,19,0,0,867,868,7,6,0,0,868,925,3,130,65,20,869,870,10,18,0,
  	0,870,871,5,43,0,0,871,925,3,130,65,19,872,873,10,17,0,0,873,874,5,44,
  	0,0,874,925,3,130,65,18,875,876,10,16,0,0,876,877,5,45,0,0,877,925,3,
  	130,65,17,878,879,10,15,0,0,879,880,5,46,0,0,880,925,3,130,65,16,881,
  	882,10,14,0,0,882,883,5,47,0,0,883,925,3,130,65,15,884,885,10,13,0,0,
  	885,886,5,15,0,0,886,887,3,130,65,0,887,888,5,17,0,0,888,889,3,130,65,
  	14,889,925,1,0,0,0,890,891,10,12,0,0,891,892,5,14,0,0,892,925,3,130,65,
  	12,893,894,10,11,0,0,894,895,3,144,72,0,895,896,3,130,65,11,896,925,1,
  	0,0,0,897,899,10,46,0,0,898,900,5,16,0,0,899,898,1,0,0,0,899,900,1,0,
  	0,0,900,901,1,0,0,0,901,902,5,5,0,0,902,903,3,128,64,0,903,904,5,6,0,
  	0,904,925,1,0,0,0,905,907,10,45,0,0,906,908,5,15,0,0,907,906,1,0,0,0,
  	907,908,1,0,0,0,908,909,1,0,0,0,909,911,5,19,0,0,910,912,5,31,0,0,911,
  	910,1,0,0,0,911,912,1,0,0,0,912,913,1,0,0,0,913,925,3,160,80,0,914,915,
  	10,41,0,0,915,925,3,124,62,0,916,917,10,39,0,0,917,918,4,65,32,0,918,
  	925,5,20,0,0,919,920,10,38,0,0,920,921,4,65,34,0,921,925,5,21,0,0,922,
  	923,10,9,0,0,923,925,3,148,74,0,924,839,1,0,0,0,924,842,1,0,0,0,924,845,
  	1,0,0,0,924,848,1,0,0,0,924,851,1,0,0,0,924,854,1,0,0,0,924,857,1,0,0,
  	0,924,860,1,0,0,0,924,863,1,0,0,0,924,866,1,0,0,0,924,869,1,0,0,0,924,
  	872,1,0,0,0,924,875,1,0,0,0,924,878,1,0,0,0,924,881,1,0,0,0,924,884,1,
  	0,0,0,924,890,1,0,0,0,924,893,1,0,0,0,924,897,1,0,0,0,924,905,1,0,0,0,
  	924,914,1,0,0,0,924,916,1,0,0,0,924,919,1,0,0,0,924,922,1,0,0,0,925,928,
  	1,0,0,0,926,924,1,0,0,0,926,927,1,0,0,0,927,131,1,0,0,0,928,926,1,0,0,
  	0,929,930,5,14,0,0,930,931,3,130,65,0,931,133,1,0,0,0,932,937,3,162,81,
  	0,933,937,3,166,83,0,934,937,3,114,57,0,935,937,3,136,68,0,936,932,1,
  	0,0,0,936,933,1,0,0,0,936,934,1,0,0,0,936,935,1,0,0,0,937,135,1,0,0,0,
  	938,950,5,9,0,0,939,944,3,120,60,0,940,941,5,13,0,0,941,943,3,120,60,
  	0,942,940,1,0,0,0,943,946,1,0,0,0,944,942,1,0,0,0,944,945,1,0,0,0,945,
  	948,1,0,0,0,946,944,1,0,0,0,947,949,5,13,0,0,948,947,1,0,0,0,948,949,
  	1,0,0,0,949,951,1,0,0,0,950,939,1,0,0,0,950,951,1,0,0,0,951,952,1,0,0,
  	0,952,953,5,11,0,0,953,137,1,0,0,0,954,976,3,88,44,0,955,957,5,111,0,
  	0,956,955,1,0,0,0,956,957,1,0,0,0,957,958,1,0,0,0,958,960,5,90,0,0,959,
  	961,5,26,0,0,960,959,1,0,0,0,960,961,1,0,0,0,961,962,1,0,0,0,962,964,
  	5,7,0,0,963,965,3,104,52,0,964,963,1,0,0,0,964,965,1,0,0,0,965,966,1,
  	0,0,0,966,967,5,8,0,0,967,976,3,110,55,0,968,970,5,111,0,0,969,968,1,
  	0,0,0,969,970,1,0,0,0,970,971,1,0,0,0,971,972,3,140,70,0,972,973,5,61,
  	0,0,973,974,3,142,71,0,974,976,1,0,0,0,975,954,1,0,0,0,975,956,1,0,0,
  	0,975,969,1,0,0,0,976,139,1,0,0,0,977,984,3,122,61,0,978,980,5,7,0,0,
  	979,981,3,104,52,0,980,979,1,0,0,0,980,981,1,0,0,0,981,982,1,0,0,0,982,
  	984,5,8,0,0,983,977,1,0,0,0,983,978,1,0,0,0,984,141,1,0,0,0,985,988,3,
  	130,65,0,986,988,3,110,55,0,987,985,1,0,0,0,987,986,1,0,0,0,988,143,1,
  	0,0,0,989,990,7,7,0,0,990,145,1,0,0,0,991,999,5,62,0,0,992,999,5,63,0,
  	0,993,999,5,123,0,0,994,999,3,148,74,0,995,999,5,4,0,0,996,999,3,152,
  	76,0,997,999,3,154,77,0,998,991,1,0,0,0,998,992,1,0,0,0,998,993,1,0,0,
  	0,998,994,1,0,0,0,998,995,1,0,0,0,998,996,1,0,0,0,998,997,1,0,0,0,999,
  	147,1,0,0,0,1000,1004,5,124,0,0,1001,1003,3,150,75,0,1002,1001,1,0,0,
  	0,1003,1006,1,0,0,0,1004,1002,1,0,0,0,1004,1005,1,0,0,0,1005,1007,1,0,
  	0,0,1006,1004,1,0,0,0,1007,1008,5,124,0,0,1008,149,1,0,0,0,1009,1015,
  	5,131,0,0,1010,1011,5,130,0,0,1011,1012,3,130,65,0,1012,1013,5,10,0,0,
  	1013,1015,1,0,0,0,1014,1009,1,0,0,0,1014,1010,1,0,0,0,1015,151,1,0,0,
  	0,1016,1017,7,8,0,0,1017,153,1,0,0,0,1018,1019,7,9,0,0,1019,155,1,0,0,
  	0,1020,1021,4,78,36,0,1021,1022,3,162,81,0,1022,1023,3,100,50,0,1023,
  	157,1,0,0,0,1024,1025,4,79,37,0,1025,1026,3,162,81,0,1026,1027,3,100,
  	50,0,1027,159,1,0,0,0,1028,1031,3,162,81,0,1029,1031,3,164,82,0,1030,
  	1028,1,0,0,0,1030,1029,1,0,0,0,1031,161,1,0,0,0,1032,1033,7,10,0,0,1033,
  	163,1,0,0,0,1034,1038,3,166,83,0,1035,1038,5,62,0,0,1036,1038,5,63,0,
  	0,1037,1034,1,0,0,0,1037,1035,1,0,0,0,1037,1036,1,0,0,0,1038,165,1,0,
  	0,0,1039,1088,5,73,0,0,1040,1088,5,74,0,0,1041,1088,5,75,0,0,1042,1088,
  	5,76,0,0,1043,1088,5,77,0,0,1044,1088,5,78,0,0,1045,1088,5,79,0,0,1046,
  	1088,5,80,0,0,1047,1088,5,81,0,0,1048,1088,5,82,0,0,1049,1088,5,83,0,
  	0,1050,1088,5,84,0,0,1051,1088,5,85,0,0,1052,1088,5,86,0,0,1053,1088,
  	5,87,0,0,1054,1088,5,88,0,0,1055,1088,5,89,0,0,1056,1088,5,90,0,0,1057,
  	1088,5,91,0,0,1058,1088,5,92,0,0,1059,1088,5,93,0,0,1060,1088,5,94,0,
  	0,1061,1088,5,95,0,0,1062,1088,5,96,0,0,1063,1088,5,97,0,0,1064,1088,
  	5,98,0,0,1065,1088,5,104,0,0,1066,1088,5,105,0,0,1067,1088,5,106,0,0,
  	1068,1088,5,107,0,0,1069,1088,5,108,0,0,1070,1088,5,109,0,0,1071,1088,
  	5,110,0,0,1072,1088,5,113,0,0,1073,1088,3,168,84,0,1074,1088,5,116,0,
  	0,1075,1088,5,117,0,0,1076,1088,5,118,0,0,1077,1088,5,119,0,0,1078,1088,
  	5,120,0,0,1079,1088,5,121,0,0,1080,1088,5,102,0,0,1081,1088,5,103,0,0,
  	1082,1088,5,111,0,0,1083,1088,5,112,0,0,1084,1088,5,100,0,0,1085,1088,
  	5,99,0,0,1086,1088,5,101,0,0,1087,1039,1,0,0,0,1087,1040,1,0,0,0,1087,
  	1041,1,0,0,0,1087,1042,1,0,0,0,1087,1043,1,0,0,0,1087,1044,1,0,0,0,1087,
  	1045,1,0,0,0,1087,1046,1,0,0,0,1087,1047,1,0,0,0,1087,1048,1,0,0,0,1087,
  	1049,1,0,0,0,1087,1050,1,0,0,0,1087,1051,1,0,0,0,1087,1052,1,0,0,0,1087,
  	1053,1,0,0,0,1087,1054,1,0,0,0,1087,1055,1,0,0,0,1087,1056,1,0,0,0,1087,
  	1057,1,0,0,0,1087,1058,1,0,0,0,1087,1059,1,0,0,0,1087,1060,1,0,0,0,1087,
  	1061,1,0,0,0,1087,1062,1,0,0,0,1087,1063,1,0,0,0,1087,1064,1,0,0,0,1087,
  	1065,1,0,0,0,1087,1066,1,0,0,0,1087,1067,1,0,0,0,1087,1068,1,0,0,0,1087,
  	1069,1,0,0,0,1087,1070,1,0,0,0,1087,1071,1,0,0,0,1087,1072,1,0,0,0,1087,
  	1073,1,0,0,0,1087,1074,1,0,0,0,1087,1075,1,0,0,0,1087,1076,1,0,0,0,1087,
  	1077,1,0,0,0,1087,1078,1,0,0,0,1087,1079,1,0,0,0,1087,1080,1,0,0,0,1087,
  	1081,1,0,0,0,1087,1082,1,0,0,0,1087,1083,1,0,0,0,1087,1084,1,0,0,0,1087,
  	1085,1,0,0,0,1087,1086,1,0,0,0,1088,167,1,0,0,0,1089,1090,7,11,0,0,1090,
  	169,1,0,0,0,1091,1096,5,12,0,0,1092,1096,5,0,0,1,1093,1096,4,85,38,0,
  	1094,1096,4,85,39,0,1095,1091,1,0,0,0,1095,1092,1,0,0,0,1095,1093,1,0,
  	0,0,1095,1094,1,0,0,0,1096,171,1,0,0,0,119,173,176,202,206,213,219,223,
  	230,238,243,245,252,256,265,269,277,281,285,294,302,306,314,319,321,328,
  	333,344,350,365,385,389,393,401,410,415,422,427,432,439,446,453,471,475,
  	477,484,490,495,510,513,518,521,532,536,541,552,558,566,572,578,582,586,
  	589,594,600,608,613,618,622,626,636,641,644,649,656,663,672,676,681,686,
  	692,696,711,714,719,736,739,748,756,760,762,767,771,778,785,837,899,907,
  	911,924,926,936,944,948,950,956,960,964,969,975,980,983,987,998,1004,
  	1014,1030,1037,1087,1095
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  javascriptparser_cppParserStaticData = std::move(staticData);
}

}

JavaScriptParser_cpp::JavaScriptParser_cpp(TokenStream *input) : JavaScriptParser_cpp(input, antlr4::atn::ParserATNSimulatorOptions()) {}

JavaScriptParser_cpp::JavaScriptParser_cpp(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : JavaScriptParserBase(input) {
  JavaScriptParser_cpp::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *javascriptparser_cppParserStaticData->atn, javascriptparser_cppParserStaticData->decisionToDFA, javascriptparser_cppParserStaticData->sharedContextCache, options);
}

JavaScriptParser_cpp::~JavaScriptParser_cpp() {
  delete _interpreter;
}

const atn::ATN& JavaScriptParser_cpp::getATN() const {
  return *javascriptparser_cppParserStaticData->atn;
}

std::string JavaScriptParser_cpp::getGrammarFileName() const {
  return "JavaScriptParser_cpp.g4";
}

const std::vector<std::string>& JavaScriptParser_cpp::getRuleNames() const {
  return javascriptparser_cppParserStaticData->ruleNames;
}

const dfa::Vocabulary& JavaScriptParser_cpp::getVocabulary() const {
  return javascriptparser_cppParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView JavaScriptParser_cpp::getSerializedATN() const {
  return javascriptparser_cppParserStaticData->serializedATN;
}


//----------------- ProgramContext ------------------------------------------------------------------

JavaScriptParser_cpp::ProgramContext::ProgramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::ProgramContext::EOF() {
  return getToken(JavaScriptParser_cpp::EOF, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::ProgramContext::HashBangLine() {
  return getToken(JavaScriptParser_cpp::HashBangLine, 0);
}

JavaScriptParser_cpp::SourceElementsContext* JavaScriptParser_cpp::ProgramContext::sourceElements() {
  return getRuleContext<JavaScriptParser_cpp::SourceElementsContext>(0);
}


size_t JavaScriptParser_cpp::ProgramContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleProgram;
}

void JavaScriptParser_cpp::ProgramContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProgram(this);
}

void JavaScriptParser_cpp::ProgramContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProgram(this);
}

JavaScriptParser_cpp::ProgramContext* JavaScriptParser_cpp::program() {
  ProgramContext *_localctx = _tracker.createInstance<ProgramContext>(_ctx, getState());
  enterRule(_localctx, 0, JavaScriptParser_cpp::RuleProgram);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(173);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 0, _ctx)) {
    case 1: {
      setState(172);
      match(JavaScriptParser_cpp::HashBangLine);
      break;
    }

    default:
      break;
    }
    setState(176);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx)) {
    case 1: {
      setState(175);
      sourceElements();
      break;
    }

    default:
      break;
    }
    setState(178);
    match(JavaScriptParser_cpp::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SourceElementContext ------------------------------------------------------------------

JavaScriptParser_cpp::SourceElementContext::SourceElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser_cpp::StatementContext* JavaScriptParser_cpp::SourceElementContext::statement() {
  return getRuleContext<JavaScriptParser_cpp::StatementContext>(0);
}


size_t JavaScriptParser_cpp::SourceElementContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleSourceElement;
}

void JavaScriptParser_cpp::SourceElementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSourceElement(this);
}

void JavaScriptParser_cpp::SourceElementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSourceElement(this);
}

JavaScriptParser_cpp::SourceElementContext* JavaScriptParser_cpp::sourceElement() {
  SourceElementContext *_localctx = _tracker.createInstance<SourceElementContext>(_ctx, getState());
  enterRule(_localctx, 2, JavaScriptParser_cpp::RuleSourceElement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(180);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

JavaScriptParser_cpp::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser_cpp::BlockContext* JavaScriptParser_cpp::StatementContext::block() {
  return getRuleContext<JavaScriptParser_cpp::BlockContext>(0);
}

JavaScriptParser_cpp::VariableStatementContext* JavaScriptParser_cpp::StatementContext::variableStatement() {
  return getRuleContext<JavaScriptParser_cpp::VariableStatementContext>(0);
}

JavaScriptParser_cpp::ImportStatementContext* JavaScriptParser_cpp::StatementContext::importStatement() {
  return getRuleContext<JavaScriptParser_cpp::ImportStatementContext>(0);
}

JavaScriptParser_cpp::ExportStatementContext* JavaScriptParser_cpp::StatementContext::exportStatement() {
  return getRuleContext<JavaScriptParser_cpp::ExportStatementContext>(0);
}

JavaScriptParser_cpp::EmptyStatement_Context* JavaScriptParser_cpp::StatementContext::emptyStatement_() {
  return getRuleContext<JavaScriptParser_cpp::EmptyStatement_Context>(0);
}

JavaScriptParser_cpp::ClassDeclarationContext* JavaScriptParser_cpp::StatementContext::classDeclaration() {
  return getRuleContext<JavaScriptParser_cpp::ClassDeclarationContext>(0);
}

JavaScriptParser_cpp::FunctionDeclarationContext* JavaScriptParser_cpp::StatementContext::functionDeclaration() {
  return getRuleContext<JavaScriptParser_cpp::FunctionDeclarationContext>(0);
}

JavaScriptParser_cpp::ExpressionStatementContext* JavaScriptParser_cpp::StatementContext::expressionStatement() {
  return getRuleContext<JavaScriptParser_cpp::ExpressionStatementContext>(0);
}

JavaScriptParser_cpp::IfStatementContext* JavaScriptParser_cpp::StatementContext::ifStatement() {
  return getRuleContext<JavaScriptParser_cpp::IfStatementContext>(0);
}

JavaScriptParser_cpp::IterationStatementContext* JavaScriptParser_cpp::StatementContext::iterationStatement() {
  return getRuleContext<JavaScriptParser_cpp::IterationStatementContext>(0);
}

JavaScriptParser_cpp::ContinueStatementContext* JavaScriptParser_cpp::StatementContext::continueStatement() {
  return getRuleContext<JavaScriptParser_cpp::ContinueStatementContext>(0);
}

JavaScriptParser_cpp::BreakStatementContext* JavaScriptParser_cpp::StatementContext::breakStatement() {
  return getRuleContext<JavaScriptParser_cpp::BreakStatementContext>(0);
}

JavaScriptParser_cpp::ReturnStatementContext* JavaScriptParser_cpp::StatementContext::returnStatement() {
  return getRuleContext<JavaScriptParser_cpp::ReturnStatementContext>(0);
}

JavaScriptParser_cpp::YieldStatementContext* JavaScriptParser_cpp::StatementContext::yieldStatement() {
  return getRuleContext<JavaScriptParser_cpp::YieldStatementContext>(0);
}

JavaScriptParser_cpp::WithStatementContext* JavaScriptParser_cpp::StatementContext::withStatement() {
  return getRuleContext<JavaScriptParser_cpp::WithStatementContext>(0);
}

JavaScriptParser_cpp::LabelledStatementContext* JavaScriptParser_cpp::StatementContext::labelledStatement() {
  return getRuleContext<JavaScriptParser_cpp::LabelledStatementContext>(0);
}

JavaScriptParser_cpp::SwitchStatementContext* JavaScriptParser_cpp::StatementContext::switchStatement() {
  return getRuleContext<JavaScriptParser_cpp::SwitchStatementContext>(0);
}

JavaScriptParser_cpp::ThrowStatementContext* JavaScriptParser_cpp::StatementContext::throwStatement() {
  return getRuleContext<JavaScriptParser_cpp::ThrowStatementContext>(0);
}

JavaScriptParser_cpp::TryStatementContext* JavaScriptParser_cpp::StatementContext::tryStatement() {
  return getRuleContext<JavaScriptParser_cpp::TryStatementContext>(0);
}

JavaScriptParser_cpp::DebuggerStatementContext* JavaScriptParser_cpp::StatementContext::debuggerStatement() {
  return getRuleContext<JavaScriptParser_cpp::DebuggerStatementContext>(0);
}


size_t JavaScriptParser_cpp::StatementContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleStatement;
}

void JavaScriptParser_cpp::StatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatement(this);
}

void JavaScriptParser_cpp::StatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatement(this);
}

JavaScriptParser_cpp::StatementContext* JavaScriptParser_cpp::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 4, JavaScriptParser_cpp::RuleStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(202);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(182);
      block();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(183);
      variableStatement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(184);
      importStatement();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(185);
      exportStatement();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(186);
      emptyStatement_();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(187);
      classDeclaration();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(188);
      functionDeclaration();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(189);
      expressionStatement();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(190);
      ifStatement();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(191);
      iterationStatement();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(192);
      continueStatement();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(193);
      breakStatement();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(194);
      returnStatement();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(195);
      yieldStatement();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(196);
      withStatement();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(197);
      labelledStatement();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(198);
      switchStatement();
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(199);
      throwStatement();
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(200);
      tryStatement();
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(201);
      debuggerStatement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockContext ------------------------------------------------------------------

JavaScriptParser_cpp::BlockContext::BlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::BlockContext::OpenBrace() {
  return getToken(JavaScriptParser_cpp::OpenBrace, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::BlockContext::CloseBrace() {
  return getToken(JavaScriptParser_cpp::CloseBrace, 0);
}

JavaScriptParser_cpp::StatementListContext* JavaScriptParser_cpp::BlockContext::statementList() {
  return getRuleContext<JavaScriptParser_cpp::StatementListContext>(0);
}


size_t JavaScriptParser_cpp::BlockContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleBlock;
}

void JavaScriptParser_cpp::BlockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlock(this);
}

void JavaScriptParser_cpp::BlockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlock(this);
}

JavaScriptParser_cpp::BlockContext* JavaScriptParser_cpp::block() {
  BlockContext *_localctx = _tracker.createInstance<BlockContext>(_ctx, getState());
  enterRule(_localctx, 6, JavaScriptParser_cpp::RuleBlock);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(204);
    match(JavaScriptParser_cpp::OpenBrace);
    setState(206);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx)) {
    case 1: {
      setState(205);
      statementList();
      break;
    }

    default:
      break;
    }
    setState(208);
    match(JavaScriptParser_cpp::CloseBrace);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementListContext ------------------------------------------------------------------

JavaScriptParser_cpp::StatementListContext::StatementListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaScriptParser_cpp::StatementContext *> JavaScriptParser_cpp::StatementListContext::statement() {
  return getRuleContexts<JavaScriptParser_cpp::StatementContext>();
}

JavaScriptParser_cpp::StatementContext* JavaScriptParser_cpp::StatementListContext::statement(size_t i) {
  return getRuleContext<JavaScriptParser_cpp::StatementContext>(i);
}


size_t JavaScriptParser_cpp::StatementListContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleStatementList;
}

void JavaScriptParser_cpp::StatementListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatementList(this);
}

void JavaScriptParser_cpp::StatementListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatementList(this);
}

JavaScriptParser_cpp::StatementListContext* JavaScriptParser_cpp::statementList() {
  StatementListContext *_localctx = _tracker.createInstance<StatementListContext>(_ctx, getState());
  enterRule(_localctx, 8, JavaScriptParser_cpp::RuleStatementList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(211); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(210);
              statement();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(213); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportStatementContext ------------------------------------------------------------------

JavaScriptParser_cpp::ImportStatementContext::ImportStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::ImportStatementContext::Import() {
  return getToken(JavaScriptParser_cpp::Import, 0);
}

JavaScriptParser_cpp::ImportFromBlockContext* JavaScriptParser_cpp::ImportStatementContext::importFromBlock() {
  return getRuleContext<JavaScriptParser_cpp::ImportFromBlockContext>(0);
}


size_t JavaScriptParser_cpp::ImportStatementContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleImportStatement;
}

void JavaScriptParser_cpp::ImportStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImportStatement(this);
}

void JavaScriptParser_cpp::ImportStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImportStatement(this);
}

JavaScriptParser_cpp::ImportStatementContext* JavaScriptParser_cpp::importStatement() {
  ImportStatementContext *_localctx = _tracker.createInstance<ImportStatementContext>(_ctx, getState());
  enterRule(_localctx, 10, JavaScriptParser_cpp::RuleImportStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(215);
    match(JavaScriptParser_cpp::Import);
    setState(216);
    importFromBlock();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportFromBlockContext ------------------------------------------------------------------

JavaScriptParser_cpp::ImportFromBlockContext::ImportFromBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser_cpp::ImportFromContext* JavaScriptParser_cpp::ImportFromBlockContext::importFrom() {
  return getRuleContext<JavaScriptParser_cpp::ImportFromContext>(0);
}

JavaScriptParser_cpp::EosContext* JavaScriptParser_cpp::ImportFromBlockContext::eos() {
  return getRuleContext<JavaScriptParser_cpp::EosContext>(0);
}

JavaScriptParser_cpp::ImportNamespaceContext* JavaScriptParser_cpp::ImportFromBlockContext::importNamespace() {
  return getRuleContext<JavaScriptParser_cpp::ImportNamespaceContext>(0);
}

JavaScriptParser_cpp::ImportModuleItemsContext* JavaScriptParser_cpp::ImportFromBlockContext::importModuleItems() {
  return getRuleContext<JavaScriptParser_cpp::ImportModuleItemsContext>(0);
}

JavaScriptParser_cpp::ImportDefaultContext* JavaScriptParser_cpp::ImportFromBlockContext::importDefault() {
  return getRuleContext<JavaScriptParser_cpp::ImportDefaultContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::ImportFromBlockContext::StringLiteral() {
  return getToken(JavaScriptParser_cpp::StringLiteral, 0);
}


size_t JavaScriptParser_cpp::ImportFromBlockContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleImportFromBlock;
}

void JavaScriptParser_cpp::ImportFromBlockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImportFromBlock(this);
}

void JavaScriptParser_cpp::ImportFromBlockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImportFromBlock(this);
}

JavaScriptParser_cpp::ImportFromBlockContext* JavaScriptParser_cpp::importFromBlock() {
  ImportFromBlockContext *_localctx = _tracker.createInstance<ImportFromBlockContext>(_ctx, getState());
  enterRule(_localctx, 12, JavaScriptParser_cpp::RuleImportFromBlock);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(230);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaScriptParser_cpp::OpenBrace:
      case JavaScriptParser_cpp::Multiply:
      case JavaScriptParser_cpp::NullLiteral:
      case JavaScriptParser_cpp::BooleanLiteral:
      case JavaScriptParser_cpp::Break:
      case JavaScriptParser_cpp::Do:
      case JavaScriptParser_cpp::Instanceof:
      case JavaScriptParser_cpp::Typeof:
      case JavaScriptParser_cpp::Case:
      case JavaScriptParser_cpp::Else:
      case JavaScriptParser_cpp::New:
      case JavaScriptParser_cpp::Var:
      case JavaScriptParser_cpp::Catch:
      case JavaScriptParser_cpp::Finally:
      case JavaScriptParser_cpp::Return:
      case JavaScriptParser_cpp::Void:
      case JavaScriptParser_cpp::Continue:
      case JavaScriptParser_cpp::For:
      case JavaScriptParser_cpp::Switch:
      case JavaScriptParser_cpp::While:
      case JavaScriptParser_cpp::Debugger:
      case JavaScriptParser_cpp::Function_:
      case JavaScriptParser_cpp::This:
      case JavaScriptParser_cpp::With:
      case JavaScriptParser_cpp::Default:
      case JavaScriptParser_cpp::If:
      case JavaScriptParser_cpp::Throw:
      case JavaScriptParser_cpp::Delete:
      case JavaScriptParser_cpp::In:
      case JavaScriptParser_cpp::Try:
      case JavaScriptParser_cpp::As:
      case JavaScriptParser_cpp::From:
      case JavaScriptParser_cpp::Of:
      case JavaScriptParser_cpp::Yield:
      case JavaScriptParser_cpp::YieldStar:
      case JavaScriptParser_cpp::Class:
      case JavaScriptParser_cpp::Enum:
      case JavaScriptParser_cpp::Extends:
      case JavaScriptParser_cpp::Super:
      case JavaScriptParser_cpp::Const:
      case JavaScriptParser_cpp::Export:
      case JavaScriptParser_cpp::Import:
      case JavaScriptParser_cpp::Async:
      case JavaScriptParser_cpp::Await:
      case JavaScriptParser_cpp::Implements:
      case JavaScriptParser_cpp::StrictLet:
      case JavaScriptParser_cpp::NonStrictLet:
      case JavaScriptParser_cpp::Private:
      case JavaScriptParser_cpp::Public:
      case JavaScriptParser_cpp::Interface:
      case JavaScriptParser_cpp::Package:
      case JavaScriptParser_cpp::Protected:
      case JavaScriptParser_cpp::Static:
      case JavaScriptParser_cpp::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(219);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx)) {
        case 1: {
          setState(218);
          importDefault();
          break;
        }

        default:
          break;
        }
        setState(223);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case JavaScriptParser_cpp::Multiply:
          case JavaScriptParser_cpp::NullLiteral:
          case JavaScriptParser_cpp::BooleanLiteral:
          case JavaScriptParser_cpp::Break:
          case JavaScriptParser_cpp::Do:
          case JavaScriptParser_cpp::Instanceof:
          case JavaScriptParser_cpp::Typeof:
          case JavaScriptParser_cpp::Case:
          case JavaScriptParser_cpp::Else:
          case JavaScriptParser_cpp::New:
          case JavaScriptParser_cpp::Var:
          case JavaScriptParser_cpp::Catch:
          case JavaScriptParser_cpp::Finally:
          case JavaScriptParser_cpp::Return:
          case JavaScriptParser_cpp::Void:
          case JavaScriptParser_cpp::Continue:
          case JavaScriptParser_cpp::For:
          case JavaScriptParser_cpp::Switch:
          case JavaScriptParser_cpp::While:
          case JavaScriptParser_cpp::Debugger:
          case JavaScriptParser_cpp::Function_:
          case JavaScriptParser_cpp::This:
          case JavaScriptParser_cpp::With:
          case JavaScriptParser_cpp::Default:
          case JavaScriptParser_cpp::If:
          case JavaScriptParser_cpp::Throw:
          case JavaScriptParser_cpp::Delete:
          case JavaScriptParser_cpp::In:
          case JavaScriptParser_cpp::Try:
          case JavaScriptParser_cpp::As:
          case JavaScriptParser_cpp::From:
          case JavaScriptParser_cpp::Of:
          case JavaScriptParser_cpp::Yield:
          case JavaScriptParser_cpp::YieldStar:
          case JavaScriptParser_cpp::Class:
          case JavaScriptParser_cpp::Enum:
          case JavaScriptParser_cpp::Extends:
          case JavaScriptParser_cpp::Super:
          case JavaScriptParser_cpp::Const:
          case JavaScriptParser_cpp::Export:
          case JavaScriptParser_cpp::Import:
          case JavaScriptParser_cpp::Async:
          case JavaScriptParser_cpp::Await:
          case JavaScriptParser_cpp::Implements:
          case JavaScriptParser_cpp::StrictLet:
          case JavaScriptParser_cpp::NonStrictLet:
          case JavaScriptParser_cpp::Private:
          case JavaScriptParser_cpp::Public:
          case JavaScriptParser_cpp::Interface:
          case JavaScriptParser_cpp::Package:
          case JavaScriptParser_cpp::Protected:
          case JavaScriptParser_cpp::Static:
          case JavaScriptParser_cpp::Identifier: {
            setState(221);
            importNamespace();
            break;
          }

          case JavaScriptParser_cpp::OpenBrace: {
            setState(222);
            importModuleItems();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(225);
        importFrom();
        setState(226);
        eos();
        break;
      }

      case JavaScriptParser_cpp::StringLiteral: {
        enterOuterAlt(_localctx, 2);
        setState(228);
        match(JavaScriptParser_cpp::StringLiteral);
        setState(229);
        eos();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportModuleItemsContext ------------------------------------------------------------------

JavaScriptParser_cpp::ImportModuleItemsContext::ImportModuleItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::ImportModuleItemsContext::OpenBrace() {
  return getToken(JavaScriptParser_cpp::OpenBrace, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::ImportModuleItemsContext::CloseBrace() {
  return getToken(JavaScriptParser_cpp::CloseBrace, 0);
}

std::vector<JavaScriptParser_cpp::ImportAliasNameContext *> JavaScriptParser_cpp::ImportModuleItemsContext::importAliasName() {
  return getRuleContexts<JavaScriptParser_cpp::ImportAliasNameContext>();
}

JavaScriptParser_cpp::ImportAliasNameContext* JavaScriptParser_cpp::ImportModuleItemsContext::importAliasName(size_t i) {
  return getRuleContext<JavaScriptParser_cpp::ImportAliasNameContext>(i);
}

std::vector<tree::TerminalNode *> JavaScriptParser_cpp::ImportModuleItemsContext::Comma() {
  return getTokens(JavaScriptParser_cpp::Comma);
}

tree::TerminalNode* JavaScriptParser_cpp::ImportModuleItemsContext::Comma(size_t i) {
  return getToken(JavaScriptParser_cpp::Comma, i);
}


size_t JavaScriptParser_cpp::ImportModuleItemsContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleImportModuleItems;
}

void JavaScriptParser_cpp::ImportModuleItemsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImportModuleItems(this);
}

void JavaScriptParser_cpp::ImportModuleItemsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImportModuleItems(this);
}

JavaScriptParser_cpp::ImportModuleItemsContext* JavaScriptParser_cpp::importModuleItems() {
  ImportModuleItemsContext *_localctx = _tracker.createInstance<ImportModuleItemsContext>(_ctx, getState());
  enterRule(_localctx, 14, JavaScriptParser_cpp::RuleImportModuleItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(232);
    match(JavaScriptParser_cpp::OpenBrace);
    setState(238);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(233);
        importAliasName();
        setState(234);
        match(JavaScriptParser_cpp::Comma); 
      }
      setState(240);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx);
    }
    setState(245);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 62) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 62)) & 4611686018427385859) != 0)) {
      setState(241);
      importAliasName();
      setState(243);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaScriptParser_cpp::Comma) {
        setState(242);
        match(JavaScriptParser_cpp::Comma);
      }
    }
    setState(247);
    match(JavaScriptParser_cpp::CloseBrace);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportAliasNameContext ------------------------------------------------------------------

JavaScriptParser_cpp::ImportAliasNameContext::ImportAliasNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser_cpp::ModuleExportNameContext* JavaScriptParser_cpp::ImportAliasNameContext::moduleExportName() {
  return getRuleContext<JavaScriptParser_cpp::ModuleExportNameContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::ImportAliasNameContext::As() {
  return getToken(JavaScriptParser_cpp::As, 0);
}

JavaScriptParser_cpp::ImportedBindingContext* JavaScriptParser_cpp::ImportAliasNameContext::importedBinding() {
  return getRuleContext<JavaScriptParser_cpp::ImportedBindingContext>(0);
}


size_t JavaScriptParser_cpp::ImportAliasNameContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleImportAliasName;
}

void JavaScriptParser_cpp::ImportAliasNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImportAliasName(this);
}

void JavaScriptParser_cpp::ImportAliasNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImportAliasName(this);
}

JavaScriptParser_cpp::ImportAliasNameContext* JavaScriptParser_cpp::importAliasName() {
  ImportAliasNameContext *_localctx = _tracker.createInstance<ImportAliasNameContext>(_ctx, getState());
  enterRule(_localctx, 16, JavaScriptParser_cpp::RuleImportAliasName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(249);
    moduleExportName();
    setState(252);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaScriptParser_cpp::As) {
      setState(250);
      match(JavaScriptParser_cpp::As);
      setState(251);
      importedBinding();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleExportNameContext ------------------------------------------------------------------

JavaScriptParser_cpp::ModuleExportNameContext::ModuleExportNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser_cpp::IdentifierNameContext* JavaScriptParser_cpp::ModuleExportNameContext::identifierName() {
  return getRuleContext<JavaScriptParser_cpp::IdentifierNameContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::ModuleExportNameContext::StringLiteral() {
  return getToken(JavaScriptParser_cpp::StringLiteral, 0);
}


size_t JavaScriptParser_cpp::ModuleExportNameContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleModuleExportName;
}

void JavaScriptParser_cpp::ModuleExportNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModuleExportName(this);
}

void JavaScriptParser_cpp::ModuleExportNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModuleExportName(this);
}

JavaScriptParser_cpp::ModuleExportNameContext* JavaScriptParser_cpp::moduleExportName() {
  ModuleExportNameContext *_localctx = _tracker.createInstance<ModuleExportNameContext>(_ctx, getState());
  enterRule(_localctx, 18, JavaScriptParser_cpp::RuleModuleExportName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(256);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaScriptParser_cpp::NullLiteral:
      case JavaScriptParser_cpp::BooleanLiteral:
      case JavaScriptParser_cpp::Break:
      case JavaScriptParser_cpp::Do:
      case JavaScriptParser_cpp::Instanceof:
      case JavaScriptParser_cpp::Typeof:
      case JavaScriptParser_cpp::Case:
      case JavaScriptParser_cpp::Else:
      case JavaScriptParser_cpp::New:
      case JavaScriptParser_cpp::Var:
      case JavaScriptParser_cpp::Catch:
      case JavaScriptParser_cpp::Finally:
      case JavaScriptParser_cpp::Return:
      case JavaScriptParser_cpp::Void:
      case JavaScriptParser_cpp::Continue:
      case JavaScriptParser_cpp::For:
      case JavaScriptParser_cpp::Switch:
      case JavaScriptParser_cpp::While:
      case JavaScriptParser_cpp::Debugger:
      case JavaScriptParser_cpp::Function_:
      case JavaScriptParser_cpp::This:
      case JavaScriptParser_cpp::With:
      case JavaScriptParser_cpp::Default:
      case JavaScriptParser_cpp::If:
      case JavaScriptParser_cpp::Throw:
      case JavaScriptParser_cpp::Delete:
      case JavaScriptParser_cpp::In:
      case JavaScriptParser_cpp::Try:
      case JavaScriptParser_cpp::As:
      case JavaScriptParser_cpp::From:
      case JavaScriptParser_cpp::Of:
      case JavaScriptParser_cpp::Yield:
      case JavaScriptParser_cpp::YieldStar:
      case JavaScriptParser_cpp::Class:
      case JavaScriptParser_cpp::Enum:
      case JavaScriptParser_cpp::Extends:
      case JavaScriptParser_cpp::Super:
      case JavaScriptParser_cpp::Const:
      case JavaScriptParser_cpp::Export:
      case JavaScriptParser_cpp::Import:
      case JavaScriptParser_cpp::Async:
      case JavaScriptParser_cpp::Await:
      case JavaScriptParser_cpp::Implements:
      case JavaScriptParser_cpp::StrictLet:
      case JavaScriptParser_cpp::NonStrictLet:
      case JavaScriptParser_cpp::Private:
      case JavaScriptParser_cpp::Public:
      case JavaScriptParser_cpp::Interface:
      case JavaScriptParser_cpp::Package:
      case JavaScriptParser_cpp::Protected:
      case JavaScriptParser_cpp::Static:
      case JavaScriptParser_cpp::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(254);
        identifierName();
        break;
      }

      case JavaScriptParser_cpp::StringLiteral: {
        enterOuterAlt(_localctx, 2);
        setState(255);
        match(JavaScriptParser_cpp::StringLiteral);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportedBindingContext ------------------------------------------------------------------

JavaScriptParser_cpp::ImportedBindingContext::ImportedBindingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::ImportedBindingContext::Identifier() {
  return getToken(JavaScriptParser_cpp::Identifier, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::ImportedBindingContext::Yield() {
  return getToken(JavaScriptParser_cpp::Yield, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::ImportedBindingContext::Await() {
  return getToken(JavaScriptParser_cpp::Await, 0);
}


size_t JavaScriptParser_cpp::ImportedBindingContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleImportedBinding;
}

void JavaScriptParser_cpp::ImportedBindingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImportedBinding(this);
}

void JavaScriptParser_cpp::ImportedBindingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImportedBinding(this);
}

JavaScriptParser_cpp::ImportedBindingContext* JavaScriptParser_cpp::importedBinding() {
  ImportedBindingContext *_localctx = _tracker.createInstance<ImportedBindingContext>(_ctx, getState());
  enterRule(_localctx, 20, JavaScriptParser_cpp::RuleImportedBinding);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(258);
    _la = _input->LA(1);
    if (!(((((_la - 102) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 102)) & 1049601) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportDefaultContext ------------------------------------------------------------------

JavaScriptParser_cpp::ImportDefaultContext::ImportDefaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser_cpp::AliasNameContext* JavaScriptParser_cpp::ImportDefaultContext::aliasName() {
  return getRuleContext<JavaScriptParser_cpp::AliasNameContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::ImportDefaultContext::Comma() {
  return getToken(JavaScriptParser_cpp::Comma, 0);
}


size_t JavaScriptParser_cpp::ImportDefaultContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleImportDefault;
}

void JavaScriptParser_cpp::ImportDefaultContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImportDefault(this);
}

void JavaScriptParser_cpp::ImportDefaultContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImportDefault(this);
}

JavaScriptParser_cpp::ImportDefaultContext* JavaScriptParser_cpp::importDefault() {
  ImportDefaultContext *_localctx = _tracker.createInstance<ImportDefaultContext>(_ctx, getState());
  enterRule(_localctx, 22, JavaScriptParser_cpp::RuleImportDefault);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(260);
    aliasName();
    setState(261);
    match(JavaScriptParser_cpp::Comma);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportNamespaceContext ------------------------------------------------------------------

JavaScriptParser_cpp::ImportNamespaceContext::ImportNamespaceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::ImportNamespaceContext::Multiply() {
  return getToken(JavaScriptParser_cpp::Multiply, 0);
}

std::vector<JavaScriptParser_cpp::IdentifierNameContext *> JavaScriptParser_cpp::ImportNamespaceContext::identifierName() {
  return getRuleContexts<JavaScriptParser_cpp::IdentifierNameContext>();
}

JavaScriptParser_cpp::IdentifierNameContext* JavaScriptParser_cpp::ImportNamespaceContext::identifierName(size_t i) {
  return getRuleContext<JavaScriptParser_cpp::IdentifierNameContext>(i);
}

tree::TerminalNode* JavaScriptParser_cpp::ImportNamespaceContext::As() {
  return getToken(JavaScriptParser_cpp::As, 0);
}


size_t JavaScriptParser_cpp::ImportNamespaceContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleImportNamespace;
}

void JavaScriptParser_cpp::ImportNamespaceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImportNamespace(this);
}

void JavaScriptParser_cpp::ImportNamespaceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImportNamespace(this);
}

JavaScriptParser_cpp::ImportNamespaceContext* JavaScriptParser_cpp::importNamespace() {
  ImportNamespaceContext *_localctx = _tracker.createInstance<ImportNamespaceContext>(_ctx, getState());
  enterRule(_localctx, 24, JavaScriptParser_cpp::RuleImportNamespace);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(265);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaScriptParser_cpp::Multiply: {
        setState(263);
        match(JavaScriptParser_cpp::Multiply);
        break;
      }

      case JavaScriptParser_cpp::NullLiteral:
      case JavaScriptParser_cpp::BooleanLiteral:
      case JavaScriptParser_cpp::Break:
      case JavaScriptParser_cpp::Do:
      case JavaScriptParser_cpp::Instanceof:
      case JavaScriptParser_cpp::Typeof:
      case JavaScriptParser_cpp::Case:
      case JavaScriptParser_cpp::Else:
      case JavaScriptParser_cpp::New:
      case JavaScriptParser_cpp::Var:
      case JavaScriptParser_cpp::Catch:
      case JavaScriptParser_cpp::Finally:
      case JavaScriptParser_cpp::Return:
      case JavaScriptParser_cpp::Void:
      case JavaScriptParser_cpp::Continue:
      case JavaScriptParser_cpp::For:
      case JavaScriptParser_cpp::Switch:
      case JavaScriptParser_cpp::While:
      case JavaScriptParser_cpp::Debugger:
      case JavaScriptParser_cpp::Function_:
      case JavaScriptParser_cpp::This:
      case JavaScriptParser_cpp::With:
      case JavaScriptParser_cpp::Default:
      case JavaScriptParser_cpp::If:
      case JavaScriptParser_cpp::Throw:
      case JavaScriptParser_cpp::Delete:
      case JavaScriptParser_cpp::In:
      case JavaScriptParser_cpp::Try:
      case JavaScriptParser_cpp::As:
      case JavaScriptParser_cpp::From:
      case JavaScriptParser_cpp::Of:
      case JavaScriptParser_cpp::Yield:
      case JavaScriptParser_cpp::YieldStar:
      case JavaScriptParser_cpp::Class:
      case JavaScriptParser_cpp::Enum:
      case JavaScriptParser_cpp::Extends:
      case JavaScriptParser_cpp::Super:
      case JavaScriptParser_cpp::Const:
      case JavaScriptParser_cpp::Export:
      case JavaScriptParser_cpp::Import:
      case JavaScriptParser_cpp::Async:
      case JavaScriptParser_cpp::Await:
      case JavaScriptParser_cpp::Implements:
      case JavaScriptParser_cpp::StrictLet:
      case JavaScriptParser_cpp::NonStrictLet:
      case JavaScriptParser_cpp::Private:
      case JavaScriptParser_cpp::Public:
      case JavaScriptParser_cpp::Interface:
      case JavaScriptParser_cpp::Package:
      case JavaScriptParser_cpp::Protected:
      case JavaScriptParser_cpp::Static:
      case JavaScriptParser_cpp::Identifier: {
        setState(264);
        identifierName();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(269);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaScriptParser_cpp::As) {
      setState(267);
      match(JavaScriptParser_cpp::As);
      setState(268);
      identifierName();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportFromContext ------------------------------------------------------------------

JavaScriptParser_cpp::ImportFromContext::ImportFromContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::ImportFromContext::From() {
  return getToken(JavaScriptParser_cpp::From, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::ImportFromContext::StringLiteral() {
  return getToken(JavaScriptParser_cpp::StringLiteral, 0);
}


size_t JavaScriptParser_cpp::ImportFromContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleImportFrom;
}

void JavaScriptParser_cpp::ImportFromContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImportFrom(this);
}

void JavaScriptParser_cpp::ImportFromContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImportFrom(this);
}

JavaScriptParser_cpp::ImportFromContext* JavaScriptParser_cpp::importFrom() {
  ImportFromContext *_localctx = _tracker.createInstance<ImportFromContext>(_ctx, getState());
  enterRule(_localctx, 26, JavaScriptParser_cpp::RuleImportFrom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(271);
    match(JavaScriptParser_cpp::From);
    setState(272);
    match(JavaScriptParser_cpp::StringLiteral);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AliasNameContext ------------------------------------------------------------------

JavaScriptParser_cpp::AliasNameContext::AliasNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaScriptParser_cpp::IdentifierNameContext *> JavaScriptParser_cpp::AliasNameContext::identifierName() {
  return getRuleContexts<JavaScriptParser_cpp::IdentifierNameContext>();
}

JavaScriptParser_cpp::IdentifierNameContext* JavaScriptParser_cpp::AliasNameContext::identifierName(size_t i) {
  return getRuleContext<JavaScriptParser_cpp::IdentifierNameContext>(i);
}

tree::TerminalNode* JavaScriptParser_cpp::AliasNameContext::As() {
  return getToken(JavaScriptParser_cpp::As, 0);
}


size_t JavaScriptParser_cpp::AliasNameContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleAliasName;
}

void JavaScriptParser_cpp::AliasNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAliasName(this);
}

void JavaScriptParser_cpp::AliasNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAliasName(this);
}

JavaScriptParser_cpp::AliasNameContext* JavaScriptParser_cpp::aliasName() {
  AliasNameContext *_localctx = _tracker.createInstance<AliasNameContext>(_ctx, getState());
  enterRule(_localctx, 28, JavaScriptParser_cpp::RuleAliasName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(274);
    identifierName();
    setState(277);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaScriptParser_cpp::As) {
      setState(275);
      match(JavaScriptParser_cpp::As);
      setState(276);
      identifierName();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExportStatementContext ------------------------------------------------------------------

JavaScriptParser_cpp::ExportStatementContext::ExportStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t JavaScriptParser_cpp::ExportStatementContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleExportStatement;
}

void JavaScriptParser_cpp::ExportStatementContext::copyFrom(ExportStatementContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ExportDefaultDeclarationContext ------------------------------------------------------------------

tree::TerminalNode* JavaScriptParser_cpp::ExportDefaultDeclarationContext::Export() {
  return getToken(JavaScriptParser_cpp::Export, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::ExportDefaultDeclarationContext::Default() {
  return getToken(JavaScriptParser_cpp::Default, 0);
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::ExportDefaultDeclarationContext::singleExpression() {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(0);
}

JavaScriptParser_cpp::EosContext* JavaScriptParser_cpp::ExportDefaultDeclarationContext::eos() {
  return getRuleContext<JavaScriptParser_cpp::EosContext>(0);
}

JavaScriptParser_cpp::ExportDefaultDeclarationContext::ExportDefaultDeclarationContext(ExportStatementContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::ExportDefaultDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExportDefaultDeclaration(this);
}
void JavaScriptParser_cpp::ExportDefaultDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExportDefaultDeclaration(this);
}
//----------------- ExportDeclarationContext ------------------------------------------------------------------

tree::TerminalNode* JavaScriptParser_cpp::ExportDeclarationContext::Export() {
  return getToken(JavaScriptParser_cpp::Export, 0);
}

JavaScriptParser_cpp::EosContext* JavaScriptParser_cpp::ExportDeclarationContext::eos() {
  return getRuleContext<JavaScriptParser_cpp::EosContext>(0);
}

JavaScriptParser_cpp::ExportFromBlockContext* JavaScriptParser_cpp::ExportDeclarationContext::exportFromBlock() {
  return getRuleContext<JavaScriptParser_cpp::ExportFromBlockContext>(0);
}

JavaScriptParser_cpp::DeclarationContext* JavaScriptParser_cpp::ExportDeclarationContext::declaration() {
  return getRuleContext<JavaScriptParser_cpp::DeclarationContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::ExportDeclarationContext::Default() {
  return getToken(JavaScriptParser_cpp::Default, 0);
}

JavaScriptParser_cpp::ExportDeclarationContext::ExportDeclarationContext(ExportStatementContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::ExportDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExportDeclaration(this);
}
void JavaScriptParser_cpp::ExportDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExportDeclaration(this);
}
JavaScriptParser_cpp::ExportStatementContext* JavaScriptParser_cpp::exportStatement() {
  ExportStatementContext *_localctx = _tracker.createInstance<ExportStatementContext>(_ctx, getState());
  enterRule(_localctx, 30, JavaScriptParser_cpp::RuleExportStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(294);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 18, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<JavaScriptParser_cpp::ExportDeclarationContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(279);
      match(JavaScriptParser_cpp::Export);
      setState(281);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx)) {
      case 1: {
        setState(280);
        match(JavaScriptParser_cpp::Default);
        break;
      }

      default:
        break;
      }
      setState(285);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx)) {
      case 1: {
        setState(283);
        exportFromBlock();
        break;
      }

      case 2: {
        setState(284);
        declaration();
        break;
      }

      default:
        break;
      }
      setState(287);
      eos();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<JavaScriptParser_cpp::ExportDefaultDeclarationContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(289);
      match(JavaScriptParser_cpp::Export);
      setState(290);
      match(JavaScriptParser_cpp::Default);
      setState(291);
      singleExpression(0);
      setState(292);
      eos();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExportFromBlockContext ------------------------------------------------------------------

JavaScriptParser_cpp::ExportFromBlockContext::ExportFromBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser_cpp::ImportNamespaceContext* JavaScriptParser_cpp::ExportFromBlockContext::importNamespace() {
  return getRuleContext<JavaScriptParser_cpp::ImportNamespaceContext>(0);
}

JavaScriptParser_cpp::ImportFromContext* JavaScriptParser_cpp::ExportFromBlockContext::importFrom() {
  return getRuleContext<JavaScriptParser_cpp::ImportFromContext>(0);
}

JavaScriptParser_cpp::EosContext* JavaScriptParser_cpp::ExportFromBlockContext::eos() {
  return getRuleContext<JavaScriptParser_cpp::EosContext>(0);
}

JavaScriptParser_cpp::ExportModuleItemsContext* JavaScriptParser_cpp::ExportFromBlockContext::exportModuleItems() {
  return getRuleContext<JavaScriptParser_cpp::ExportModuleItemsContext>(0);
}


size_t JavaScriptParser_cpp::ExportFromBlockContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleExportFromBlock;
}

void JavaScriptParser_cpp::ExportFromBlockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExportFromBlock(this);
}

void JavaScriptParser_cpp::ExportFromBlockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExportFromBlock(this);
}

JavaScriptParser_cpp::ExportFromBlockContext* JavaScriptParser_cpp::exportFromBlock() {
  ExportFromBlockContext *_localctx = _tracker.createInstance<ExportFromBlockContext>(_ctx, getState());
  enterRule(_localctx, 32, JavaScriptParser_cpp::RuleExportFromBlock);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(306);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaScriptParser_cpp::Multiply:
      case JavaScriptParser_cpp::NullLiteral:
      case JavaScriptParser_cpp::BooleanLiteral:
      case JavaScriptParser_cpp::Break:
      case JavaScriptParser_cpp::Do:
      case JavaScriptParser_cpp::Instanceof:
      case JavaScriptParser_cpp::Typeof:
      case JavaScriptParser_cpp::Case:
      case JavaScriptParser_cpp::Else:
      case JavaScriptParser_cpp::New:
      case JavaScriptParser_cpp::Var:
      case JavaScriptParser_cpp::Catch:
      case JavaScriptParser_cpp::Finally:
      case JavaScriptParser_cpp::Return:
      case JavaScriptParser_cpp::Void:
      case JavaScriptParser_cpp::Continue:
      case JavaScriptParser_cpp::For:
      case JavaScriptParser_cpp::Switch:
      case JavaScriptParser_cpp::While:
      case JavaScriptParser_cpp::Debugger:
      case JavaScriptParser_cpp::Function_:
      case JavaScriptParser_cpp::This:
      case JavaScriptParser_cpp::With:
      case JavaScriptParser_cpp::Default:
      case JavaScriptParser_cpp::If:
      case JavaScriptParser_cpp::Throw:
      case JavaScriptParser_cpp::Delete:
      case JavaScriptParser_cpp::In:
      case JavaScriptParser_cpp::Try:
      case JavaScriptParser_cpp::As:
      case JavaScriptParser_cpp::From:
      case JavaScriptParser_cpp::Of:
      case JavaScriptParser_cpp::Yield:
      case JavaScriptParser_cpp::YieldStar:
      case JavaScriptParser_cpp::Class:
      case JavaScriptParser_cpp::Enum:
      case JavaScriptParser_cpp::Extends:
      case JavaScriptParser_cpp::Super:
      case JavaScriptParser_cpp::Const:
      case JavaScriptParser_cpp::Export:
      case JavaScriptParser_cpp::Import:
      case JavaScriptParser_cpp::Async:
      case JavaScriptParser_cpp::Await:
      case JavaScriptParser_cpp::Implements:
      case JavaScriptParser_cpp::StrictLet:
      case JavaScriptParser_cpp::NonStrictLet:
      case JavaScriptParser_cpp::Private:
      case JavaScriptParser_cpp::Public:
      case JavaScriptParser_cpp::Interface:
      case JavaScriptParser_cpp::Package:
      case JavaScriptParser_cpp::Protected:
      case JavaScriptParser_cpp::Static:
      case JavaScriptParser_cpp::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(296);
        importNamespace();
        setState(297);
        importFrom();
        setState(298);
        eos();
        break;
      }

      case JavaScriptParser_cpp::OpenBrace: {
        enterOuterAlt(_localctx, 2);
        setState(300);
        exportModuleItems();
        setState(302);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx)) {
        case 1: {
          setState(301);
          importFrom();
          break;
        }

        default:
          break;
        }
        setState(304);
        eos();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExportModuleItemsContext ------------------------------------------------------------------

JavaScriptParser_cpp::ExportModuleItemsContext::ExportModuleItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::ExportModuleItemsContext::OpenBrace() {
  return getToken(JavaScriptParser_cpp::OpenBrace, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::ExportModuleItemsContext::CloseBrace() {
  return getToken(JavaScriptParser_cpp::CloseBrace, 0);
}

std::vector<JavaScriptParser_cpp::ExportAliasNameContext *> JavaScriptParser_cpp::ExportModuleItemsContext::exportAliasName() {
  return getRuleContexts<JavaScriptParser_cpp::ExportAliasNameContext>();
}

JavaScriptParser_cpp::ExportAliasNameContext* JavaScriptParser_cpp::ExportModuleItemsContext::exportAliasName(size_t i) {
  return getRuleContext<JavaScriptParser_cpp::ExportAliasNameContext>(i);
}

std::vector<tree::TerminalNode *> JavaScriptParser_cpp::ExportModuleItemsContext::Comma() {
  return getTokens(JavaScriptParser_cpp::Comma);
}

tree::TerminalNode* JavaScriptParser_cpp::ExportModuleItemsContext::Comma(size_t i) {
  return getToken(JavaScriptParser_cpp::Comma, i);
}


size_t JavaScriptParser_cpp::ExportModuleItemsContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleExportModuleItems;
}

void JavaScriptParser_cpp::ExportModuleItemsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExportModuleItems(this);
}

void JavaScriptParser_cpp::ExportModuleItemsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExportModuleItems(this);
}

JavaScriptParser_cpp::ExportModuleItemsContext* JavaScriptParser_cpp::exportModuleItems() {
  ExportModuleItemsContext *_localctx = _tracker.createInstance<ExportModuleItemsContext>(_ctx, getState());
  enterRule(_localctx, 34, JavaScriptParser_cpp::RuleExportModuleItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(308);
    match(JavaScriptParser_cpp::OpenBrace);
    setState(314);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(309);
        exportAliasName();
        setState(310);
        match(JavaScriptParser_cpp::Comma); 
      }
      setState(316);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx);
    }
    setState(321);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 62) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 62)) & 4611686018427385859) != 0)) {
      setState(317);
      exportAliasName();
      setState(319);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaScriptParser_cpp::Comma) {
        setState(318);
        match(JavaScriptParser_cpp::Comma);
      }
    }
    setState(323);
    match(JavaScriptParser_cpp::CloseBrace);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExportAliasNameContext ------------------------------------------------------------------

JavaScriptParser_cpp::ExportAliasNameContext::ExportAliasNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaScriptParser_cpp::ModuleExportNameContext *> JavaScriptParser_cpp::ExportAliasNameContext::moduleExportName() {
  return getRuleContexts<JavaScriptParser_cpp::ModuleExportNameContext>();
}

JavaScriptParser_cpp::ModuleExportNameContext* JavaScriptParser_cpp::ExportAliasNameContext::moduleExportName(size_t i) {
  return getRuleContext<JavaScriptParser_cpp::ModuleExportNameContext>(i);
}

tree::TerminalNode* JavaScriptParser_cpp::ExportAliasNameContext::As() {
  return getToken(JavaScriptParser_cpp::As, 0);
}


size_t JavaScriptParser_cpp::ExportAliasNameContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleExportAliasName;
}

void JavaScriptParser_cpp::ExportAliasNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExportAliasName(this);
}

void JavaScriptParser_cpp::ExportAliasNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExportAliasName(this);
}

JavaScriptParser_cpp::ExportAliasNameContext* JavaScriptParser_cpp::exportAliasName() {
  ExportAliasNameContext *_localctx = _tracker.createInstance<ExportAliasNameContext>(_ctx, getState());
  enterRule(_localctx, 36, JavaScriptParser_cpp::RuleExportAliasName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(325);
    moduleExportName();
    setState(328);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaScriptParser_cpp::As) {
      setState(326);
      match(JavaScriptParser_cpp::As);
      setState(327);
      moduleExportName();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclarationContext ------------------------------------------------------------------

JavaScriptParser_cpp::DeclarationContext::DeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser_cpp::VariableStatementContext* JavaScriptParser_cpp::DeclarationContext::variableStatement() {
  return getRuleContext<JavaScriptParser_cpp::VariableStatementContext>(0);
}

JavaScriptParser_cpp::ClassDeclarationContext* JavaScriptParser_cpp::DeclarationContext::classDeclaration() {
  return getRuleContext<JavaScriptParser_cpp::ClassDeclarationContext>(0);
}

JavaScriptParser_cpp::FunctionDeclarationContext* JavaScriptParser_cpp::DeclarationContext::functionDeclaration() {
  return getRuleContext<JavaScriptParser_cpp::FunctionDeclarationContext>(0);
}


size_t JavaScriptParser_cpp::DeclarationContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleDeclaration;
}

void JavaScriptParser_cpp::DeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclaration(this);
}

void JavaScriptParser_cpp::DeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclaration(this);
}

JavaScriptParser_cpp::DeclarationContext* JavaScriptParser_cpp::declaration() {
  DeclarationContext *_localctx = _tracker.createInstance<DeclarationContext>(_ctx, getState());
  enterRule(_localctx, 38, JavaScriptParser_cpp::RuleDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(333);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaScriptParser_cpp::Var:
      case JavaScriptParser_cpp::Const:
      case JavaScriptParser_cpp::StrictLet:
      case JavaScriptParser_cpp::NonStrictLet: {
        enterOuterAlt(_localctx, 1);
        setState(330);
        variableStatement();
        break;
      }

      case JavaScriptParser_cpp::Class: {
        enterOuterAlt(_localctx, 2);
        setState(331);
        classDeclaration();
        break;
      }

      case JavaScriptParser_cpp::Function_:
      case JavaScriptParser_cpp::Async: {
        enterOuterAlt(_localctx, 3);
        setState(332);
        functionDeclaration();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableStatementContext ------------------------------------------------------------------

JavaScriptParser_cpp::VariableStatementContext::VariableStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser_cpp::VariableDeclarationListContext* JavaScriptParser_cpp::VariableStatementContext::variableDeclarationList() {
  return getRuleContext<JavaScriptParser_cpp::VariableDeclarationListContext>(0);
}

JavaScriptParser_cpp::EosContext* JavaScriptParser_cpp::VariableStatementContext::eos() {
  return getRuleContext<JavaScriptParser_cpp::EosContext>(0);
}


size_t JavaScriptParser_cpp::VariableStatementContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleVariableStatement;
}

void JavaScriptParser_cpp::VariableStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableStatement(this);
}

void JavaScriptParser_cpp::VariableStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableStatement(this);
}

JavaScriptParser_cpp::VariableStatementContext* JavaScriptParser_cpp::variableStatement() {
  VariableStatementContext *_localctx = _tracker.createInstance<VariableStatementContext>(_ctx, getState());
  enterRule(_localctx, 40, JavaScriptParser_cpp::RuleVariableStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(335);
    variableDeclarationList();
    setState(336);
    eos();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableDeclarationListContext ------------------------------------------------------------------

JavaScriptParser_cpp::VariableDeclarationListContext::VariableDeclarationListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser_cpp::VarModifierContext* JavaScriptParser_cpp::VariableDeclarationListContext::varModifier() {
  return getRuleContext<JavaScriptParser_cpp::VarModifierContext>(0);
}

std::vector<JavaScriptParser_cpp::VariableDeclarationContext *> JavaScriptParser_cpp::VariableDeclarationListContext::variableDeclaration() {
  return getRuleContexts<JavaScriptParser_cpp::VariableDeclarationContext>();
}

JavaScriptParser_cpp::VariableDeclarationContext* JavaScriptParser_cpp::VariableDeclarationListContext::variableDeclaration(size_t i) {
  return getRuleContext<JavaScriptParser_cpp::VariableDeclarationContext>(i);
}

std::vector<tree::TerminalNode *> JavaScriptParser_cpp::VariableDeclarationListContext::Comma() {
  return getTokens(JavaScriptParser_cpp::Comma);
}

tree::TerminalNode* JavaScriptParser_cpp::VariableDeclarationListContext::Comma(size_t i) {
  return getToken(JavaScriptParser_cpp::Comma, i);
}


size_t JavaScriptParser_cpp::VariableDeclarationListContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleVariableDeclarationList;
}

void JavaScriptParser_cpp::VariableDeclarationListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableDeclarationList(this);
}

void JavaScriptParser_cpp::VariableDeclarationListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableDeclarationList(this);
}

JavaScriptParser_cpp::VariableDeclarationListContext* JavaScriptParser_cpp::variableDeclarationList() {
  VariableDeclarationListContext *_localctx = _tracker.createInstance<VariableDeclarationListContext>(_ctx, getState());
  enterRule(_localctx, 42, JavaScriptParser_cpp::RuleVariableDeclarationList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(338);
    varModifier();
    setState(339);
    variableDeclaration();
    setState(344);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 26, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(340);
        match(JavaScriptParser_cpp::Comma);
        setState(341);
        variableDeclaration(); 
      }
      setState(346);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 26, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableDeclarationContext ------------------------------------------------------------------

JavaScriptParser_cpp::VariableDeclarationContext::VariableDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser_cpp::AssignableContext* JavaScriptParser_cpp::VariableDeclarationContext::assignable() {
  return getRuleContext<JavaScriptParser_cpp::AssignableContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::VariableDeclarationContext::Assign() {
  return getToken(JavaScriptParser_cpp::Assign, 0);
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::VariableDeclarationContext::singleExpression() {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(0);
}


size_t JavaScriptParser_cpp::VariableDeclarationContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleVariableDeclaration;
}

void JavaScriptParser_cpp::VariableDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableDeclaration(this);
}

void JavaScriptParser_cpp::VariableDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableDeclaration(this);
}

JavaScriptParser_cpp::VariableDeclarationContext* JavaScriptParser_cpp::variableDeclaration() {
  VariableDeclarationContext *_localctx = _tracker.createInstance<VariableDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 44, JavaScriptParser_cpp::RuleVariableDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(347);
    assignable();
    setState(350);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx)) {
    case 1: {
      setState(348);
      match(JavaScriptParser_cpp::Assign);
      setState(349);
      singleExpression(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EmptyStatement_Context ------------------------------------------------------------------

JavaScriptParser_cpp::EmptyStatement_Context::EmptyStatement_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::EmptyStatement_Context::SemiColon() {
  return getToken(JavaScriptParser_cpp::SemiColon, 0);
}


size_t JavaScriptParser_cpp::EmptyStatement_Context::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleEmptyStatement_;
}

void JavaScriptParser_cpp::EmptyStatement_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEmptyStatement_(this);
}

void JavaScriptParser_cpp::EmptyStatement_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEmptyStatement_(this);
}

JavaScriptParser_cpp::EmptyStatement_Context* JavaScriptParser_cpp::emptyStatement_() {
  EmptyStatement_Context *_localctx = _tracker.createInstance<EmptyStatement_Context>(_ctx, getState());
  enterRule(_localctx, 46, JavaScriptParser_cpp::RuleEmptyStatement_);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(352);
    match(JavaScriptParser_cpp::SemiColon);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionStatementContext ------------------------------------------------------------------

JavaScriptParser_cpp::ExpressionStatementContext::ExpressionStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser_cpp::ExpressionSequenceContext* JavaScriptParser_cpp::ExpressionStatementContext::expressionSequence() {
  return getRuleContext<JavaScriptParser_cpp::ExpressionSequenceContext>(0);
}

JavaScriptParser_cpp::EosContext* JavaScriptParser_cpp::ExpressionStatementContext::eos() {
  return getRuleContext<JavaScriptParser_cpp::EosContext>(0);
}


size_t JavaScriptParser_cpp::ExpressionStatementContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleExpressionStatement;
}

void JavaScriptParser_cpp::ExpressionStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpressionStatement(this);
}

void JavaScriptParser_cpp::ExpressionStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpressionStatement(this);
}

JavaScriptParser_cpp::ExpressionStatementContext* JavaScriptParser_cpp::expressionStatement() {
  ExpressionStatementContext *_localctx = _tracker.createInstance<ExpressionStatementContext>(_ctx, getState());
  enterRule(_localctx, 48, JavaScriptParser_cpp::RuleExpressionStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(354);

    if (!(this->notOpenBraceAndNotFunction())) throw FailedPredicateException(this, "this->notOpenBraceAndNotFunction()");
    setState(355);
    expressionSequence();
    setState(356);
    eos();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfStatementContext ------------------------------------------------------------------

JavaScriptParser_cpp::IfStatementContext::IfStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::IfStatementContext::If() {
  return getToken(JavaScriptParser_cpp::If, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::IfStatementContext::OpenParen() {
  return getToken(JavaScriptParser_cpp::OpenParen, 0);
}

JavaScriptParser_cpp::ExpressionSequenceContext* JavaScriptParser_cpp::IfStatementContext::expressionSequence() {
  return getRuleContext<JavaScriptParser_cpp::ExpressionSequenceContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::IfStatementContext::CloseParen() {
  return getToken(JavaScriptParser_cpp::CloseParen, 0);
}

std::vector<JavaScriptParser_cpp::StatementContext *> JavaScriptParser_cpp::IfStatementContext::statement() {
  return getRuleContexts<JavaScriptParser_cpp::StatementContext>();
}

JavaScriptParser_cpp::StatementContext* JavaScriptParser_cpp::IfStatementContext::statement(size_t i) {
  return getRuleContext<JavaScriptParser_cpp::StatementContext>(i);
}

tree::TerminalNode* JavaScriptParser_cpp::IfStatementContext::Else() {
  return getToken(JavaScriptParser_cpp::Else, 0);
}


size_t JavaScriptParser_cpp::IfStatementContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleIfStatement;
}

void JavaScriptParser_cpp::IfStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIfStatement(this);
}

void JavaScriptParser_cpp::IfStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIfStatement(this);
}

JavaScriptParser_cpp::IfStatementContext* JavaScriptParser_cpp::ifStatement() {
  IfStatementContext *_localctx = _tracker.createInstance<IfStatementContext>(_ctx, getState());
  enterRule(_localctx, 50, JavaScriptParser_cpp::RuleIfStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(358);
    match(JavaScriptParser_cpp::If);
    setState(359);
    match(JavaScriptParser_cpp::OpenParen);
    setState(360);
    expressionSequence();
    setState(361);
    match(JavaScriptParser_cpp::CloseParen);
    setState(362);
    statement();
    setState(365);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx)) {
    case 1: {
      setState(363);
      match(JavaScriptParser_cpp::Else);
      setState(364);
      statement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IterationStatementContext ------------------------------------------------------------------

JavaScriptParser_cpp::IterationStatementContext::IterationStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t JavaScriptParser_cpp::IterationStatementContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleIterationStatement;
}

void JavaScriptParser_cpp::IterationStatementContext::copyFrom(IterationStatementContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- DoStatementContext ------------------------------------------------------------------

tree::TerminalNode* JavaScriptParser_cpp::DoStatementContext::Do() {
  return getToken(JavaScriptParser_cpp::Do, 0);
}

JavaScriptParser_cpp::StatementContext* JavaScriptParser_cpp::DoStatementContext::statement() {
  return getRuleContext<JavaScriptParser_cpp::StatementContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::DoStatementContext::While() {
  return getToken(JavaScriptParser_cpp::While, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::DoStatementContext::OpenParen() {
  return getToken(JavaScriptParser_cpp::OpenParen, 0);
}

JavaScriptParser_cpp::ExpressionSequenceContext* JavaScriptParser_cpp::DoStatementContext::expressionSequence() {
  return getRuleContext<JavaScriptParser_cpp::ExpressionSequenceContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::DoStatementContext::CloseParen() {
  return getToken(JavaScriptParser_cpp::CloseParen, 0);
}

JavaScriptParser_cpp::EosContext* JavaScriptParser_cpp::DoStatementContext::eos() {
  return getRuleContext<JavaScriptParser_cpp::EosContext>(0);
}

JavaScriptParser_cpp::DoStatementContext::DoStatementContext(IterationStatementContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::DoStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDoStatement(this);
}
void JavaScriptParser_cpp::DoStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDoStatement(this);
}
//----------------- WhileStatementContext ------------------------------------------------------------------

tree::TerminalNode* JavaScriptParser_cpp::WhileStatementContext::While() {
  return getToken(JavaScriptParser_cpp::While, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::WhileStatementContext::OpenParen() {
  return getToken(JavaScriptParser_cpp::OpenParen, 0);
}

JavaScriptParser_cpp::ExpressionSequenceContext* JavaScriptParser_cpp::WhileStatementContext::expressionSequence() {
  return getRuleContext<JavaScriptParser_cpp::ExpressionSequenceContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::WhileStatementContext::CloseParen() {
  return getToken(JavaScriptParser_cpp::CloseParen, 0);
}

JavaScriptParser_cpp::StatementContext* JavaScriptParser_cpp::WhileStatementContext::statement() {
  return getRuleContext<JavaScriptParser_cpp::StatementContext>(0);
}

JavaScriptParser_cpp::WhileStatementContext::WhileStatementContext(IterationStatementContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::WhileStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhileStatement(this);
}
void JavaScriptParser_cpp::WhileStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhileStatement(this);
}
//----------------- ForStatementContext ------------------------------------------------------------------

tree::TerminalNode* JavaScriptParser_cpp::ForStatementContext::For() {
  return getToken(JavaScriptParser_cpp::For, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::ForStatementContext::OpenParen() {
  return getToken(JavaScriptParser_cpp::OpenParen, 0);
}

std::vector<tree::TerminalNode *> JavaScriptParser_cpp::ForStatementContext::SemiColon() {
  return getTokens(JavaScriptParser_cpp::SemiColon);
}

tree::TerminalNode* JavaScriptParser_cpp::ForStatementContext::SemiColon(size_t i) {
  return getToken(JavaScriptParser_cpp::SemiColon, i);
}

tree::TerminalNode* JavaScriptParser_cpp::ForStatementContext::CloseParen() {
  return getToken(JavaScriptParser_cpp::CloseParen, 0);
}

JavaScriptParser_cpp::StatementContext* JavaScriptParser_cpp::ForStatementContext::statement() {
  return getRuleContext<JavaScriptParser_cpp::StatementContext>(0);
}

std::vector<JavaScriptParser_cpp::ExpressionSequenceContext *> JavaScriptParser_cpp::ForStatementContext::expressionSequence() {
  return getRuleContexts<JavaScriptParser_cpp::ExpressionSequenceContext>();
}

JavaScriptParser_cpp::ExpressionSequenceContext* JavaScriptParser_cpp::ForStatementContext::expressionSequence(size_t i) {
  return getRuleContext<JavaScriptParser_cpp::ExpressionSequenceContext>(i);
}

JavaScriptParser_cpp::VariableDeclarationListContext* JavaScriptParser_cpp::ForStatementContext::variableDeclarationList() {
  return getRuleContext<JavaScriptParser_cpp::VariableDeclarationListContext>(0);
}

JavaScriptParser_cpp::ForStatementContext::ForStatementContext(IterationStatementContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::ForStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForStatement(this);
}
void JavaScriptParser_cpp::ForStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForStatement(this);
}
//----------------- ForInStatementContext ------------------------------------------------------------------

tree::TerminalNode* JavaScriptParser_cpp::ForInStatementContext::For() {
  return getToken(JavaScriptParser_cpp::For, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::ForInStatementContext::OpenParen() {
  return getToken(JavaScriptParser_cpp::OpenParen, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::ForInStatementContext::In() {
  return getToken(JavaScriptParser_cpp::In, 0);
}

JavaScriptParser_cpp::ExpressionSequenceContext* JavaScriptParser_cpp::ForInStatementContext::expressionSequence() {
  return getRuleContext<JavaScriptParser_cpp::ExpressionSequenceContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::ForInStatementContext::CloseParen() {
  return getToken(JavaScriptParser_cpp::CloseParen, 0);
}

JavaScriptParser_cpp::StatementContext* JavaScriptParser_cpp::ForInStatementContext::statement() {
  return getRuleContext<JavaScriptParser_cpp::StatementContext>(0);
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::ForInStatementContext::singleExpression() {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(0);
}

JavaScriptParser_cpp::VariableDeclarationListContext* JavaScriptParser_cpp::ForInStatementContext::variableDeclarationList() {
  return getRuleContext<JavaScriptParser_cpp::VariableDeclarationListContext>(0);
}

JavaScriptParser_cpp::ForInStatementContext::ForInStatementContext(IterationStatementContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::ForInStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForInStatement(this);
}
void JavaScriptParser_cpp::ForInStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForInStatement(this);
}
//----------------- ForOfStatementContext ------------------------------------------------------------------

tree::TerminalNode* JavaScriptParser_cpp::ForOfStatementContext::For() {
  return getToken(JavaScriptParser_cpp::For, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::ForOfStatementContext::OpenParen() {
  return getToken(JavaScriptParser_cpp::OpenParen, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::ForOfStatementContext::Of() {
  return getToken(JavaScriptParser_cpp::Of, 0);
}

JavaScriptParser_cpp::ExpressionSequenceContext* JavaScriptParser_cpp::ForOfStatementContext::expressionSequence() {
  return getRuleContext<JavaScriptParser_cpp::ExpressionSequenceContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::ForOfStatementContext::CloseParen() {
  return getToken(JavaScriptParser_cpp::CloseParen, 0);
}

JavaScriptParser_cpp::StatementContext* JavaScriptParser_cpp::ForOfStatementContext::statement() {
  return getRuleContext<JavaScriptParser_cpp::StatementContext>(0);
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::ForOfStatementContext::singleExpression() {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(0);
}

JavaScriptParser_cpp::VariableDeclarationListContext* JavaScriptParser_cpp::ForOfStatementContext::variableDeclarationList() {
  return getRuleContext<JavaScriptParser_cpp::VariableDeclarationListContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::ForOfStatementContext::Await() {
  return getToken(JavaScriptParser_cpp::Await, 0);
}

JavaScriptParser_cpp::ForOfStatementContext::ForOfStatementContext(IterationStatementContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::ForOfStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForOfStatement(this);
}
void JavaScriptParser_cpp::ForOfStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForOfStatement(this);
}
JavaScriptParser_cpp::IterationStatementContext* JavaScriptParser_cpp::iterationStatement() {
  IterationStatementContext *_localctx = _tracker.createInstance<IterationStatementContext>(_ctx, getState());
  enterRule(_localctx, 52, JavaScriptParser_cpp::RuleIterationStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(422);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 35, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<JavaScriptParser_cpp::DoStatementContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(367);
      match(JavaScriptParser_cpp::Do);
      setState(368);
      statement();
      setState(369);
      match(JavaScriptParser_cpp::While);
      setState(370);
      match(JavaScriptParser_cpp::OpenParen);
      setState(371);
      expressionSequence();
      setState(372);
      match(JavaScriptParser_cpp::CloseParen);
      setState(373);
      eos();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<JavaScriptParser_cpp::WhileStatementContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(375);
      match(JavaScriptParser_cpp::While);
      setState(376);
      match(JavaScriptParser_cpp::OpenParen);
      setState(377);
      expressionSequence();
      setState(378);
      match(JavaScriptParser_cpp::CloseParen);
      setState(379);
      statement();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<JavaScriptParser_cpp::ForStatementContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(381);
      match(JavaScriptParser_cpp::For);
      setState(382);
      match(JavaScriptParser_cpp::OpenParen);
      setState(385);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 29, _ctx)) {
      case 1: {
        setState(383);
        expressionSequence();
        break;
      }

      case 2: {
        setState(384);
        variableDeclarationList();
        break;
      }

      default:
        break;
      }
      setState(387);
      match(JavaScriptParser_cpp::SemiColon);
      setState(389);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -4611686018361326928) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 2305843009213693951) != 0)) {
        setState(388);
        expressionSequence();
      }
      setState(391);
      match(JavaScriptParser_cpp::SemiColon);
      setState(393);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -4611686018361326928) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 2305843009213693951) != 0)) {
        setState(392);
        expressionSequence();
      }
      setState(395);
      match(JavaScriptParser_cpp::CloseParen);
      setState(396);
      statement();
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<JavaScriptParser_cpp::ForInStatementContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(397);
      match(JavaScriptParser_cpp::For);
      setState(398);
      match(JavaScriptParser_cpp::OpenParen);
      setState(401);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx)) {
      case 1: {
        setState(399);
        singleExpression(0);
        break;
      }

      case 2: {
        setState(400);
        variableDeclarationList();
        break;
      }

      default:
        break;
      }
      setState(403);
      match(JavaScriptParser_cpp::In);
      setState(404);
      expressionSequence();
      setState(405);
      match(JavaScriptParser_cpp::CloseParen);
      setState(406);
      statement();
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<JavaScriptParser_cpp::ForOfStatementContext>(_localctx);
      enterOuterAlt(_localctx, 5);
      setState(408);
      match(JavaScriptParser_cpp::For);
      setState(410);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaScriptParser_cpp::Await) {
        setState(409);
        match(JavaScriptParser_cpp::Await);
      }
      setState(412);
      match(JavaScriptParser_cpp::OpenParen);
      setState(415);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 34, _ctx)) {
      case 1: {
        setState(413);
        singleExpression(0);
        break;
      }

      case 2: {
        setState(414);
        variableDeclarationList();
        break;
      }

      default:
        break;
      }
      setState(417);
      match(JavaScriptParser_cpp::Of);
      setState(418);
      expressionSequence();
      setState(419);
      match(JavaScriptParser_cpp::CloseParen);
      setState(420);
      statement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VarModifierContext ------------------------------------------------------------------

JavaScriptParser_cpp::VarModifierContext::VarModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::VarModifierContext::Var() {
  return getToken(JavaScriptParser_cpp::Var, 0);
}

JavaScriptParser_cpp::Let_Context* JavaScriptParser_cpp::VarModifierContext::let_() {
  return getRuleContext<JavaScriptParser_cpp::Let_Context>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::VarModifierContext::Const() {
  return getToken(JavaScriptParser_cpp::Const, 0);
}


size_t JavaScriptParser_cpp::VarModifierContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleVarModifier;
}

void JavaScriptParser_cpp::VarModifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVarModifier(this);
}

void JavaScriptParser_cpp::VarModifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVarModifier(this);
}

JavaScriptParser_cpp::VarModifierContext* JavaScriptParser_cpp::varModifier() {
  VarModifierContext *_localctx = _tracker.createInstance<VarModifierContext>(_ctx, getState());
  enterRule(_localctx, 54, JavaScriptParser_cpp::RuleVarModifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(427);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaScriptParser_cpp::Var: {
        enterOuterAlt(_localctx, 1);
        setState(424);
        match(JavaScriptParser_cpp::Var);
        break;
      }

      case JavaScriptParser_cpp::StrictLet:
      case JavaScriptParser_cpp::NonStrictLet: {
        enterOuterAlt(_localctx, 2);
        setState(425);
        let_();
        break;
      }

      case JavaScriptParser_cpp::Const: {
        enterOuterAlt(_localctx, 3);
        setState(426);
        match(JavaScriptParser_cpp::Const);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ContinueStatementContext ------------------------------------------------------------------

JavaScriptParser_cpp::ContinueStatementContext::ContinueStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::ContinueStatementContext::Continue() {
  return getToken(JavaScriptParser_cpp::Continue, 0);
}

JavaScriptParser_cpp::EosContext* JavaScriptParser_cpp::ContinueStatementContext::eos() {
  return getRuleContext<JavaScriptParser_cpp::EosContext>(0);
}

JavaScriptParser_cpp::IdentifierContext* JavaScriptParser_cpp::ContinueStatementContext::identifier() {
  return getRuleContext<JavaScriptParser_cpp::IdentifierContext>(0);
}


size_t JavaScriptParser_cpp::ContinueStatementContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleContinueStatement;
}

void JavaScriptParser_cpp::ContinueStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterContinueStatement(this);
}

void JavaScriptParser_cpp::ContinueStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitContinueStatement(this);
}

JavaScriptParser_cpp::ContinueStatementContext* JavaScriptParser_cpp::continueStatement() {
  ContinueStatementContext *_localctx = _tracker.createInstance<ContinueStatementContext>(_ctx, getState());
  enterRule(_localctx, 56, JavaScriptParser_cpp::RuleContinueStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(429);
    match(JavaScriptParser_cpp::Continue);
    setState(432);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 37, _ctx)) {
    case 1: {
      setState(430);

      if (!(this->notLineTerminator())) throw FailedPredicateException(this, "this->notLineTerminator()");
      setState(431);
      identifier();
      break;
    }

    default:
      break;
    }
    setState(434);
    eos();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BreakStatementContext ------------------------------------------------------------------

JavaScriptParser_cpp::BreakStatementContext::BreakStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::BreakStatementContext::Break() {
  return getToken(JavaScriptParser_cpp::Break, 0);
}

JavaScriptParser_cpp::EosContext* JavaScriptParser_cpp::BreakStatementContext::eos() {
  return getRuleContext<JavaScriptParser_cpp::EosContext>(0);
}

JavaScriptParser_cpp::IdentifierContext* JavaScriptParser_cpp::BreakStatementContext::identifier() {
  return getRuleContext<JavaScriptParser_cpp::IdentifierContext>(0);
}


size_t JavaScriptParser_cpp::BreakStatementContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleBreakStatement;
}

void JavaScriptParser_cpp::BreakStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBreakStatement(this);
}

void JavaScriptParser_cpp::BreakStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBreakStatement(this);
}

JavaScriptParser_cpp::BreakStatementContext* JavaScriptParser_cpp::breakStatement() {
  BreakStatementContext *_localctx = _tracker.createInstance<BreakStatementContext>(_ctx, getState());
  enterRule(_localctx, 58, JavaScriptParser_cpp::RuleBreakStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(436);
    match(JavaScriptParser_cpp::Break);
    setState(439);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 38, _ctx)) {
    case 1: {
      setState(437);

      if (!(this->notLineTerminator())) throw FailedPredicateException(this, "this->notLineTerminator()");
      setState(438);
      identifier();
      break;
    }

    default:
      break;
    }
    setState(441);
    eos();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReturnStatementContext ------------------------------------------------------------------

JavaScriptParser_cpp::ReturnStatementContext::ReturnStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::ReturnStatementContext::Return() {
  return getToken(JavaScriptParser_cpp::Return, 0);
}

JavaScriptParser_cpp::EosContext* JavaScriptParser_cpp::ReturnStatementContext::eos() {
  return getRuleContext<JavaScriptParser_cpp::EosContext>(0);
}

JavaScriptParser_cpp::ExpressionSequenceContext* JavaScriptParser_cpp::ReturnStatementContext::expressionSequence() {
  return getRuleContext<JavaScriptParser_cpp::ExpressionSequenceContext>(0);
}


size_t JavaScriptParser_cpp::ReturnStatementContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleReturnStatement;
}

void JavaScriptParser_cpp::ReturnStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReturnStatement(this);
}

void JavaScriptParser_cpp::ReturnStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReturnStatement(this);
}

JavaScriptParser_cpp::ReturnStatementContext* JavaScriptParser_cpp::returnStatement() {
  ReturnStatementContext *_localctx = _tracker.createInstance<ReturnStatementContext>(_ctx, getState());
  enterRule(_localctx, 60, JavaScriptParser_cpp::RuleReturnStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(443);
    match(JavaScriptParser_cpp::Return);
    setState(446);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx)) {
    case 1: {
      setState(444);

      if (!(this->notLineTerminator())) throw FailedPredicateException(this, "this->notLineTerminator()");
      setState(445);
      expressionSequence();
      break;
    }

    default:
      break;
    }
    setState(448);
    eos();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- YieldStatementContext ------------------------------------------------------------------

JavaScriptParser_cpp::YieldStatementContext::YieldStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser_cpp::EosContext* JavaScriptParser_cpp::YieldStatementContext::eos() {
  return getRuleContext<JavaScriptParser_cpp::EosContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::YieldStatementContext::Yield() {
  return getToken(JavaScriptParser_cpp::Yield, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::YieldStatementContext::YieldStar() {
  return getToken(JavaScriptParser_cpp::YieldStar, 0);
}

JavaScriptParser_cpp::ExpressionSequenceContext* JavaScriptParser_cpp::YieldStatementContext::expressionSequence() {
  return getRuleContext<JavaScriptParser_cpp::ExpressionSequenceContext>(0);
}


size_t JavaScriptParser_cpp::YieldStatementContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleYieldStatement;
}

void JavaScriptParser_cpp::YieldStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterYieldStatement(this);
}

void JavaScriptParser_cpp::YieldStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitYieldStatement(this);
}

JavaScriptParser_cpp::YieldStatementContext* JavaScriptParser_cpp::yieldStatement() {
  YieldStatementContext *_localctx = _tracker.createInstance<YieldStatementContext>(_ctx, getState());
  enterRule(_localctx, 62, JavaScriptParser_cpp::RuleYieldStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(450);
    _la = _input->LA(1);
    if (!(_la == JavaScriptParser_cpp::Yield

    || _la == JavaScriptParser_cpp::YieldStar)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(453);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 40, _ctx)) {
    case 1: {
      setState(451);

      if (!(this->notLineTerminator())) throw FailedPredicateException(this, "this->notLineTerminator()");
      setState(452);
      expressionSequence();
      break;
    }

    default:
      break;
    }
    setState(455);
    eos();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WithStatementContext ------------------------------------------------------------------

JavaScriptParser_cpp::WithStatementContext::WithStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::WithStatementContext::With() {
  return getToken(JavaScriptParser_cpp::With, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::WithStatementContext::OpenParen() {
  return getToken(JavaScriptParser_cpp::OpenParen, 0);
}

JavaScriptParser_cpp::ExpressionSequenceContext* JavaScriptParser_cpp::WithStatementContext::expressionSequence() {
  return getRuleContext<JavaScriptParser_cpp::ExpressionSequenceContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::WithStatementContext::CloseParen() {
  return getToken(JavaScriptParser_cpp::CloseParen, 0);
}

JavaScriptParser_cpp::StatementContext* JavaScriptParser_cpp::WithStatementContext::statement() {
  return getRuleContext<JavaScriptParser_cpp::StatementContext>(0);
}


size_t JavaScriptParser_cpp::WithStatementContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleWithStatement;
}

void JavaScriptParser_cpp::WithStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWithStatement(this);
}

void JavaScriptParser_cpp::WithStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWithStatement(this);
}

JavaScriptParser_cpp::WithStatementContext* JavaScriptParser_cpp::withStatement() {
  WithStatementContext *_localctx = _tracker.createInstance<WithStatementContext>(_ctx, getState());
  enterRule(_localctx, 64, JavaScriptParser_cpp::RuleWithStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(457);
    match(JavaScriptParser_cpp::With);
    setState(458);
    match(JavaScriptParser_cpp::OpenParen);
    setState(459);
    expressionSequence();
    setState(460);
    match(JavaScriptParser_cpp::CloseParen);
    setState(461);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchStatementContext ------------------------------------------------------------------

JavaScriptParser_cpp::SwitchStatementContext::SwitchStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::SwitchStatementContext::Switch() {
  return getToken(JavaScriptParser_cpp::Switch, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::SwitchStatementContext::OpenParen() {
  return getToken(JavaScriptParser_cpp::OpenParen, 0);
}

JavaScriptParser_cpp::ExpressionSequenceContext* JavaScriptParser_cpp::SwitchStatementContext::expressionSequence() {
  return getRuleContext<JavaScriptParser_cpp::ExpressionSequenceContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::SwitchStatementContext::CloseParen() {
  return getToken(JavaScriptParser_cpp::CloseParen, 0);
}

JavaScriptParser_cpp::CaseBlockContext* JavaScriptParser_cpp::SwitchStatementContext::caseBlock() {
  return getRuleContext<JavaScriptParser_cpp::CaseBlockContext>(0);
}


size_t JavaScriptParser_cpp::SwitchStatementContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleSwitchStatement;
}

void JavaScriptParser_cpp::SwitchStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitchStatement(this);
}

void JavaScriptParser_cpp::SwitchStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitchStatement(this);
}

JavaScriptParser_cpp::SwitchStatementContext* JavaScriptParser_cpp::switchStatement() {
  SwitchStatementContext *_localctx = _tracker.createInstance<SwitchStatementContext>(_ctx, getState());
  enterRule(_localctx, 66, JavaScriptParser_cpp::RuleSwitchStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(463);
    match(JavaScriptParser_cpp::Switch);
    setState(464);
    match(JavaScriptParser_cpp::OpenParen);
    setState(465);
    expressionSequence();
    setState(466);
    match(JavaScriptParser_cpp::CloseParen);
    setState(467);
    caseBlock();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaseBlockContext ------------------------------------------------------------------

JavaScriptParser_cpp::CaseBlockContext::CaseBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::CaseBlockContext::OpenBrace() {
  return getToken(JavaScriptParser_cpp::OpenBrace, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::CaseBlockContext::CloseBrace() {
  return getToken(JavaScriptParser_cpp::CloseBrace, 0);
}

std::vector<JavaScriptParser_cpp::CaseClausesContext *> JavaScriptParser_cpp::CaseBlockContext::caseClauses() {
  return getRuleContexts<JavaScriptParser_cpp::CaseClausesContext>();
}

JavaScriptParser_cpp::CaseClausesContext* JavaScriptParser_cpp::CaseBlockContext::caseClauses(size_t i) {
  return getRuleContext<JavaScriptParser_cpp::CaseClausesContext>(i);
}

JavaScriptParser_cpp::DefaultClauseContext* JavaScriptParser_cpp::CaseBlockContext::defaultClause() {
  return getRuleContext<JavaScriptParser_cpp::DefaultClauseContext>(0);
}


size_t JavaScriptParser_cpp::CaseBlockContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleCaseBlock;
}

void JavaScriptParser_cpp::CaseBlockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCaseBlock(this);
}

void JavaScriptParser_cpp::CaseBlockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCaseBlock(this);
}

JavaScriptParser_cpp::CaseBlockContext* JavaScriptParser_cpp::caseBlock() {
  CaseBlockContext *_localctx = _tracker.createInstance<CaseBlockContext>(_ctx, getState());
  enterRule(_localctx, 68, JavaScriptParser_cpp::RuleCaseBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(469);
    match(JavaScriptParser_cpp::OpenBrace);
    setState(471);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaScriptParser_cpp::Case) {
      setState(470);
      caseClauses();
    }
    setState(477);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaScriptParser_cpp::Default) {
      setState(473);
      defaultClause();
      setState(475);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaScriptParser_cpp::Case) {
        setState(474);
        caseClauses();
      }
    }
    setState(479);
    match(JavaScriptParser_cpp::CloseBrace);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaseClausesContext ------------------------------------------------------------------

JavaScriptParser_cpp::CaseClausesContext::CaseClausesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaScriptParser_cpp::CaseClauseContext *> JavaScriptParser_cpp::CaseClausesContext::caseClause() {
  return getRuleContexts<JavaScriptParser_cpp::CaseClauseContext>();
}

JavaScriptParser_cpp::CaseClauseContext* JavaScriptParser_cpp::CaseClausesContext::caseClause(size_t i) {
  return getRuleContext<JavaScriptParser_cpp::CaseClauseContext>(i);
}


size_t JavaScriptParser_cpp::CaseClausesContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleCaseClauses;
}

void JavaScriptParser_cpp::CaseClausesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCaseClauses(this);
}

void JavaScriptParser_cpp::CaseClausesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCaseClauses(this);
}

JavaScriptParser_cpp::CaseClausesContext* JavaScriptParser_cpp::caseClauses() {
  CaseClausesContext *_localctx = _tracker.createInstance<CaseClausesContext>(_ctx, getState());
  enterRule(_localctx, 70, JavaScriptParser_cpp::RuleCaseClauses);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(482); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(481);
      caseClause();
      setState(484); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == JavaScriptParser_cpp::Case);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaseClauseContext ------------------------------------------------------------------

JavaScriptParser_cpp::CaseClauseContext::CaseClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::CaseClauseContext::Case() {
  return getToken(JavaScriptParser_cpp::Case, 0);
}

JavaScriptParser_cpp::ExpressionSequenceContext* JavaScriptParser_cpp::CaseClauseContext::expressionSequence() {
  return getRuleContext<JavaScriptParser_cpp::ExpressionSequenceContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::CaseClauseContext::Colon() {
  return getToken(JavaScriptParser_cpp::Colon, 0);
}

JavaScriptParser_cpp::StatementListContext* JavaScriptParser_cpp::CaseClauseContext::statementList() {
  return getRuleContext<JavaScriptParser_cpp::StatementListContext>(0);
}


size_t JavaScriptParser_cpp::CaseClauseContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleCaseClause;
}

void JavaScriptParser_cpp::CaseClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCaseClause(this);
}

void JavaScriptParser_cpp::CaseClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCaseClause(this);
}

JavaScriptParser_cpp::CaseClauseContext* JavaScriptParser_cpp::caseClause() {
  CaseClauseContext *_localctx = _tracker.createInstance<CaseClauseContext>(_ctx, getState());
  enterRule(_localctx, 72, JavaScriptParser_cpp::RuleCaseClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(486);
    match(JavaScriptParser_cpp::Case);
    setState(487);
    expressionSequence();
    setState(488);
    match(JavaScriptParser_cpp::Colon);
    setState(490);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 45, _ctx)) {
    case 1: {
      setState(489);
      statementList();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DefaultClauseContext ------------------------------------------------------------------

JavaScriptParser_cpp::DefaultClauseContext::DefaultClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::DefaultClauseContext::Default() {
  return getToken(JavaScriptParser_cpp::Default, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::DefaultClauseContext::Colon() {
  return getToken(JavaScriptParser_cpp::Colon, 0);
}

JavaScriptParser_cpp::StatementListContext* JavaScriptParser_cpp::DefaultClauseContext::statementList() {
  return getRuleContext<JavaScriptParser_cpp::StatementListContext>(0);
}


size_t JavaScriptParser_cpp::DefaultClauseContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleDefaultClause;
}

void JavaScriptParser_cpp::DefaultClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefaultClause(this);
}

void JavaScriptParser_cpp::DefaultClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefaultClause(this);
}

JavaScriptParser_cpp::DefaultClauseContext* JavaScriptParser_cpp::defaultClause() {
  DefaultClauseContext *_localctx = _tracker.createInstance<DefaultClauseContext>(_ctx, getState());
  enterRule(_localctx, 74, JavaScriptParser_cpp::RuleDefaultClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(492);
    match(JavaScriptParser_cpp::Default);
    setState(493);
    match(JavaScriptParser_cpp::Colon);
    setState(495);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx)) {
    case 1: {
      setState(494);
      statementList();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabelledStatementContext ------------------------------------------------------------------

JavaScriptParser_cpp::LabelledStatementContext::LabelledStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser_cpp::IdentifierContext* JavaScriptParser_cpp::LabelledStatementContext::identifier() {
  return getRuleContext<JavaScriptParser_cpp::IdentifierContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::LabelledStatementContext::Colon() {
  return getToken(JavaScriptParser_cpp::Colon, 0);
}

JavaScriptParser_cpp::StatementContext* JavaScriptParser_cpp::LabelledStatementContext::statement() {
  return getRuleContext<JavaScriptParser_cpp::StatementContext>(0);
}


size_t JavaScriptParser_cpp::LabelledStatementContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleLabelledStatement;
}

void JavaScriptParser_cpp::LabelledStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLabelledStatement(this);
}

void JavaScriptParser_cpp::LabelledStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLabelledStatement(this);
}

JavaScriptParser_cpp::LabelledStatementContext* JavaScriptParser_cpp::labelledStatement() {
  LabelledStatementContext *_localctx = _tracker.createInstance<LabelledStatementContext>(_ctx, getState());
  enterRule(_localctx, 76, JavaScriptParser_cpp::RuleLabelledStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(497);
    identifier();
    setState(498);
    match(JavaScriptParser_cpp::Colon);
    setState(499);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ThrowStatementContext ------------------------------------------------------------------

JavaScriptParser_cpp::ThrowStatementContext::ThrowStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::ThrowStatementContext::Throw() {
  return getToken(JavaScriptParser_cpp::Throw, 0);
}

JavaScriptParser_cpp::ExpressionSequenceContext* JavaScriptParser_cpp::ThrowStatementContext::expressionSequence() {
  return getRuleContext<JavaScriptParser_cpp::ExpressionSequenceContext>(0);
}

JavaScriptParser_cpp::EosContext* JavaScriptParser_cpp::ThrowStatementContext::eos() {
  return getRuleContext<JavaScriptParser_cpp::EosContext>(0);
}


size_t JavaScriptParser_cpp::ThrowStatementContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleThrowStatement;
}

void JavaScriptParser_cpp::ThrowStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterThrowStatement(this);
}

void JavaScriptParser_cpp::ThrowStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitThrowStatement(this);
}

JavaScriptParser_cpp::ThrowStatementContext* JavaScriptParser_cpp::throwStatement() {
  ThrowStatementContext *_localctx = _tracker.createInstance<ThrowStatementContext>(_ctx, getState());
  enterRule(_localctx, 78, JavaScriptParser_cpp::RuleThrowStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(501);
    match(JavaScriptParser_cpp::Throw);
    setState(502);

    if (!(this->notLineTerminator())) throw FailedPredicateException(this, "this->notLineTerminator()");
    setState(503);
    expressionSequence();
    setState(504);
    eos();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TryStatementContext ------------------------------------------------------------------

JavaScriptParser_cpp::TryStatementContext::TryStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::TryStatementContext::Try() {
  return getToken(JavaScriptParser_cpp::Try, 0);
}

JavaScriptParser_cpp::BlockContext* JavaScriptParser_cpp::TryStatementContext::block() {
  return getRuleContext<JavaScriptParser_cpp::BlockContext>(0);
}

JavaScriptParser_cpp::CatchProductionContext* JavaScriptParser_cpp::TryStatementContext::catchProduction() {
  return getRuleContext<JavaScriptParser_cpp::CatchProductionContext>(0);
}

JavaScriptParser_cpp::FinallyProductionContext* JavaScriptParser_cpp::TryStatementContext::finallyProduction() {
  return getRuleContext<JavaScriptParser_cpp::FinallyProductionContext>(0);
}


size_t JavaScriptParser_cpp::TryStatementContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleTryStatement;
}

void JavaScriptParser_cpp::TryStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTryStatement(this);
}

void JavaScriptParser_cpp::TryStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTryStatement(this);
}

JavaScriptParser_cpp::TryStatementContext* JavaScriptParser_cpp::tryStatement() {
  TryStatementContext *_localctx = _tracker.createInstance<TryStatementContext>(_ctx, getState());
  enterRule(_localctx, 80, JavaScriptParser_cpp::RuleTryStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(506);
    match(JavaScriptParser_cpp::Try);
    setState(507);
    block();
    setState(513);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaScriptParser_cpp::Catch: {
        setState(508);
        catchProduction();
        setState(510);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 47, _ctx)) {
        case 1: {
          setState(509);
          finallyProduction();
          break;
        }

        default:
          break;
        }
        break;
      }

      case JavaScriptParser_cpp::Finally: {
        setState(512);
        finallyProduction();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatchProductionContext ------------------------------------------------------------------

JavaScriptParser_cpp::CatchProductionContext::CatchProductionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::CatchProductionContext::Catch() {
  return getToken(JavaScriptParser_cpp::Catch, 0);
}

JavaScriptParser_cpp::BlockContext* JavaScriptParser_cpp::CatchProductionContext::block() {
  return getRuleContext<JavaScriptParser_cpp::BlockContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::CatchProductionContext::OpenParen() {
  return getToken(JavaScriptParser_cpp::OpenParen, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::CatchProductionContext::CloseParen() {
  return getToken(JavaScriptParser_cpp::CloseParen, 0);
}

JavaScriptParser_cpp::AssignableContext* JavaScriptParser_cpp::CatchProductionContext::assignable() {
  return getRuleContext<JavaScriptParser_cpp::AssignableContext>(0);
}


size_t JavaScriptParser_cpp::CatchProductionContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleCatchProduction;
}

void JavaScriptParser_cpp::CatchProductionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCatchProduction(this);
}

void JavaScriptParser_cpp::CatchProductionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCatchProduction(this);
}

JavaScriptParser_cpp::CatchProductionContext* JavaScriptParser_cpp::catchProduction() {
  CatchProductionContext *_localctx = _tracker.createInstance<CatchProductionContext>(_ctx, getState());
  enterRule(_localctx, 82, JavaScriptParser_cpp::RuleCatchProduction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(515);
    match(JavaScriptParser_cpp::Catch);
    setState(521);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaScriptParser_cpp::OpenParen) {
      setState(516);
      match(JavaScriptParser_cpp::OpenParen);
      setState(518);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaScriptParser_cpp::OpenBracket

      || _la == JavaScriptParser_cpp::OpenBrace || ((((_la - 73) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 73)) & 1125899906842623) != 0)) {
        setState(517);
        assignable();
      }
      setState(520);
      match(JavaScriptParser_cpp::CloseParen);
    }
    setState(523);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FinallyProductionContext ------------------------------------------------------------------

JavaScriptParser_cpp::FinallyProductionContext::FinallyProductionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::FinallyProductionContext::Finally() {
  return getToken(JavaScriptParser_cpp::Finally, 0);
}

JavaScriptParser_cpp::BlockContext* JavaScriptParser_cpp::FinallyProductionContext::block() {
  return getRuleContext<JavaScriptParser_cpp::BlockContext>(0);
}


size_t JavaScriptParser_cpp::FinallyProductionContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleFinallyProduction;
}

void JavaScriptParser_cpp::FinallyProductionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFinallyProduction(this);
}

void JavaScriptParser_cpp::FinallyProductionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFinallyProduction(this);
}

JavaScriptParser_cpp::FinallyProductionContext* JavaScriptParser_cpp::finallyProduction() {
  FinallyProductionContext *_localctx = _tracker.createInstance<FinallyProductionContext>(_ctx, getState());
  enterRule(_localctx, 84, JavaScriptParser_cpp::RuleFinallyProduction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(525);
    match(JavaScriptParser_cpp::Finally);
    setState(526);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DebuggerStatementContext ------------------------------------------------------------------

JavaScriptParser_cpp::DebuggerStatementContext::DebuggerStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::DebuggerStatementContext::Debugger() {
  return getToken(JavaScriptParser_cpp::Debugger, 0);
}

JavaScriptParser_cpp::EosContext* JavaScriptParser_cpp::DebuggerStatementContext::eos() {
  return getRuleContext<JavaScriptParser_cpp::EosContext>(0);
}


size_t JavaScriptParser_cpp::DebuggerStatementContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleDebuggerStatement;
}

void JavaScriptParser_cpp::DebuggerStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDebuggerStatement(this);
}

void JavaScriptParser_cpp::DebuggerStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDebuggerStatement(this);
}

JavaScriptParser_cpp::DebuggerStatementContext* JavaScriptParser_cpp::debuggerStatement() {
  DebuggerStatementContext *_localctx = _tracker.createInstance<DebuggerStatementContext>(_ctx, getState());
  enterRule(_localctx, 86, JavaScriptParser_cpp::RuleDebuggerStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(528);
    match(JavaScriptParser_cpp::Debugger);
    setState(529);
    eos();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionDeclarationContext ------------------------------------------------------------------

JavaScriptParser_cpp::FunctionDeclarationContext::FunctionDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::FunctionDeclarationContext::Function_() {
  return getToken(JavaScriptParser_cpp::Function_, 0);
}

JavaScriptParser_cpp::IdentifierContext* JavaScriptParser_cpp::FunctionDeclarationContext::identifier() {
  return getRuleContext<JavaScriptParser_cpp::IdentifierContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::FunctionDeclarationContext::OpenParen() {
  return getToken(JavaScriptParser_cpp::OpenParen, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::FunctionDeclarationContext::CloseParen() {
  return getToken(JavaScriptParser_cpp::CloseParen, 0);
}

JavaScriptParser_cpp::FunctionBodyContext* JavaScriptParser_cpp::FunctionDeclarationContext::functionBody() {
  return getRuleContext<JavaScriptParser_cpp::FunctionBodyContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::FunctionDeclarationContext::Async() {
  return getToken(JavaScriptParser_cpp::Async, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::FunctionDeclarationContext::Multiply() {
  return getToken(JavaScriptParser_cpp::Multiply, 0);
}

JavaScriptParser_cpp::FormalParameterListContext* JavaScriptParser_cpp::FunctionDeclarationContext::formalParameterList() {
  return getRuleContext<JavaScriptParser_cpp::FormalParameterListContext>(0);
}


size_t JavaScriptParser_cpp::FunctionDeclarationContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleFunctionDeclaration;
}

void JavaScriptParser_cpp::FunctionDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionDeclaration(this);
}

void JavaScriptParser_cpp::FunctionDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionDeclaration(this);
}

JavaScriptParser_cpp::FunctionDeclarationContext* JavaScriptParser_cpp::functionDeclaration() {
  FunctionDeclarationContext *_localctx = _tracker.createInstance<FunctionDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 88, JavaScriptParser_cpp::RuleFunctionDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(532);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaScriptParser_cpp::Async) {
      setState(531);
      match(JavaScriptParser_cpp::Async);
    }
    setState(534);
    match(JavaScriptParser_cpp::Function_);
    setState(536);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaScriptParser_cpp::Multiply) {
      setState(535);
      match(JavaScriptParser_cpp::Multiply);
    }
    setState(538);
    identifier();
    setState(539);
    match(JavaScriptParser_cpp::OpenParen);
    setState(541);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 262688) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 73)) & 1125899906842623) != 0)) {
      setState(540);
      formalParameterList();
    }
    setState(543);
    match(JavaScriptParser_cpp::CloseParen);
    setState(544);
    functionBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassDeclarationContext ------------------------------------------------------------------

JavaScriptParser_cpp::ClassDeclarationContext::ClassDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::ClassDeclarationContext::Class() {
  return getToken(JavaScriptParser_cpp::Class, 0);
}

JavaScriptParser_cpp::IdentifierContext* JavaScriptParser_cpp::ClassDeclarationContext::identifier() {
  return getRuleContext<JavaScriptParser_cpp::IdentifierContext>(0);
}

JavaScriptParser_cpp::ClassTailContext* JavaScriptParser_cpp::ClassDeclarationContext::classTail() {
  return getRuleContext<JavaScriptParser_cpp::ClassTailContext>(0);
}


size_t JavaScriptParser_cpp::ClassDeclarationContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleClassDeclaration;
}

void JavaScriptParser_cpp::ClassDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassDeclaration(this);
}

void JavaScriptParser_cpp::ClassDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassDeclaration(this);
}

JavaScriptParser_cpp::ClassDeclarationContext* JavaScriptParser_cpp::classDeclaration() {
  ClassDeclarationContext *_localctx = _tracker.createInstance<ClassDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 90, JavaScriptParser_cpp::RuleClassDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(546);
    match(JavaScriptParser_cpp::Class);
    setState(547);
    identifier();
    setState(548);
    classTail();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassTailContext ------------------------------------------------------------------

JavaScriptParser_cpp::ClassTailContext::ClassTailContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::ClassTailContext::OpenBrace() {
  return getToken(JavaScriptParser_cpp::OpenBrace, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::ClassTailContext::CloseBrace() {
  return getToken(JavaScriptParser_cpp::CloseBrace, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::ClassTailContext::Extends() {
  return getToken(JavaScriptParser_cpp::Extends, 0);
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::ClassTailContext::singleExpression() {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(0);
}

std::vector<JavaScriptParser_cpp::ClassElementContext *> JavaScriptParser_cpp::ClassTailContext::classElement() {
  return getRuleContexts<JavaScriptParser_cpp::ClassElementContext>();
}

JavaScriptParser_cpp::ClassElementContext* JavaScriptParser_cpp::ClassTailContext::classElement(size_t i) {
  return getRuleContext<JavaScriptParser_cpp::ClassElementContext>(i);
}


size_t JavaScriptParser_cpp::ClassTailContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleClassTail;
}

void JavaScriptParser_cpp::ClassTailContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassTail(this);
}

void JavaScriptParser_cpp::ClassTailContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassTail(this);
}

JavaScriptParser_cpp::ClassTailContext* JavaScriptParser_cpp::classTail() {
  ClassTailContext *_localctx = _tracker.createInstance<ClassTailContext>(_ctx, getState());
  enterRule(_localctx, 92, JavaScriptParser_cpp::RuleClassTail);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(552);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaScriptParser_cpp::Extends) {
      setState(550);
      match(JavaScriptParser_cpp::Extends);
      setState(551);
      singleExpression(0);
    }
    setState(554);
    match(JavaScriptParser_cpp::OpenBrace);
    setState(558);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(555);
        classElement(); 
      }
      setState(560);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx);
    }
    setState(561);
    match(JavaScriptParser_cpp::CloseBrace);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassElementContext ------------------------------------------------------------------

JavaScriptParser_cpp::ClassElementContext::ClassElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser_cpp::MethodDefinitionContext* JavaScriptParser_cpp::ClassElementContext::methodDefinition() {
  return getRuleContext<JavaScriptParser_cpp::MethodDefinitionContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::ClassElementContext::Static() {
  return getToken(JavaScriptParser_cpp::Static, 0);
}

JavaScriptParser_cpp::IdentifierContext* JavaScriptParser_cpp::ClassElementContext::identifier() {
  return getRuleContext<JavaScriptParser_cpp::IdentifierContext>(0);
}

JavaScriptParser_cpp::FieldDefinitionContext* JavaScriptParser_cpp::ClassElementContext::fieldDefinition() {
  return getRuleContext<JavaScriptParser_cpp::FieldDefinitionContext>(0);
}

JavaScriptParser_cpp::BlockContext* JavaScriptParser_cpp::ClassElementContext::block() {
  return getRuleContext<JavaScriptParser_cpp::BlockContext>(0);
}

JavaScriptParser_cpp::EmptyStatement_Context* JavaScriptParser_cpp::ClassElementContext::emptyStatement_() {
  return getRuleContext<JavaScriptParser_cpp::EmptyStatement_Context>(0);
}


size_t JavaScriptParser_cpp::ClassElementContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleClassElement;
}

void JavaScriptParser_cpp::ClassElementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassElement(this);
}

void JavaScriptParser_cpp::ClassElementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassElement(this);
}

JavaScriptParser_cpp::ClassElementContext* JavaScriptParser_cpp::classElement() {
  ClassElementContext *_localctx = _tracker.createInstance<ClassElementContext>(_ctx, getState());
  enterRule(_localctx, 94, JavaScriptParser_cpp::RuleClassElement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(582);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(566);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 56, _ctx)) {
      case 1: {
        setState(563);
        match(JavaScriptParser_cpp::Static);
        break;
      }

      case 2: {
        setState(564);

        if (!(this->n("static"))) throw FailedPredicateException(this, "this->n(\"static\")");
        setState(565);
        identifier();
        break;
      }

      default:
        break;
      }
      setState(568);
      methodDefinition();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(572);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx)) {
      case 1: {
        setState(569);
        match(JavaScriptParser_cpp::Static);
        break;
      }

      case 2: {
        setState(570);

        if (!(this->n("static"))) throw FailedPredicateException(this, "this->n(\"static\")");
        setState(571);
        identifier();
        break;
      }

      default:
        break;
      }
      setState(574);
      fieldDefinition();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(578);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx)) {
      case 1: {
        setState(575);
        match(JavaScriptParser_cpp::Static);
        break;
      }

      case 2: {
        setState(576);

        if (!(this->n("static"))) throw FailedPredicateException(this, "this->n(\"static\")");
        setState(577);
        identifier();
        break;
      }

      default:
        break;
      }
      setState(580);
      block();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(581);
      emptyStatement_();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodDefinitionContext ------------------------------------------------------------------

JavaScriptParser_cpp::MethodDefinitionContext::MethodDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser_cpp::ClassElementNameContext* JavaScriptParser_cpp::MethodDefinitionContext::classElementName() {
  return getRuleContext<JavaScriptParser_cpp::ClassElementNameContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::MethodDefinitionContext::OpenParen() {
  return getToken(JavaScriptParser_cpp::OpenParen, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::MethodDefinitionContext::CloseParen() {
  return getToken(JavaScriptParser_cpp::CloseParen, 0);
}

JavaScriptParser_cpp::FunctionBodyContext* JavaScriptParser_cpp::MethodDefinitionContext::functionBody() {
  return getRuleContext<JavaScriptParser_cpp::FunctionBodyContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::MethodDefinitionContext::Async() {
  return getToken(JavaScriptParser_cpp::Async, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::MethodDefinitionContext::Multiply() {
  return getToken(JavaScriptParser_cpp::Multiply, 0);
}

JavaScriptParser_cpp::FormalParameterListContext* JavaScriptParser_cpp::MethodDefinitionContext::formalParameterList() {
  return getRuleContext<JavaScriptParser_cpp::FormalParameterListContext>(0);
}

JavaScriptParser_cpp::GetterContext* JavaScriptParser_cpp::MethodDefinitionContext::getter() {
  return getRuleContext<JavaScriptParser_cpp::GetterContext>(0);
}

JavaScriptParser_cpp::SetterContext* JavaScriptParser_cpp::MethodDefinitionContext::setter() {
  return getRuleContext<JavaScriptParser_cpp::SetterContext>(0);
}


size_t JavaScriptParser_cpp::MethodDefinitionContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleMethodDefinition;
}

void JavaScriptParser_cpp::MethodDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodDefinition(this);
}

void JavaScriptParser_cpp::MethodDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodDefinition(this);
}

JavaScriptParser_cpp::MethodDefinitionContext* JavaScriptParser_cpp::methodDefinition() {
  MethodDefinitionContext *_localctx = _tracker.createInstance<MethodDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 96, JavaScriptParser_cpp::RuleMethodDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(618);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 66, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(586);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 60, _ctx)) {
      case 1: {
        setState(584);
        match(JavaScriptParser_cpp::Async);
        setState(585);

        if (!(this->notLineTerminator())) throw FailedPredicateException(this, "this->notLineTerminator()");
        break;
      }

      default:
        break;
      }
      setState(589);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaScriptParser_cpp::Multiply) {
        setState(588);
        match(JavaScriptParser_cpp::Multiply);
      }
      setState(591);
      classElementName();
      setState(592);
      match(JavaScriptParser_cpp::OpenParen);
      setState(594);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 262688) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 73)) & 1125899906842623) != 0)) {
        setState(593);
        formalParameterList();
      }
      setState(596);
      match(JavaScriptParser_cpp::CloseParen);
      setState(597);
      functionBody();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(600);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 63, _ctx)) {
      case 1: {
        setState(599);
        match(JavaScriptParser_cpp::Multiply);
        break;
      }

      default:
        break;
      }
      setState(602);
      getter();
      setState(603);
      match(JavaScriptParser_cpp::OpenParen);
      setState(604);
      match(JavaScriptParser_cpp::CloseParen);
      setState(605);
      functionBody();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(608);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 64, _ctx)) {
      case 1: {
        setState(607);
        match(JavaScriptParser_cpp::Multiply);
        break;
      }

      default:
        break;
      }
      setState(610);
      setter();
      setState(611);
      match(JavaScriptParser_cpp::OpenParen);
      setState(613);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 262688) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 73)) & 1125899906842623) != 0)) {
        setState(612);
        formalParameterList();
      }
      setState(615);
      match(JavaScriptParser_cpp::CloseParen);
      setState(616);
      functionBody();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldDefinitionContext ------------------------------------------------------------------

JavaScriptParser_cpp::FieldDefinitionContext::FieldDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser_cpp::ClassElementNameContext* JavaScriptParser_cpp::FieldDefinitionContext::classElementName() {
  return getRuleContext<JavaScriptParser_cpp::ClassElementNameContext>(0);
}

JavaScriptParser_cpp::InitializerContext* JavaScriptParser_cpp::FieldDefinitionContext::initializer() {
  return getRuleContext<JavaScriptParser_cpp::InitializerContext>(0);
}


size_t JavaScriptParser_cpp::FieldDefinitionContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleFieldDefinition;
}

void JavaScriptParser_cpp::FieldDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFieldDefinition(this);
}

void JavaScriptParser_cpp::FieldDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFieldDefinition(this);
}

JavaScriptParser_cpp::FieldDefinitionContext* JavaScriptParser_cpp::fieldDefinition() {
  FieldDefinitionContext *_localctx = _tracker.createInstance<FieldDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 98, JavaScriptParser_cpp::RuleFieldDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(620);
    classElementName();
    setState(622);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx)) {
    case 1: {
      setState(621);
      initializer();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassElementNameContext ------------------------------------------------------------------

JavaScriptParser_cpp::ClassElementNameContext::ClassElementNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser_cpp::PropertyNameContext* JavaScriptParser_cpp::ClassElementNameContext::propertyName() {
  return getRuleContext<JavaScriptParser_cpp::PropertyNameContext>(0);
}

JavaScriptParser_cpp::PrivateIdentifierContext* JavaScriptParser_cpp::ClassElementNameContext::privateIdentifier() {
  return getRuleContext<JavaScriptParser_cpp::PrivateIdentifierContext>(0);
}


size_t JavaScriptParser_cpp::ClassElementNameContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleClassElementName;
}

void JavaScriptParser_cpp::ClassElementNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassElementName(this);
}

void JavaScriptParser_cpp::ClassElementNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassElementName(this);
}

JavaScriptParser_cpp::ClassElementNameContext* JavaScriptParser_cpp::classElementName() {
  ClassElementNameContext *_localctx = _tracker.createInstance<ClassElementNameContext>(_ctx, getState());
  enterRule(_localctx, 100, JavaScriptParser_cpp::RuleClassElementName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(626);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaScriptParser_cpp::OpenBracket:
      case JavaScriptParser_cpp::NullLiteral:
      case JavaScriptParser_cpp::BooleanLiteral:
      case JavaScriptParser_cpp::DecimalLiteral:
      case JavaScriptParser_cpp::HexIntegerLiteral:
      case JavaScriptParser_cpp::OctalIntegerLiteral:
      case JavaScriptParser_cpp::OctalIntegerLiteral2:
      case JavaScriptParser_cpp::BinaryIntegerLiteral:
      case JavaScriptParser_cpp::Break:
      case JavaScriptParser_cpp::Do:
      case JavaScriptParser_cpp::Instanceof:
      case JavaScriptParser_cpp::Typeof:
      case JavaScriptParser_cpp::Case:
      case JavaScriptParser_cpp::Else:
      case JavaScriptParser_cpp::New:
      case JavaScriptParser_cpp::Var:
      case JavaScriptParser_cpp::Catch:
      case JavaScriptParser_cpp::Finally:
      case JavaScriptParser_cpp::Return:
      case JavaScriptParser_cpp::Void:
      case JavaScriptParser_cpp::Continue:
      case JavaScriptParser_cpp::For:
      case JavaScriptParser_cpp::Switch:
      case JavaScriptParser_cpp::While:
      case JavaScriptParser_cpp::Debugger:
      case JavaScriptParser_cpp::Function_:
      case JavaScriptParser_cpp::This:
      case JavaScriptParser_cpp::With:
      case JavaScriptParser_cpp::Default:
      case JavaScriptParser_cpp::If:
      case JavaScriptParser_cpp::Throw:
      case JavaScriptParser_cpp::Delete:
      case JavaScriptParser_cpp::In:
      case JavaScriptParser_cpp::Try:
      case JavaScriptParser_cpp::As:
      case JavaScriptParser_cpp::From:
      case JavaScriptParser_cpp::Of:
      case JavaScriptParser_cpp::Yield:
      case JavaScriptParser_cpp::YieldStar:
      case JavaScriptParser_cpp::Class:
      case JavaScriptParser_cpp::Enum:
      case JavaScriptParser_cpp::Extends:
      case JavaScriptParser_cpp::Super:
      case JavaScriptParser_cpp::Const:
      case JavaScriptParser_cpp::Export:
      case JavaScriptParser_cpp::Import:
      case JavaScriptParser_cpp::Async:
      case JavaScriptParser_cpp::Await:
      case JavaScriptParser_cpp::Implements:
      case JavaScriptParser_cpp::StrictLet:
      case JavaScriptParser_cpp::NonStrictLet:
      case JavaScriptParser_cpp::Private:
      case JavaScriptParser_cpp::Public:
      case JavaScriptParser_cpp::Interface:
      case JavaScriptParser_cpp::Package:
      case JavaScriptParser_cpp::Protected:
      case JavaScriptParser_cpp::Static:
      case JavaScriptParser_cpp::Identifier:
      case JavaScriptParser_cpp::StringLiteral: {
        enterOuterAlt(_localctx, 1);
        setState(624);
        propertyName();
        break;
      }

      case JavaScriptParser_cpp::Hashtag: {
        enterOuterAlt(_localctx, 2);
        setState(625);
        privateIdentifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrivateIdentifierContext ------------------------------------------------------------------

JavaScriptParser_cpp::PrivateIdentifierContext::PrivateIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::PrivateIdentifierContext::Hashtag() {
  return getToken(JavaScriptParser_cpp::Hashtag, 0);
}

JavaScriptParser_cpp::IdentifierNameContext* JavaScriptParser_cpp::PrivateIdentifierContext::identifierName() {
  return getRuleContext<JavaScriptParser_cpp::IdentifierNameContext>(0);
}


size_t JavaScriptParser_cpp::PrivateIdentifierContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RulePrivateIdentifier;
}

void JavaScriptParser_cpp::PrivateIdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrivateIdentifier(this);
}

void JavaScriptParser_cpp::PrivateIdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrivateIdentifier(this);
}

JavaScriptParser_cpp::PrivateIdentifierContext* JavaScriptParser_cpp::privateIdentifier() {
  PrivateIdentifierContext *_localctx = _tracker.createInstance<PrivateIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 102, JavaScriptParser_cpp::RulePrivateIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(628);
    match(JavaScriptParser_cpp::Hashtag);
    setState(629);
    identifierName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormalParameterListContext ------------------------------------------------------------------

JavaScriptParser_cpp::FormalParameterListContext::FormalParameterListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaScriptParser_cpp::FormalParameterArgContext *> JavaScriptParser_cpp::FormalParameterListContext::formalParameterArg() {
  return getRuleContexts<JavaScriptParser_cpp::FormalParameterArgContext>();
}

JavaScriptParser_cpp::FormalParameterArgContext* JavaScriptParser_cpp::FormalParameterListContext::formalParameterArg(size_t i) {
  return getRuleContext<JavaScriptParser_cpp::FormalParameterArgContext>(i);
}

std::vector<tree::TerminalNode *> JavaScriptParser_cpp::FormalParameterListContext::Comma() {
  return getTokens(JavaScriptParser_cpp::Comma);
}

tree::TerminalNode* JavaScriptParser_cpp::FormalParameterListContext::Comma(size_t i) {
  return getToken(JavaScriptParser_cpp::Comma, i);
}

JavaScriptParser_cpp::LastFormalParameterArgContext* JavaScriptParser_cpp::FormalParameterListContext::lastFormalParameterArg() {
  return getRuleContext<JavaScriptParser_cpp::LastFormalParameterArgContext>(0);
}


size_t JavaScriptParser_cpp::FormalParameterListContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleFormalParameterList;
}

void JavaScriptParser_cpp::FormalParameterListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormalParameterList(this);
}

void JavaScriptParser_cpp::FormalParameterListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormalParameterList(this);
}

JavaScriptParser_cpp::FormalParameterListContext* JavaScriptParser_cpp::formalParameterList() {
  FormalParameterListContext *_localctx = _tracker.createInstance<FormalParameterListContext>(_ctx, getState());
  enterRule(_localctx, 104, JavaScriptParser_cpp::RuleFormalParameterList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(644);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaScriptParser_cpp::OpenBracket:
      case JavaScriptParser_cpp::OpenBrace:
      case JavaScriptParser_cpp::Break:
      case JavaScriptParser_cpp::Do:
      case JavaScriptParser_cpp::Instanceof:
      case JavaScriptParser_cpp::Typeof:
      case JavaScriptParser_cpp::Case:
      case JavaScriptParser_cpp::Else:
      case JavaScriptParser_cpp::New:
      case JavaScriptParser_cpp::Var:
      case JavaScriptParser_cpp::Catch:
      case JavaScriptParser_cpp::Finally:
      case JavaScriptParser_cpp::Return:
      case JavaScriptParser_cpp::Void:
      case JavaScriptParser_cpp::Continue:
      case JavaScriptParser_cpp::For:
      case JavaScriptParser_cpp::Switch:
      case JavaScriptParser_cpp::While:
      case JavaScriptParser_cpp::Debugger:
      case JavaScriptParser_cpp::Function_:
      case JavaScriptParser_cpp::This:
      case JavaScriptParser_cpp::With:
      case JavaScriptParser_cpp::Default:
      case JavaScriptParser_cpp::If:
      case JavaScriptParser_cpp::Throw:
      case JavaScriptParser_cpp::Delete:
      case JavaScriptParser_cpp::In:
      case JavaScriptParser_cpp::Try:
      case JavaScriptParser_cpp::As:
      case JavaScriptParser_cpp::From:
      case JavaScriptParser_cpp::Of:
      case JavaScriptParser_cpp::Yield:
      case JavaScriptParser_cpp::YieldStar:
      case JavaScriptParser_cpp::Class:
      case JavaScriptParser_cpp::Enum:
      case JavaScriptParser_cpp::Extends:
      case JavaScriptParser_cpp::Super:
      case JavaScriptParser_cpp::Const:
      case JavaScriptParser_cpp::Export:
      case JavaScriptParser_cpp::Import:
      case JavaScriptParser_cpp::Async:
      case JavaScriptParser_cpp::Await:
      case JavaScriptParser_cpp::Implements:
      case JavaScriptParser_cpp::StrictLet:
      case JavaScriptParser_cpp::NonStrictLet:
      case JavaScriptParser_cpp::Private:
      case JavaScriptParser_cpp::Public:
      case JavaScriptParser_cpp::Interface:
      case JavaScriptParser_cpp::Package:
      case JavaScriptParser_cpp::Protected:
      case JavaScriptParser_cpp::Static:
      case JavaScriptParser_cpp::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(631);
        formalParameterArg();
        setState(636);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(632);
            match(JavaScriptParser_cpp::Comma);
            setState(633);
            formalParameterArg(); 
          }
          setState(638);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx);
        }
        setState(641);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == JavaScriptParser_cpp::Comma) {
          setState(639);
          match(JavaScriptParser_cpp::Comma);
          setState(640);
          lastFormalParameterArg();
        }
        break;
      }

      case JavaScriptParser_cpp::Ellipsis: {
        enterOuterAlt(_localctx, 2);
        setState(643);
        lastFormalParameterArg();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormalParameterArgContext ------------------------------------------------------------------

JavaScriptParser_cpp::FormalParameterArgContext::FormalParameterArgContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser_cpp::AssignableContext* JavaScriptParser_cpp::FormalParameterArgContext::assignable() {
  return getRuleContext<JavaScriptParser_cpp::AssignableContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::FormalParameterArgContext::Assign() {
  return getToken(JavaScriptParser_cpp::Assign, 0);
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::FormalParameterArgContext::singleExpression() {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(0);
}


size_t JavaScriptParser_cpp::FormalParameterArgContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleFormalParameterArg;
}

void JavaScriptParser_cpp::FormalParameterArgContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormalParameterArg(this);
}

void JavaScriptParser_cpp::FormalParameterArgContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormalParameterArg(this);
}

JavaScriptParser_cpp::FormalParameterArgContext* JavaScriptParser_cpp::formalParameterArg() {
  FormalParameterArgContext *_localctx = _tracker.createInstance<FormalParameterArgContext>(_ctx, getState());
  enterRule(_localctx, 106, JavaScriptParser_cpp::RuleFormalParameterArg);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(646);
    assignable();
    setState(649);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaScriptParser_cpp::Assign) {
      setState(647);
      match(JavaScriptParser_cpp::Assign);
      setState(648);
      singleExpression(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LastFormalParameterArgContext ------------------------------------------------------------------

JavaScriptParser_cpp::LastFormalParameterArgContext::LastFormalParameterArgContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::LastFormalParameterArgContext::Ellipsis() {
  return getToken(JavaScriptParser_cpp::Ellipsis, 0);
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::LastFormalParameterArgContext::singleExpression() {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(0);
}


size_t JavaScriptParser_cpp::LastFormalParameterArgContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleLastFormalParameterArg;
}

void JavaScriptParser_cpp::LastFormalParameterArgContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLastFormalParameterArg(this);
}

void JavaScriptParser_cpp::LastFormalParameterArgContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLastFormalParameterArg(this);
}

JavaScriptParser_cpp::LastFormalParameterArgContext* JavaScriptParser_cpp::lastFormalParameterArg() {
  LastFormalParameterArgContext *_localctx = _tracker.createInstance<LastFormalParameterArgContext>(_ctx, getState());
  enterRule(_localctx, 108, JavaScriptParser_cpp::RuleLastFormalParameterArg);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(651);
    match(JavaScriptParser_cpp::Ellipsis);
    setState(652);
    singleExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionBodyContext ------------------------------------------------------------------

JavaScriptParser_cpp::FunctionBodyContext::FunctionBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::FunctionBodyContext::OpenBrace() {
  return getToken(JavaScriptParser_cpp::OpenBrace, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::FunctionBodyContext::CloseBrace() {
  return getToken(JavaScriptParser_cpp::CloseBrace, 0);
}

JavaScriptParser_cpp::SourceElementsContext* JavaScriptParser_cpp::FunctionBodyContext::sourceElements() {
  return getRuleContext<JavaScriptParser_cpp::SourceElementsContext>(0);
}


size_t JavaScriptParser_cpp::FunctionBodyContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleFunctionBody;
}

void JavaScriptParser_cpp::FunctionBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionBody(this);
}

void JavaScriptParser_cpp::FunctionBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionBody(this);
}

JavaScriptParser_cpp::FunctionBodyContext* JavaScriptParser_cpp::functionBody() {
  FunctionBodyContext *_localctx = _tracker.createInstance<FunctionBodyContext>(_ctx, getState());
  enterRule(_localctx, 110, JavaScriptParser_cpp::RuleFunctionBody);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(654);
    match(JavaScriptParser_cpp::OpenBrace);
    setState(656);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 73, _ctx)) {
    case 1: {
      setState(655);
      sourceElements();
      break;
    }

    default:
      break;
    }
    setState(658);
    match(JavaScriptParser_cpp::CloseBrace);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SourceElementsContext ------------------------------------------------------------------

JavaScriptParser_cpp::SourceElementsContext::SourceElementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaScriptParser_cpp::SourceElementContext *> JavaScriptParser_cpp::SourceElementsContext::sourceElement() {
  return getRuleContexts<JavaScriptParser_cpp::SourceElementContext>();
}

JavaScriptParser_cpp::SourceElementContext* JavaScriptParser_cpp::SourceElementsContext::sourceElement(size_t i) {
  return getRuleContext<JavaScriptParser_cpp::SourceElementContext>(i);
}


size_t JavaScriptParser_cpp::SourceElementsContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleSourceElements;
}

void JavaScriptParser_cpp::SourceElementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSourceElements(this);
}

void JavaScriptParser_cpp::SourceElementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSourceElements(this);
}

JavaScriptParser_cpp::SourceElementsContext* JavaScriptParser_cpp::sourceElements() {
  SourceElementsContext *_localctx = _tracker.createInstance<SourceElementsContext>(_ctx, getState());
  enterRule(_localctx, 112, JavaScriptParser_cpp::RuleSourceElements);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(661); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(660);
              sourceElement();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(663); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 74, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayLiteralContext ------------------------------------------------------------------

JavaScriptParser_cpp::ArrayLiteralContext::ArrayLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::ArrayLiteralContext::OpenBracket() {
  return getToken(JavaScriptParser_cpp::OpenBracket, 0);
}

JavaScriptParser_cpp::ElementListContext* JavaScriptParser_cpp::ArrayLiteralContext::elementList() {
  return getRuleContext<JavaScriptParser_cpp::ElementListContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::ArrayLiteralContext::CloseBracket() {
  return getToken(JavaScriptParser_cpp::CloseBracket, 0);
}


size_t JavaScriptParser_cpp::ArrayLiteralContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleArrayLiteral;
}

void JavaScriptParser_cpp::ArrayLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayLiteral(this);
}

void JavaScriptParser_cpp::ArrayLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayLiteral(this);
}

JavaScriptParser_cpp::ArrayLiteralContext* JavaScriptParser_cpp::arrayLiteral() {
  ArrayLiteralContext *_localctx = _tracker.createInstance<ArrayLiteralContext>(_ctx, getState());
  enterRule(_localctx, 114, JavaScriptParser_cpp::RuleArrayLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(665);
    match(JavaScriptParser_cpp::OpenBracket);
    setState(666);
    elementList();
    setState(667);
    match(JavaScriptParser_cpp::CloseBracket);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementListContext ------------------------------------------------------------------

JavaScriptParser_cpp::ElementListContext::ElementListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> JavaScriptParser_cpp::ElementListContext::Comma() {
  return getTokens(JavaScriptParser_cpp::Comma);
}

tree::TerminalNode* JavaScriptParser_cpp::ElementListContext::Comma(size_t i) {
  return getToken(JavaScriptParser_cpp::Comma, i);
}

std::vector<JavaScriptParser_cpp::ArrayElementContext *> JavaScriptParser_cpp::ElementListContext::arrayElement() {
  return getRuleContexts<JavaScriptParser_cpp::ArrayElementContext>();
}

JavaScriptParser_cpp::ArrayElementContext* JavaScriptParser_cpp::ElementListContext::arrayElement(size_t i) {
  return getRuleContext<JavaScriptParser_cpp::ArrayElementContext>(i);
}


size_t JavaScriptParser_cpp::ElementListContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleElementList;
}

void JavaScriptParser_cpp::ElementListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElementList(this);
}

void JavaScriptParser_cpp::ElementListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElementList(this);
}

JavaScriptParser_cpp::ElementListContext* JavaScriptParser_cpp::elementList() {
  ElementListContext *_localctx = _tracker.createInstance<ElementListContext>(_ctx, getState());
  enterRule(_localctx, 116, JavaScriptParser_cpp::RuleElementList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(672);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(669);
        match(JavaScriptParser_cpp::Comma); 
      }
      setState(674);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx);
    }
    setState(676);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -4611686018361064784) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 2305843009213693951) != 0)) {
      setState(675);
      arrayElement();
    }
    setState(686);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 78, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(679); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(678);
          match(JavaScriptParser_cpp::Comma);
          setState(681); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == JavaScriptParser_cpp::Comma);
        setState(683);
        arrayElement(); 
      }
      setState(688);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 78, _ctx);
    }
    setState(692);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaScriptParser_cpp::Comma) {
      setState(689);
      match(JavaScriptParser_cpp::Comma);
      setState(694);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayElementContext ------------------------------------------------------------------

JavaScriptParser_cpp::ArrayElementContext::ArrayElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::ArrayElementContext::singleExpression() {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::ArrayElementContext::Ellipsis() {
  return getToken(JavaScriptParser_cpp::Ellipsis, 0);
}


size_t JavaScriptParser_cpp::ArrayElementContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleArrayElement;
}

void JavaScriptParser_cpp::ArrayElementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayElement(this);
}

void JavaScriptParser_cpp::ArrayElementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayElement(this);
}

JavaScriptParser_cpp::ArrayElementContext* JavaScriptParser_cpp::arrayElement() {
  ArrayElementContext *_localctx = _tracker.createInstance<ArrayElementContext>(_ctx, getState());
  enterRule(_localctx, 118, JavaScriptParser_cpp::RuleArrayElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(696);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaScriptParser_cpp::Ellipsis) {
      setState(695);
      match(JavaScriptParser_cpp::Ellipsis);
    }
    setState(698);
    singleExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyAssignmentContext ------------------------------------------------------------------

JavaScriptParser_cpp::PropertyAssignmentContext::PropertyAssignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t JavaScriptParser_cpp::PropertyAssignmentContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RulePropertyAssignment;
}

void JavaScriptParser_cpp::PropertyAssignmentContext::copyFrom(PropertyAssignmentContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- PropertyExpressionAssignmentContext ------------------------------------------------------------------

JavaScriptParser_cpp::PropertyNameContext* JavaScriptParser_cpp::PropertyExpressionAssignmentContext::propertyName() {
  return getRuleContext<JavaScriptParser_cpp::PropertyNameContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::PropertyExpressionAssignmentContext::Colon() {
  return getToken(JavaScriptParser_cpp::Colon, 0);
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::PropertyExpressionAssignmentContext::singleExpression() {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(0);
}

JavaScriptParser_cpp::PropertyExpressionAssignmentContext::PropertyExpressionAssignmentContext(PropertyAssignmentContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::PropertyExpressionAssignmentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPropertyExpressionAssignment(this);
}
void JavaScriptParser_cpp::PropertyExpressionAssignmentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPropertyExpressionAssignment(this);
}
//----------------- ComputedPropertyExpressionAssignmentContext ------------------------------------------------------------------

tree::TerminalNode* JavaScriptParser_cpp::ComputedPropertyExpressionAssignmentContext::OpenBracket() {
  return getToken(JavaScriptParser_cpp::OpenBracket, 0);
}

std::vector<JavaScriptParser_cpp::SingleExpressionContext *> JavaScriptParser_cpp::ComputedPropertyExpressionAssignmentContext::singleExpression() {
  return getRuleContexts<JavaScriptParser_cpp::SingleExpressionContext>();
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::ComputedPropertyExpressionAssignmentContext::singleExpression(size_t i) {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(i);
}

tree::TerminalNode* JavaScriptParser_cpp::ComputedPropertyExpressionAssignmentContext::CloseBracket() {
  return getToken(JavaScriptParser_cpp::CloseBracket, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::ComputedPropertyExpressionAssignmentContext::Colon() {
  return getToken(JavaScriptParser_cpp::Colon, 0);
}

JavaScriptParser_cpp::ComputedPropertyExpressionAssignmentContext::ComputedPropertyExpressionAssignmentContext(PropertyAssignmentContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::ComputedPropertyExpressionAssignmentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComputedPropertyExpressionAssignment(this);
}
void JavaScriptParser_cpp::ComputedPropertyExpressionAssignmentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComputedPropertyExpressionAssignment(this);
}
//----------------- PropertyShorthandContext ------------------------------------------------------------------

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::PropertyShorthandContext::singleExpression() {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::PropertyShorthandContext::Ellipsis() {
  return getToken(JavaScriptParser_cpp::Ellipsis, 0);
}

JavaScriptParser_cpp::PropertyShorthandContext::PropertyShorthandContext(PropertyAssignmentContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::PropertyShorthandContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPropertyShorthand(this);
}
void JavaScriptParser_cpp::PropertyShorthandContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPropertyShorthand(this);
}
//----------------- PropertySetterContext ------------------------------------------------------------------

JavaScriptParser_cpp::SetterContext* JavaScriptParser_cpp::PropertySetterContext::setter() {
  return getRuleContext<JavaScriptParser_cpp::SetterContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::PropertySetterContext::OpenParen() {
  return getToken(JavaScriptParser_cpp::OpenParen, 0);
}

JavaScriptParser_cpp::FormalParameterArgContext* JavaScriptParser_cpp::PropertySetterContext::formalParameterArg() {
  return getRuleContext<JavaScriptParser_cpp::FormalParameterArgContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::PropertySetterContext::CloseParen() {
  return getToken(JavaScriptParser_cpp::CloseParen, 0);
}

JavaScriptParser_cpp::FunctionBodyContext* JavaScriptParser_cpp::PropertySetterContext::functionBody() {
  return getRuleContext<JavaScriptParser_cpp::FunctionBodyContext>(0);
}

JavaScriptParser_cpp::PropertySetterContext::PropertySetterContext(PropertyAssignmentContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::PropertySetterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPropertySetter(this);
}
void JavaScriptParser_cpp::PropertySetterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPropertySetter(this);
}
//----------------- PropertyGetterContext ------------------------------------------------------------------

JavaScriptParser_cpp::GetterContext* JavaScriptParser_cpp::PropertyGetterContext::getter() {
  return getRuleContext<JavaScriptParser_cpp::GetterContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::PropertyGetterContext::OpenParen() {
  return getToken(JavaScriptParser_cpp::OpenParen, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::PropertyGetterContext::CloseParen() {
  return getToken(JavaScriptParser_cpp::CloseParen, 0);
}

JavaScriptParser_cpp::FunctionBodyContext* JavaScriptParser_cpp::PropertyGetterContext::functionBody() {
  return getRuleContext<JavaScriptParser_cpp::FunctionBodyContext>(0);
}

JavaScriptParser_cpp::PropertyGetterContext::PropertyGetterContext(PropertyAssignmentContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::PropertyGetterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPropertyGetter(this);
}
void JavaScriptParser_cpp::PropertyGetterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPropertyGetter(this);
}
//----------------- FunctionPropertyContext ------------------------------------------------------------------

JavaScriptParser_cpp::PropertyNameContext* JavaScriptParser_cpp::FunctionPropertyContext::propertyName() {
  return getRuleContext<JavaScriptParser_cpp::PropertyNameContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::FunctionPropertyContext::OpenParen() {
  return getToken(JavaScriptParser_cpp::OpenParen, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::FunctionPropertyContext::CloseParen() {
  return getToken(JavaScriptParser_cpp::CloseParen, 0);
}

JavaScriptParser_cpp::FunctionBodyContext* JavaScriptParser_cpp::FunctionPropertyContext::functionBody() {
  return getRuleContext<JavaScriptParser_cpp::FunctionBodyContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::FunctionPropertyContext::Async() {
  return getToken(JavaScriptParser_cpp::Async, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::FunctionPropertyContext::Multiply() {
  return getToken(JavaScriptParser_cpp::Multiply, 0);
}

JavaScriptParser_cpp::FormalParameterListContext* JavaScriptParser_cpp::FunctionPropertyContext::formalParameterList() {
  return getRuleContext<JavaScriptParser_cpp::FormalParameterListContext>(0);
}

JavaScriptParser_cpp::FunctionPropertyContext::FunctionPropertyContext(PropertyAssignmentContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::FunctionPropertyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionProperty(this);
}
void JavaScriptParser_cpp::FunctionPropertyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionProperty(this);
}
JavaScriptParser_cpp::PropertyAssignmentContext* JavaScriptParser_cpp::propertyAssignment() {
  PropertyAssignmentContext *_localctx = _tracker.createInstance<PropertyAssignmentContext>(_ctx, getState());
  enterRule(_localctx, 120, JavaScriptParser_cpp::RulePropertyAssignment);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(739);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<JavaScriptParser_cpp::PropertyExpressionAssignmentContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(700);
      propertyName();
      setState(701);
      match(JavaScriptParser_cpp::Colon);
      setState(702);
      singleExpression(0);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<JavaScriptParser_cpp::ComputedPropertyExpressionAssignmentContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(704);
      match(JavaScriptParser_cpp::OpenBracket);
      setState(705);
      singleExpression(0);
      setState(706);
      match(JavaScriptParser_cpp::CloseBracket);
      setState(707);
      match(JavaScriptParser_cpp::Colon);
      setState(708);
      singleExpression(0);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<JavaScriptParser_cpp::FunctionPropertyContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(711);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 81, _ctx)) {
      case 1: {
        setState(710);
        match(JavaScriptParser_cpp::Async);
        break;
      }

      default:
        break;
      }
      setState(714);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaScriptParser_cpp::Multiply) {
        setState(713);
        match(JavaScriptParser_cpp::Multiply);
      }
      setState(716);
      propertyName();
      setState(717);
      match(JavaScriptParser_cpp::OpenParen);
      setState(719);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 262688) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 73)) & 1125899906842623) != 0)) {
        setState(718);
        formalParameterList();
      }
      setState(721);
      match(JavaScriptParser_cpp::CloseParen);
      setState(722);
      functionBody();
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<JavaScriptParser_cpp::PropertyGetterContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(724);
      getter();
      setState(725);
      match(JavaScriptParser_cpp::OpenParen);
      setState(726);
      match(JavaScriptParser_cpp::CloseParen);
      setState(727);
      functionBody();
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<JavaScriptParser_cpp::PropertySetterContext>(_localctx);
      enterOuterAlt(_localctx, 5);
      setState(729);
      setter();
      setState(730);
      match(JavaScriptParser_cpp::OpenParen);
      setState(731);
      formalParameterArg();
      setState(732);
      match(JavaScriptParser_cpp::CloseParen);
      setState(733);
      functionBody();
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<JavaScriptParser_cpp::PropertyShorthandContext>(_localctx);
      enterOuterAlt(_localctx, 6);
      setState(736);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaScriptParser_cpp::Ellipsis) {
        setState(735);
        match(JavaScriptParser_cpp::Ellipsis);
      }
      setState(738);
      singleExpression(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyNameContext ------------------------------------------------------------------

JavaScriptParser_cpp::PropertyNameContext::PropertyNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser_cpp::IdentifierNameContext* JavaScriptParser_cpp::PropertyNameContext::identifierName() {
  return getRuleContext<JavaScriptParser_cpp::IdentifierNameContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::PropertyNameContext::StringLiteral() {
  return getToken(JavaScriptParser_cpp::StringLiteral, 0);
}

JavaScriptParser_cpp::NumericLiteralContext* JavaScriptParser_cpp::PropertyNameContext::numericLiteral() {
  return getRuleContext<JavaScriptParser_cpp::NumericLiteralContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::PropertyNameContext::OpenBracket() {
  return getToken(JavaScriptParser_cpp::OpenBracket, 0);
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::PropertyNameContext::singleExpression() {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::PropertyNameContext::CloseBracket() {
  return getToken(JavaScriptParser_cpp::CloseBracket, 0);
}


size_t JavaScriptParser_cpp::PropertyNameContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RulePropertyName;
}

void JavaScriptParser_cpp::PropertyNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPropertyName(this);
}

void JavaScriptParser_cpp::PropertyNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPropertyName(this);
}

JavaScriptParser_cpp::PropertyNameContext* JavaScriptParser_cpp::propertyName() {
  PropertyNameContext *_localctx = _tracker.createInstance<PropertyNameContext>(_ctx, getState());
  enterRule(_localctx, 122, JavaScriptParser_cpp::RulePropertyName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(748);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaScriptParser_cpp::NullLiteral:
      case JavaScriptParser_cpp::BooleanLiteral:
      case JavaScriptParser_cpp::Break:
      case JavaScriptParser_cpp::Do:
      case JavaScriptParser_cpp::Instanceof:
      case JavaScriptParser_cpp::Typeof:
      case JavaScriptParser_cpp::Case:
      case JavaScriptParser_cpp::Else:
      case JavaScriptParser_cpp::New:
      case JavaScriptParser_cpp::Var:
      case JavaScriptParser_cpp::Catch:
      case JavaScriptParser_cpp::Finally:
      case JavaScriptParser_cpp::Return:
      case JavaScriptParser_cpp::Void:
      case JavaScriptParser_cpp::Continue:
      case JavaScriptParser_cpp::For:
      case JavaScriptParser_cpp::Switch:
      case JavaScriptParser_cpp::While:
      case JavaScriptParser_cpp::Debugger:
      case JavaScriptParser_cpp::Function_:
      case JavaScriptParser_cpp::This:
      case JavaScriptParser_cpp::With:
      case JavaScriptParser_cpp::Default:
      case JavaScriptParser_cpp::If:
      case JavaScriptParser_cpp::Throw:
      case JavaScriptParser_cpp::Delete:
      case JavaScriptParser_cpp::In:
      case JavaScriptParser_cpp::Try:
      case JavaScriptParser_cpp::As:
      case JavaScriptParser_cpp::From:
      case JavaScriptParser_cpp::Of:
      case JavaScriptParser_cpp::Yield:
      case JavaScriptParser_cpp::YieldStar:
      case JavaScriptParser_cpp::Class:
      case JavaScriptParser_cpp::Enum:
      case JavaScriptParser_cpp::Extends:
      case JavaScriptParser_cpp::Super:
      case JavaScriptParser_cpp::Const:
      case JavaScriptParser_cpp::Export:
      case JavaScriptParser_cpp::Import:
      case JavaScriptParser_cpp::Async:
      case JavaScriptParser_cpp::Await:
      case JavaScriptParser_cpp::Implements:
      case JavaScriptParser_cpp::StrictLet:
      case JavaScriptParser_cpp::NonStrictLet:
      case JavaScriptParser_cpp::Private:
      case JavaScriptParser_cpp::Public:
      case JavaScriptParser_cpp::Interface:
      case JavaScriptParser_cpp::Package:
      case JavaScriptParser_cpp::Protected:
      case JavaScriptParser_cpp::Static:
      case JavaScriptParser_cpp::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(741);
        identifierName();
        break;
      }

      case JavaScriptParser_cpp::StringLiteral: {
        enterOuterAlt(_localctx, 2);
        setState(742);
        match(JavaScriptParser_cpp::StringLiteral);
        break;
      }

      case JavaScriptParser_cpp::DecimalLiteral:
      case JavaScriptParser_cpp::HexIntegerLiteral:
      case JavaScriptParser_cpp::OctalIntegerLiteral:
      case JavaScriptParser_cpp::OctalIntegerLiteral2:
      case JavaScriptParser_cpp::BinaryIntegerLiteral: {
        enterOuterAlt(_localctx, 3);
        setState(743);
        numericLiteral();
        break;
      }

      case JavaScriptParser_cpp::OpenBracket: {
        enterOuterAlt(_localctx, 4);
        setState(744);
        match(JavaScriptParser_cpp::OpenBracket);
        setState(745);
        singleExpression(0);
        setState(746);
        match(JavaScriptParser_cpp::CloseBracket);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgumentsContext ------------------------------------------------------------------

JavaScriptParser_cpp::ArgumentsContext::ArgumentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::ArgumentsContext::OpenParen() {
  return getToken(JavaScriptParser_cpp::OpenParen, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::ArgumentsContext::CloseParen() {
  return getToken(JavaScriptParser_cpp::CloseParen, 0);
}

std::vector<JavaScriptParser_cpp::ArgumentContext *> JavaScriptParser_cpp::ArgumentsContext::argument() {
  return getRuleContexts<JavaScriptParser_cpp::ArgumentContext>();
}

JavaScriptParser_cpp::ArgumentContext* JavaScriptParser_cpp::ArgumentsContext::argument(size_t i) {
  return getRuleContext<JavaScriptParser_cpp::ArgumentContext>(i);
}

std::vector<tree::TerminalNode *> JavaScriptParser_cpp::ArgumentsContext::Comma() {
  return getTokens(JavaScriptParser_cpp::Comma);
}

tree::TerminalNode* JavaScriptParser_cpp::ArgumentsContext::Comma(size_t i) {
  return getToken(JavaScriptParser_cpp::Comma, i);
}


size_t JavaScriptParser_cpp::ArgumentsContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleArguments;
}

void JavaScriptParser_cpp::ArgumentsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArguments(this);
}

void JavaScriptParser_cpp::ArgumentsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArguments(this);
}

JavaScriptParser_cpp::ArgumentsContext* JavaScriptParser_cpp::arguments() {
  ArgumentsContext *_localctx = _tracker.createInstance<ArgumentsContext>(_ctx, getState());
  enterRule(_localctx, 124, JavaScriptParser_cpp::RuleArguments);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(750);
    match(JavaScriptParser_cpp::OpenParen);
    setState(762);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -4611686018361064784) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 2305843009213693951) != 0)) {
      setState(751);
      argument();
      setState(756);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 87, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(752);
          match(JavaScriptParser_cpp::Comma);
          setState(753);
          argument(); 
        }
        setState(758);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 87, _ctx);
      }
      setState(760);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaScriptParser_cpp::Comma) {
        setState(759);
        match(JavaScriptParser_cpp::Comma);
      }
    }
    setState(764);
    match(JavaScriptParser_cpp::CloseParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgumentContext ------------------------------------------------------------------

JavaScriptParser_cpp::ArgumentContext::ArgumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::ArgumentContext::singleExpression() {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(0);
}

JavaScriptParser_cpp::IdentifierContext* JavaScriptParser_cpp::ArgumentContext::identifier() {
  return getRuleContext<JavaScriptParser_cpp::IdentifierContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::ArgumentContext::Ellipsis() {
  return getToken(JavaScriptParser_cpp::Ellipsis, 0);
}


size_t JavaScriptParser_cpp::ArgumentContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleArgument;
}

void JavaScriptParser_cpp::ArgumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgument(this);
}

void JavaScriptParser_cpp::ArgumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgument(this);
}

JavaScriptParser_cpp::ArgumentContext* JavaScriptParser_cpp::argument() {
  ArgumentContext *_localctx = _tracker.createInstance<ArgumentContext>(_ctx, getState());
  enterRule(_localctx, 126, JavaScriptParser_cpp::RuleArgument);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(767);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaScriptParser_cpp::Ellipsis) {
      setState(766);
      match(JavaScriptParser_cpp::Ellipsis);
    }
    setState(771);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx)) {
    case 1: {
      setState(769);
      singleExpression(0);
      break;
    }

    case 2: {
      setState(770);
      identifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionSequenceContext ------------------------------------------------------------------

JavaScriptParser_cpp::ExpressionSequenceContext::ExpressionSequenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaScriptParser_cpp::SingleExpressionContext *> JavaScriptParser_cpp::ExpressionSequenceContext::singleExpression() {
  return getRuleContexts<JavaScriptParser_cpp::SingleExpressionContext>();
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::ExpressionSequenceContext::singleExpression(size_t i) {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(i);
}

std::vector<tree::TerminalNode *> JavaScriptParser_cpp::ExpressionSequenceContext::Comma() {
  return getTokens(JavaScriptParser_cpp::Comma);
}

tree::TerminalNode* JavaScriptParser_cpp::ExpressionSequenceContext::Comma(size_t i) {
  return getToken(JavaScriptParser_cpp::Comma, i);
}


size_t JavaScriptParser_cpp::ExpressionSequenceContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleExpressionSequence;
}

void JavaScriptParser_cpp::ExpressionSequenceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpressionSequence(this);
}

void JavaScriptParser_cpp::ExpressionSequenceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpressionSequence(this);
}

JavaScriptParser_cpp::ExpressionSequenceContext* JavaScriptParser_cpp::expressionSequence() {
  ExpressionSequenceContext *_localctx = _tracker.createInstance<ExpressionSequenceContext>(_ctx, getState());
  enterRule(_localctx, 128, JavaScriptParser_cpp::RuleExpressionSequence);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(773);
    singleExpression(0);
    setState(778);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 92, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(774);
        match(JavaScriptParser_cpp::Comma);
        setState(775);
        singleExpression(0); 
      }
      setState(780);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 92, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SingleExpressionContext ------------------------------------------------------------------

JavaScriptParser_cpp::SingleExpressionContext::SingleExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t JavaScriptParser_cpp::SingleExpressionContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleSingleExpression;
}

void JavaScriptParser_cpp::SingleExpressionContext::copyFrom(SingleExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- TemplateStringExpressionContext ------------------------------------------------------------------

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::TemplateStringExpressionContext::singleExpression() {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(0);
}

JavaScriptParser_cpp::TemplateStringLiteralContext* JavaScriptParser_cpp::TemplateStringExpressionContext::templateStringLiteral() {
  return getRuleContext<JavaScriptParser_cpp::TemplateStringLiteralContext>(0);
}

JavaScriptParser_cpp::TemplateStringExpressionContext::TemplateStringExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::TemplateStringExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTemplateStringExpression(this);
}
void JavaScriptParser_cpp::TemplateStringExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTemplateStringExpression(this);
}
//----------------- TernaryExpressionContext ------------------------------------------------------------------

std::vector<JavaScriptParser_cpp::SingleExpressionContext *> JavaScriptParser_cpp::TernaryExpressionContext::singleExpression() {
  return getRuleContexts<JavaScriptParser_cpp::SingleExpressionContext>();
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::TernaryExpressionContext::singleExpression(size_t i) {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(i);
}

tree::TerminalNode* JavaScriptParser_cpp::TernaryExpressionContext::QuestionMark() {
  return getToken(JavaScriptParser_cpp::QuestionMark, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::TernaryExpressionContext::Colon() {
  return getToken(JavaScriptParser_cpp::Colon, 0);
}

JavaScriptParser_cpp::TernaryExpressionContext::TernaryExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::TernaryExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTernaryExpression(this);
}
void JavaScriptParser_cpp::TernaryExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTernaryExpression(this);
}
//----------------- LogicalAndExpressionContext ------------------------------------------------------------------

std::vector<JavaScriptParser_cpp::SingleExpressionContext *> JavaScriptParser_cpp::LogicalAndExpressionContext::singleExpression() {
  return getRuleContexts<JavaScriptParser_cpp::SingleExpressionContext>();
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::LogicalAndExpressionContext::singleExpression(size_t i) {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(i);
}

tree::TerminalNode* JavaScriptParser_cpp::LogicalAndExpressionContext::And() {
  return getToken(JavaScriptParser_cpp::And, 0);
}

JavaScriptParser_cpp::LogicalAndExpressionContext::LogicalAndExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::LogicalAndExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLogicalAndExpression(this);
}
void JavaScriptParser_cpp::LogicalAndExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLogicalAndExpression(this);
}
//----------------- PowerExpressionContext ------------------------------------------------------------------

std::vector<JavaScriptParser_cpp::SingleExpressionContext *> JavaScriptParser_cpp::PowerExpressionContext::singleExpression() {
  return getRuleContexts<JavaScriptParser_cpp::SingleExpressionContext>();
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::PowerExpressionContext::singleExpression(size_t i) {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(i);
}

tree::TerminalNode* JavaScriptParser_cpp::PowerExpressionContext::Power() {
  return getToken(JavaScriptParser_cpp::Power, 0);
}

JavaScriptParser_cpp::PowerExpressionContext::PowerExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::PowerExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPowerExpression(this);
}
void JavaScriptParser_cpp::PowerExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPowerExpression(this);
}
//----------------- PreIncrementExpressionContext ------------------------------------------------------------------

tree::TerminalNode* JavaScriptParser_cpp::PreIncrementExpressionContext::PlusPlus() {
  return getToken(JavaScriptParser_cpp::PlusPlus, 0);
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::PreIncrementExpressionContext::singleExpression() {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(0);
}

JavaScriptParser_cpp::PreIncrementExpressionContext::PreIncrementExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::PreIncrementExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPreIncrementExpression(this);
}
void JavaScriptParser_cpp::PreIncrementExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPreIncrementExpression(this);
}
//----------------- ObjectLiteralExpressionContext ------------------------------------------------------------------

JavaScriptParser_cpp::ObjectLiteralContext* JavaScriptParser_cpp::ObjectLiteralExpressionContext::objectLiteral() {
  return getRuleContext<JavaScriptParser_cpp::ObjectLiteralContext>(0);
}

JavaScriptParser_cpp::ObjectLiteralExpressionContext::ObjectLiteralExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::ObjectLiteralExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterObjectLiteralExpression(this);
}
void JavaScriptParser_cpp::ObjectLiteralExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitObjectLiteralExpression(this);
}
//----------------- MetaExpressionContext ------------------------------------------------------------------

tree::TerminalNode* JavaScriptParser_cpp::MetaExpressionContext::New() {
  return getToken(JavaScriptParser_cpp::New, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::MetaExpressionContext::Dot() {
  return getToken(JavaScriptParser_cpp::Dot, 0);
}

JavaScriptParser_cpp::IdentifierContext* JavaScriptParser_cpp::MetaExpressionContext::identifier() {
  return getRuleContext<JavaScriptParser_cpp::IdentifierContext>(0);
}

JavaScriptParser_cpp::MetaExpressionContext::MetaExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::MetaExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetaExpression(this);
}
void JavaScriptParser_cpp::MetaExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetaExpression(this);
}
//----------------- InExpressionContext ------------------------------------------------------------------

std::vector<JavaScriptParser_cpp::SingleExpressionContext *> JavaScriptParser_cpp::InExpressionContext::singleExpression() {
  return getRuleContexts<JavaScriptParser_cpp::SingleExpressionContext>();
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::InExpressionContext::singleExpression(size_t i) {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(i);
}

tree::TerminalNode* JavaScriptParser_cpp::InExpressionContext::In() {
  return getToken(JavaScriptParser_cpp::In, 0);
}

JavaScriptParser_cpp::InExpressionContext::InExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::InExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInExpression(this);
}
void JavaScriptParser_cpp::InExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInExpression(this);
}
//----------------- LogicalOrExpressionContext ------------------------------------------------------------------

std::vector<JavaScriptParser_cpp::SingleExpressionContext *> JavaScriptParser_cpp::LogicalOrExpressionContext::singleExpression() {
  return getRuleContexts<JavaScriptParser_cpp::SingleExpressionContext>();
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::LogicalOrExpressionContext::singleExpression(size_t i) {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(i);
}

tree::TerminalNode* JavaScriptParser_cpp::LogicalOrExpressionContext::Or() {
  return getToken(JavaScriptParser_cpp::Or, 0);
}

JavaScriptParser_cpp::LogicalOrExpressionContext::LogicalOrExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::LogicalOrExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLogicalOrExpression(this);
}
void JavaScriptParser_cpp::LogicalOrExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLogicalOrExpression(this);
}
//----------------- OptionalChainExpressionContext ------------------------------------------------------------------

std::vector<JavaScriptParser_cpp::SingleExpressionContext *> JavaScriptParser_cpp::OptionalChainExpressionContext::singleExpression() {
  return getRuleContexts<JavaScriptParser_cpp::SingleExpressionContext>();
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::OptionalChainExpressionContext::singleExpression(size_t i) {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(i);
}

tree::TerminalNode* JavaScriptParser_cpp::OptionalChainExpressionContext::QuestionMarkDot() {
  return getToken(JavaScriptParser_cpp::QuestionMarkDot, 0);
}

JavaScriptParser_cpp::OptionalChainExpressionContext::OptionalChainExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::OptionalChainExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOptionalChainExpression(this);
}
void JavaScriptParser_cpp::OptionalChainExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOptionalChainExpression(this);
}
//----------------- NotExpressionContext ------------------------------------------------------------------

tree::TerminalNode* JavaScriptParser_cpp::NotExpressionContext::Not() {
  return getToken(JavaScriptParser_cpp::Not, 0);
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::NotExpressionContext::singleExpression() {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(0);
}

JavaScriptParser_cpp::NotExpressionContext::NotExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::NotExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNotExpression(this);
}
void JavaScriptParser_cpp::NotExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNotExpression(this);
}
//----------------- PreDecreaseExpressionContext ------------------------------------------------------------------

tree::TerminalNode* JavaScriptParser_cpp::PreDecreaseExpressionContext::MinusMinus() {
  return getToken(JavaScriptParser_cpp::MinusMinus, 0);
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::PreDecreaseExpressionContext::singleExpression() {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(0);
}

JavaScriptParser_cpp::PreDecreaseExpressionContext::PreDecreaseExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::PreDecreaseExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPreDecreaseExpression(this);
}
void JavaScriptParser_cpp::PreDecreaseExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPreDecreaseExpression(this);
}
//----------------- ArgumentsExpressionContext ------------------------------------------------------------------

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::ArgumentsExpressionContext::singleExpression() {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(0);
}

JavaScriptParser_cpp::ArgumentsContext* JavaScriptParser_cpp::ArgumentsExpressionContext::arguments() {
  return getRuleContext<JavaScriptParser_cpp::ArgumentsContext>(0);
}

JavaScriptParser_cpp::ArgumentsExpressionContext::ArgumentsExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::ArgumentsExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgumentsExpression(this);
}
void JavaScriptParser_cpp::ArgumentsExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgumentsExpression(this);
}
//----------------- AwaitExpressionContext ------------------------------------------------------------------

tree::TerminalNode* JavaScriptParser_cpp::AwaitExpressionContext::Await() {
  return getToken(JavaScriptParser_cpp::Await, 0);
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::AwaitExpressionContext::singleExpression() {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(0);
}

JavaScriptParser_cpp::AwaitExpressionContext::AwaitExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::AwaitExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAwaitExpression(this);
}
void JavaScriptParser_cpp::AwaitExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAwaitExpression(this);
}
//----------------- ThisExpressionContext ------------------------------------------------------------------

tree::TerminalNode* JavaScriptParser_cpp::ThisExpressionContext::This() {
  return getToken(JavaScriptParser_cpp::This, 0);
}

JavaScriptParser_cpp::ThisExpressionContext::ThisExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::ThisExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterThisExpression(this);
}
void JavaScriptParser_cpp::ThisExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitThisExpression(this);
}
//----------------- FunctionExpressionContext ------------------------------------------------------------------

JavaScriptParser_cpp::AnonymousFunctionContext* JavaScriptParser_cpp::FunctionExpressionContext::anonymousFunction() {
  return getRuleContext<JavaScriptParser_cpp::AnonymousFunctionContext>(0);
}

JavaScriptParser_cpp::FunctionExpressionContext::FunctionExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::FunctionExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionExpression(this);
}
void JavaScriptParser_cpp::FunctionExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionExpression(this);
}
//----------------- UnaryMinusExpressionContext ------------------------------------------------------------------

tree::TerminalNode* JavaScriptParser_cpp::UnaryMinusExpressionContext::Minus() {
  return getToken(JavaScriptParser_cpp::Minus, 0);
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::UnaryMinusExpressionContext::singleExpression() {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(0);
}

JavaScriptParser_cpp::UnaryMinusExpressionContext::UnaryMinusExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::UnaryMinusExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnaryMinusExpression(this);
}
void JavaScriptParser_cpp::UnaryMinusExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnaryMinusExpression(this);
}
//----------------- AssignmentExpressionContext ------------------------------------------------------------------

std::vector<JavaScriptParser_cpp::SingleExpressionContext *> JavaScriptParser_cpp::AssignmentExpressionContext::singleExpression() {
  return getRuleContexts<JavaScriptParser_cpp::SingleExpressionContext>();
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::AssignmentExpressionContext::singleExpression(size_t i) {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(i);
}

tree::TerminalNode* JavaScriptParser_cpp::AssignmentExpressionContext::Assign() {
  return getToken(JavaScriptParser_cpp::Assign, 0);
}

JavaScriptParser_cpp::AssignmentExpressionContext::AssignmentExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::AssignmentExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignmentExpression(this);
}
void JavaScriptParser_cpp::AssignmentExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignmentExpression(this);
}
//----------------- PostDecreaseExpressionContext ------------------------------------------------------------------

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::PostDecreaseExpressionContext::singleExpression() {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::PostDecreaseExpressionContext::MinusMinus() {
  return getToken(JavaScriptParser_cpp::MinusMinus, 0);
}

JavaScriptParser_cpp::PostDecreaseExpressionContext::PostDecreaseExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::PostDecreaseExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPostDecreaseExpression(this);
}
void JavaScriptParser_cpp::PostDecreaseExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPostDecreaseExpression(this);
}
//----------------- TypeofExpressionContext ------------------------------------------------------------------

tree::TerminalNode* JavaScriptParser_cpp::TypeofExpressionContext::Typeof() {
  return getToken(JavaScriptParser_cpp::Typeof, 0);
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::TypeofExpressionContext::singleExpression() {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(0);
}

JavaScriptParser_cpp::TypeofExpressionContext::TypeofExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::TypeofExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeofExpression(this);
}
void JavaScriptParser_cpp::TypeofExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeofExpression(this);
}
//----------------- InstanceofExpressionContext ------------------------------------------------------------------

std::vector<JavaScriptParser_cpp::SingleExpressionContext *> JavaScriptParser_cpp::InstanceofExpressionContext::singleExpression() {
  return getRuleContexts<JavaScriptParser_cpp::SingleExpressionContext>();
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::InstanceofExpressionContext::singleExpression(size_t i) {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(i);
}

tree::TerminalNode* JavaScriptParser_cpp::InstanceofExpressionContext::Instanceof() {
  return getToken(JavaScriptParser_cpp::Instanceof, 0);
}

JavaScriptParser_cpp::InstanceofExpressionContext::InstanceofExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::InstanceofExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInstanceofExpression(this);
}
void JavaScriptParser_cpp::InstanceofExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInstanceofExpression(this);
}
//----------------- UnaryPlusExpressionContext ------------------------------------------------------------------

tree::TerminalNode* JavaScriptParser_cpp::UnaryPlusExpressionContext::Plus() {
  return getToken(JavaScriptParser_cpp::Plus, 0);
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::UnaryPlusExpressionContext::singleExpression() {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(0);
}

JavaScriptParser_cpp::UnaryPlusExpressionContext::UnaryPlusExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::UnaryPlusExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnaryPlusExpression(this);
}
void JavaScriptParser_cpp::UnaryPlusExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnaryPlusExpression(this);
}
//----------------- DeleteExpressionContext ------------------------------------------------------------------

tree::TerminalNode* JavaScriptParser_cpp::DeleteExpressionContext::Delete() {
  return getToken(JavaScriptParser_cpp::Delete, 0);
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::DeleteExpressionContext::singleExpression() {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(0);
}

JavaScriptParser_cpp::DeleteExpressionContext::DeleteExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::DeleteExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeleteExpression(this);
}
void JavaScriptParser_cpp::DeleteExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeleteExpression(this);
}
//----------------- ImportExpressionContext ------------------------------------------------------------------

tree::TerminalNode* JavaScriptParser_cpp::ImportExpressionContext::Import() {
  return getToken(JavaScriptParser_cpp::Import, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::ImportExpressionContext::OpenParen() {
  return getToken(JavaScriptParser_cpp::OpenParen, 0);
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::ImportExpressionContext::singleExpression() {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::ImportExpressionContext::CloseParen() {
  return getToken(JavaScriptParser_cpp::CloseParen, 0);
}

JavaScriptParser_cpp::ImportExpressionContext::ImportExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::ImportExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImportExpression(this);
}
void JavaScriptParser_cpp::ImportExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImportExpression(this);
}
//----------------- EqualityExpressionContext ------------------------------------------------------------------

std::vector<JavaScriptParser_cpp::SingleExpressionContext *> JavaScriptParser_cpp::EqualityExpressionContext::singleExpression() {
  return getRuleContexts<JavaScriptParser_cpp::SingleExpressionContext>();
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::EqualityExpressionContext::singleExpression(size_t i) {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(i);
}

tree::TerminalNode* JavaScriptParser_cpp::EqualityExpressionContext::Equals_() {
  return getToken(JavaScriptParser_cpp::Equals_, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::EqualityExpressionContext::NotEquals() {
  return getToken(JavaScriptParser_cpp::NotEquals, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::EqualityExpressionContext::IdentityEquals() {
  return getToken(JavaScriptParser_cpp::IdentityEquals, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::EqualityExpressionContext::IdentityNotEquals() {
  return getToken(JavaScriptParser_cpp::IdentityNotEquals, 0);
}

JavaScriptParser_cpp::EqualityExpressionContext::EqualityExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::EqualityExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEqualityExpression(this);
}
void JavaScriptParser_cpp::EqualityExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEqualityExpression(this);
}
//----------------- BitXOrExpressionContext ------------------------------------------------------------------

std::vector<JavaScriptParser_cpp::SingleExpressionContext *> JavaScriptParser_cpp::BitXOrExpressionContext::singleExpression() {
  return getRuleContexts<JavaScriptParser_cpp::SingleExpressionContext>();
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::BitXOrExpressionContext::singleExpression(size_t i) {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(i);
}

tree::TerminalNode* JavaScriptParser_cpp::BitXOrExpressionContext::BitXOr() {
  return getToken(JavaScriptParser_cpp::BitXOr, 0);
}

JavaScriptParser_cpp::BitXOrExpressionContext::BitXOrExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::BitXOrExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBitXOrExpression(this);
}
void JavaScriptParser_cpp::BitXOrExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBitXOrExpression(this);
}
//----------------- SuperExpressionContext ------------------------------------------------------------------

tree::TerminalNode* JavaScriptParser_cpp::SuperExpressionContext::Super() {
  return getToken(JavaScriptParser_cpp::Super, 0);
}

JavaScriptParser_cpp::SuperExpressionContext::SuperExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::SuperExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSuperExpression(this);
}
void JavaScriptParser_cpp::SuperExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSuperExpression(this);
}
//----------------- MultiplicativeExpressionContext ------------------------------------------------------------------

std::vector<JavaScriptParser_cpp::SingleExpressionContext *> JavaScriptParser_cpp::MultiplicativeExpressionContext::singleExpression() {
  return getRuleContexts<JavaScriptParser_cpp::SingleExpressionContext>();
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::MultiplicativeExpressionContext::singleExpression(size_t i) {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(i);
}

tree::TerminalNode* JavaScriptParser_cpp::MultiplicativeExpressionContext::Multiply() {
  return getToken(JavaScriptParser_cpp::Multiply, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::MultiplicativeExpressionContext::Divide() {
  return getToken(JavaScriptParser_cpp::Divide, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::MultiplicativeExpressionContext::Modulus() {
  return getToken(JavaScriptParser_cpp::Modulus, 0);
}

JavaScriptParser_cpp::MultiplicativeExpressionContext::MultiplicativeExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::MultiplicativeExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplicativeExpression(this);
}
void JavaScriptParser_cpp::MultiplicativeExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplicativeExpression(this);
}
//----------------- BitShiftExpressionContext ------------------------------------------------------------------

std::vector<JavaScriptParser_cpp::SingleExpressionContext *> JavaScriptParser_cpp::BitShiftExpressionContext::singleExpression() {
  return getRuleContexts<JavaScriptParser_cpp::SingleExpressionContext>();
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::BitShiftExpressionContext::singleExpression(size_t i) {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(i);
}

tree::TerminalNode* JavaScriptParser_cpp::BitShiftExpressionContext::LeftShiftArithmetic() {
  return getToken(JavaScriptParser_cpp::LeftShiftArithmetic, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::BitShiftExpressionContext::RightShiftArithmetic() {
  return getToken(JavaScriptParser_cpp::RightShiftArithmetic, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::BitShiftExpressionContext::RightShiftLogical() {
  return getToken(JavaScriptParser_cpp::RightShiftLogical, 0);
}

JavaScriptParser_cpp::BitShiftExpressionContext::BitShiftExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::BitShiftExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBitShiftExpression(this);
}
void JavaScriptParser_cpp::BitShiftExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBitShiftExpression(this);
}
//----------------- ParenthesizedExpressionContext ------------------------------------------------------------------

tree::TerminalNode* JavaScriptParser_cpp::ParenthesizedExpressionContext::OpenParen() {
  return getToken(JavaScriptParser_cpp::OpenParen, 0);
}

JavaScriptParser_cpp::ExpressionSequenceContext* JavaScriptParser_cpp::ParenthesizedExpressionContext::expressionSequence() {
  return getRuleContext<JavaScriptParser_cpp::ExpressionSequenceContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::ParenthesizedExpressionContext::CloseParen() {
  return getToken(JavaScriptParser_cpp::CloseParen, 0);
}

JavaScriptParser_cpp::ParenthesizedExpressionContext::ParenthesizedExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::ParenthesizedExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParenthesizedExpression(this);
}
void JavaScriptParser_cpp::ParenthesizedExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParenthesizedExpression(this);
}
//----------------- AdditiveExpressionContext ------------------------------------------------------------------

std::vector<JavaScriptParser_cpp::SingleExpressionContext *> JavaScriptParser_cpp::AdditiveExpressionContext::singleExpression() {
  return getRuleContexts<JavaScriptParser_cpp::SingleExpressionContext>();
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::AdditiveExpressionContext::singleExpression(size_t i) {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(i);
}

tree::TerminalNode* JavaScriptParser_cpp::AdditiveExpressionContext::Plus() {
  return getToken(JavaScriptParser_cpp::Plus, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::AdditiveExpressionContext::Minus() {
  return getToken(JavaScriptParser_cpp::Minus, 0);
}

JavaScriptParser_cpp::AdditiveExpressionContext::AdditiveExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::AdditiveExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAdditiveExpression(this);
}
void JavaScriptParser_cpp::AdditiveExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAdditiveExpression(this);
}
//----------------- RelationalExpressionContext ------------------------------------------------------------------

std::vector<JavaScriptParser_cpp::SingleExpressionContext *> JavaScriptParser_cpp::RelationalExpressionContext::singleExpression() {
  return getRuleContexts<JavaScriptParser_cpp::SingleExpressionContext>();
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::RelationalExpressionContext::singleExpression(size_t i) {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(i);
}

tree::TerminalNode* JavaScriptParser_cpp::RelationalExpressionContext::LessThan() {
  return getToken(JavaScriptParser_cpp::LessThan, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::RelationalExpressionContext::MoreThan() {
  return getToken(JavaScriptParser_cpp::MoreThan, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::RelationalExpressionContext::LessThanEquals() {
  return getToken(JavaScriptParser_cpp::LessThanEquals, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::RelationalExpressionContext::GreaterThanEquals() {
  return getToken(JavaScriptParser_cpp::GreaterThanEquals, 0);
}

JavaScriptParser_cpp::RelationalExpressionContext::RelationalExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::RelationalExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelationalExpression(this);
}
void JavaScriptParser_cpp::RelationalExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelationalExpression(this);
}
//----------------- PostIncrementExpressionContext ------------------------------------------------------------------

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::PostIncrementExpressionContext::singleExpression() {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::PostIncrementExpressionContext::PlusPlus() {
  return getToken(JavaScriptParser_cpp::PlusPlus, 0);
}

JavaScriptParser_cpp::PostIncrementExpressionContext::PostIncrementExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::PostIncrementExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPostIncrementExpression(this);
}
void JavaScriptParser_cpp::PostIncrementExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPostIncrementExpression(this);
}
//----------------- YieldExpressionContext ------------------------------------------------------------------

JavaScriptParser_cpp::YieldStatementContext* JavaScriptParser_cpp::YieldExpressionContext::yieldStatement() {
  return getRuleContext<JavaScriptParser_cpp::YieldStatementContext>(0);
}

JavaScriptParser_cpp::YieldExpressionContext::YieldExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::YieldExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterYieldExpression(this);
}
void JavaScriptParser_cpp::YieldExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitYieldExpression(this);
}
//----------------- BitNotExpressionContext ------------------------------------------------------------------

tree::TerminalNode* JavaScriptParser_cpp::BitNotExpressionContext::BitNot() {
  return getToken(JavaScriptParser_cpp::BitNot, 0);
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::BitNotExpressionContext::singleExpression() {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(0);
}

JavaScriptParser_cpp::BitNotExpressionContext::BitNotExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::BitNotExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBitNotExpression(this);
}
void JavaScriptParser_cpp::BitNotExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBitNotExpression(this);
}
//----------------- NewExpressionContext ------------------------------------------------------------------

tree::TerminalNode* JavaScriptParser_cpp::NewExpressionContext::New() {
  return getToken(JavaScriptParser_cpp::New, 0);
}

JavaScriptParser_cpp::IdentifierContext* JavaScriptParser_cpp::NewExpressionContext::identifier() {
  return getRuleContext<JavaScriptParser_cpp::IdentifierContext>(0);
}

JavaScriptParser_cpp::ArgumentsContext* JavaScriptParser_cpp::NewExpressionContext::arguments() {
  return getRuleContext<JavaScriptParser_cpp::ArgumentsContext>(0);
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::NewExpressionContext::singleExpression() {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(0);
}

JavaScriptParser_cpp::NewExpressionContext::NewExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::NewExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNewExpression(this);
}
void JavaScriptParser_cpp::NewExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNewExpression(this);
}
//----------------- LiteralExpressionContext ------------------------------------------------------------------

JavaScriptParser_cpp::LiteralContext* JavaScriptParser_cpp::LiteralExpressionContext::literal() {
  return getRuleContext<JavaScriptParser_cpp::LiteralContext>(0);
}

JavaScriptParser_cpp::LiteralExpressionContext::LiteralExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::LiteralExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteralExpression(this);
}
void JavaScriptParser_cpp::LiteralExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteralExpression(this);
}
//----------------- ArrayLiteralExpressionContext ------------------------------------------------------------------

JavaScriptParser_cpp::ArrayLiteralContext* JavaScriptParser_cpp::ArrayLiteralExpressionContext::arrayLiteral() {
  return getRuleContext<JavaScriptParser_cpp::ArrayLiteralContext>(0);
}

JavaScriptParser_cpp::ArrayLiteralExpressionContext::ArrayLiteralExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::ArrayLiteralExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayLiteralExpression(this);
}
void JavaScriptParser_cpp::ArrayLiteralExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayLiteralExpression(this);
}
//----------------- MemberDotExpressionContext ------------------------------------------------------------------

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::MemberDotExpressionContext::singleExpression() {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::MemberDotExpressionContext::Dot() {
  return getToken(JavaScriptParser_cpp::Dot, 0);
}

JavaScriptParser_cpp::IdentifierNameContext* JavaScriptParser_cpp::MemberDotExpressionContext::identifierName() {
  return getRuleContext<JavaScriptParser_cpp::IdentifierNameContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::MemberDotExpressionContext::QuestionMark() {
  return getToken(JavaScriptParser_cpp::QuestionMark, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::MemberDotExpressionContext::Hashtag() {
  return getToken(JavaScriptParser_cpp::Hashtag, 0);
}

JavaScriptParser_cpp::MemberDotExpressionContext::MemberDotExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::MemberDotExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMemberDotExpression(this);
}
void JavaScriptParser_cpp::MemberDotExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMemberDotExpression(this);
}
//----------------- ClassExpressionContext ------------------------------------------------------------------

tree::TerminalNode* JavaScriptParser_cpp::ClassExpressionContext::Class() {
  return getToken(JavaScriptParser_cpp::Class, 0);
}

JavaScriptParser_cpp::ClassTailContext* JavaScriptParser_cpp::ClassExpressionContext::classTail() {
  return getRuleContext<JavaScriptParser_cpp::ClassTailContext>(0);
}

JavaScriptParser_cpp::IdentifierContext* JavaScriptParser_cpp::ClassExpressionContext::identifier() {
  return getRuleContext<JavaScriptParser_cpp::IdentifierContext>(0);
}

JavaScriptParser_cpp::ClassExpressionContext::ClassExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::ClassExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassExpression(this);
}
void JavaScriptParser_cpp::ClassExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassExpression(this);
}
//----------------- MemberIndexExpressionContext ------------------------------------------------------------------

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::MemberIndexExpressionContext::singleExpression() {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::MemberIndexExpressionContext::OpenBracket() {
  return getToken(JavaScriptParser_cpp::OpenBracket, 0);
}

JavaScriptParser_cpp::ExpressionSequenceContext* JavaScriptParser_cpp::MemberIndexExpressionContext::expressionSequence() {
  return getRuleContext<JavaScriptParser_cpp::ExpressionSequenceContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::MemberIndexExpressionContext::CloseBracket() {
  return getToken(JavaScriptParser_cpp::CloseBracket, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::MemberIndexExpressionContext::QuestionMarkDot() {
  return getToken(JavaScriptParser_cpp::QuestionMarkDot, 0);
}

JavaScriptParser_cpp::MemberIndexExpressionContext::MemberIndexExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::MemberIndexExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMemberIndexExpression(this);
}
void JavaScriptParser_cpp::MemberIndexExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMemberIndexExpression(this);
}
//----------------- IdentifierExpressionContext ------------------------------------------------------------------

JavaScriptParser_cpp::IdentifierContext* JavaScriptParser_cpp::IdentifierExpressionContext::identifier() {
  return getRuleContext<JavaScriptParser_cpp::IdentifierContext>(0);
}

JavaScriptParser_cpp::IdentifierExpressionContext::IdentifierExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::IdentifierExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdentifierExpression(this);
}
void JavaScriptParser_cpp::IdentifierExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdentifierExpression(this);
}
//----------------- BitAndExpressionContext ------------------------------------------------------------------

std::vector<JavaScriptParser_cpp::SingleExpressionContext *> JavaScriptParser_cpp::BitAndExpressionContext::singleExpression() {
  return getRuleContexts<JavaScriptParser_cpp::SingleExpressionContext>();
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::BitAndExpressionContext::singleExpression(size_t i) {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(i);
}

tree::TerminalNode* JavaScriptParser_cpp::BitAndExpressionContext::BitAnd() {
  return getToken(JavaScriptParser_cpp::BitAnd, 0);
}

JavaScriptParser_cpp::BitAndExpressionContext::BitAndExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::BitAndExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBitAndExpression(this);
}
void JavaScriptParser_cpp::BitAndExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBitAndExpression(this);
}
//----------------- BitOrExpressionContext ------------------------------------------------------------------

std::vector<JavaScriptParser_cpp::SingleExpressionContext *> JavaScriptParser_cpp::BitOrExpressionContext::singleExpression() {
  return getRuleContexts<JavaScriptParser_cpp::SingleExpressionContext>();
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::BitOrExpressionContext::singleExpression(size_t i) {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(i);
}

tree::TerminalNode* JavaScriptParser_cpp::BitOrExpressionContext::BitOr() {
  return getToken(JavaScriptParser_cpp::BitOr, 0);
}

JavaScriptParser_cpp::BitOrExpressionContext::BitOrExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::BitOrExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBitOrExpression(this);
}
void JavaScriptParser_cpp::BitOrExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBitOrExpression(this);
}
//----------------- AssignmentOperatorExpressionContext ------------------------------------------------------------------

std::vector<JavaScriptParser_cpp::SingleExpressionContext *> JavaScriptParser_cpp::AssignmentOperatorExpressionContext::singleExpression() {
  return getRuleContexts<JavaScriptParser_cpp::SingleExpressionContext>();
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::AssignmentOperatorExpressionContext::singleExpression(size_t i) {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(i);
}

JavaScriptParser_cpp::AssignmentOperatorContext* JavaScriptParser_cpp::AssignmentOperatorExpressionContext::assignmentOperator() {
  return getRuleContext<JavaScriptParser_cpp::AssignmentOperatorContext>(0);
}

JavaScriptParser_cpp::AssignmentOperatorExpressionContext::AssignmentOperatorExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::AssignmentOperatorExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignmentOperatorExpression(this);
}
void JavaScriptParser_cpp::AssignmentOperatorExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignmentOperatorExpression(this);
}
//----------------- VoidExpressionContext ------------------------------------------------------------------

tree::TerminalNode* JavaScriptParser_cpp::VoidExpressionContext::Void() {
  return getToken(JavaScriptParser_cpp::Void, 0);
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::VoidExpressionContext::singleExpression() {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(0);
}

JavaScriptParser_cpp::VoidExpressionContext::VoidExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::VoidExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVoidExpression(this);
}
void JavaScriptParser_cpp::VoidExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVoidExpression(this);
}
//----------------- CoalesceExpressionContext ------------------------------------------------------------------

std::vector<JavaScriptParser_cpp::SingleExpressionContext *> JavaScriptParser_cpp::CoalesceExpressionContext::singleExpression() {
  return getRuleContexts<JavaScriptParser_cpp::SingleExpressionContext>();
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::CoalesceExpressionContext::singleExpression(size_t i) {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(i);
}

tree::TerminalNode* JavaScriptParser_cpp::CoalesceExpressionContext::NullCoalesce() {
  return getToken(JavaScriptParser_cpp::NullCoalesce, 0);
}

JavaScriptParser_cpp::CoalesceExpressionContext::CoalesceExpressionContext(SingleExpressionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::CoalesceExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCoalesceExpression(this);
}
void JavaScriptParser_cpp::CoalesceExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCoalesceExpression(this);
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::singleExpression() {
   return singleExpression(0);
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::singleExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  JavaScriptParser_cpp::SingleExpressionContext *_localctx = _tracker.createInstance<SingleExpressionContext>(_ctx, parentState);
  JavaScriptParser_cpp::SingleExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 130;
  enterRecursionRule(_localctx, 130, JavaScriptParser_cpp::RuleSingleExpression, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(837);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 94, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<FunctionExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(782);
      anonymousFunction();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<ClassExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(783);
      match(JavaScriptParser_cpp::Class);
      setState(785);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 99) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 99)) & 8458255) != 0)) {
        setState(784);
        identifier();
      }
      setState(787);
      classTail();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<NewExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(788);
      match(JavaScriptParser_cpp::New);
      setState(789);
      identifier();
      setState(790);
      arguments();
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<NewExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(792);
      match(JavaScriptParser_cpp::New);
      setState(793);
      singleExpression(0);
      setState(794);
      arguments();
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<NewExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(796);
      match(JavaScriptParser_cpp::New);
      setState(797);
      singleExpression(42);
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<MetaExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(798);
      match(JavaScriptParser_cpp::New);
      setState(799);
      match(JavaScriptParser_cpp::Dot);
      setState(800);
      identifier();
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<DeleteExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(801);
      match(JavaScriptParser_cpp::Delete);
      setState(802);
      singleExpression(37);
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<VoidExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(803);
      match(JavaScriptParser_cpp::Void);
      setState(804);
      singleExpression(36);
      break;
    }

    case 9: {
      _localctx = _tracker.createInstance<TypeofExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(805);
      match(JavaScriptParser_cpp::Typeof);
      setState(806);
      singleExpression(35);
      break;
    }

    case 10: {
      _localctx = _tracker.createInstance<PreIncrementExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(807);
      match(JavaScriptParser_cpp::PlusPlus);
      setState(808);
      singleExpression(34);
      break;
    }

    case 11: {
      _localctx = _tracker.createInstance<PreDecreaseExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(809);
      match(JavaScriptParser_cpp::MinusMinus);
      setState(810);
      singleExpression(33);
      break;
    }

    case 12: {
      _localctx = _tracker.createInstance<UnaryPlusExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(811);
      match(JavaScriptParser_cpp::Plus);
      setState(812);
      singleExpression(32);
      break;
    }

    case 13: {
      _localctx = _tracker.createInstance<UnaryMinusExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(813);
      match(JavaScriptParser_cpp::Minus);
      setState(814);
      singleExpression(31);
      break;
    }

    case 14: {
      _localctx = _tracker.createInstance<BitNotExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(815);
      match(JavaScriptParser_cpp::BitNot);
      setState(816);
      singleExpression(30);
      break;
    }

    case 15: {
      _localctx = _tracker.createInstance<NotExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(817);
      match(JavaScriptParser_cpp::Not);
      setState(818);
      singleExpression(29);
      break;
    }

    case 16: {
      _localctx = _tracker.createInstance<AwaitExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(819);
      match(JavaScriptParser_cpp::Await);
      setState(820);
      singleExpression(28);
      break;
    }

    case 17: {
      _localctx = _tracker.createInstance<ImportExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(821);
      match(JavaScriptParser_cpp::Import);
      setState(822);
      match(JavaScriptParser_cpp::OpenParen);
      setState(823);
      singleExpression(0);
      setState(824);
      match(JavaScriptParser_cpp::CloseParen);
      break;
    }

    case 18: {
      _localctx = _tracker.createInstance<YieldExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(826);
      yieldStatement();
      break;
    }

    case 19: {
      _localctx = _tracker.createInstance<ThisExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(827);
      match(JavaScriptParser_cpp::This);
      break;
    }

    case 20: {
      _localctx = _tracker.createInstance<IdentifierExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(828);
      identifier();
      break;
    }

    case 21: {
      _localctx = _tracker.createInstance<SuperExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(829);
      match(JavaScriptParser_cpp::Super);
      break;
    }

    case 22: {
      _localctx = _tracker.createInstance<LiteralExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(830);
      literal();
      break;
    }

    case 23: {
      _localctx = _tracker.createInstance<ArrayLiteralExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(831);
      arrayLiteral();
      break;
    }

    case 24: {
      _localctx = _tracker.createInstance<ObjectLiteralExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(832);
      objectLiteral();
      break;
    }

    case 25: {
      _localctx = _tracker.createInstance<ParenthesizedExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(833);
      match(JavaScriptParser_cpp::OpenParen);
      setState(834);
      expressionSequence();
      setState(835);
      match(JavaScriptParser_cpp::CloseParen);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(926);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 99, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(924);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<OptionalChainExpressionContext>(_tracker.createInstance<SingleExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleSingleExpression);
          setState(839);

          if (!(precpred(_ctx, 47))) throw FailedPredicateException(this, "precpred(_ctx, 47)");
          setState(840);
          match(JavaScriptParser_cpp::QuestionMarkDot);
          setState(841);
          singleExpression(48);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<PowerExpressionContext>(_tracker.createInstance<SingleExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleSingleExpression);
          setState(842);

          if (!(precpred(_ctx, 27))) throw FailedPredicateException(this, "precpred(_ctx, 27)");
          setState(843);
          match(JavaScriptParser_cpp::Power);
          setState(844);
          singleExpression(27);
          break;
        }

        case 3: {
          auto newContext = _tracker.createInstance<MultiplicativeExpressionContext>(_tracker.createInstance<SingleExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleSingleExpression);
          setState(845);

          if (!(precpred(_ctx, 26))) throw FailedPredicateException(this, "precpred(_ctx, 26)");
          setState(846);
          _la = _input->LA(1);
          if (!((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 469762048) != 0))) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(847);
          singleExpression(27);
          break;
        }

        case 4: {
          auto newContext = _tracker.createInstance<AdditiveExpressionContext>(_tracker.createInstance<SingleExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleSingleExpression);
          setState(848);

          if (!(precpred(_ctx, 25))) throw FailedPredicateException(this, "precpred(_ctx, 25)");
          setState(849);
          _la = _input->LA(1);
          if (!(_la == JavaScriptParser_cpp::Plus

          || _la == JavaScriptParser_cpp::Minus)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(850);
          singleExpression(26);
          break;
        }

        case 5: {
          auto newContext = _tracker.createInstance<CoalesceExpressionContext>(_tracker.createInstance<SingleExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleSingleExpression);
          setState(851);

          if (!(precpred(_ctx, 24))) throw FailedPredicateException(this, "precpred(_ctx, 24)");
          setState(852);
          match(JavaScriptParser_cpp::NullCoalesce);
          setState(853);
          singleExpression(25);
          break;
        }

        case 6: {
          auto newContext = _tracker.createInstance<BitShiftExpressionContext>(_tracker.createInstance<SingleExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleSingleExpression);
          setState(854);

          if (!(precpred(_ctx, 23))) throw FailedPredicateException(this, "precpred(_ctx, 23)");
          setState(855);
          _la = _input->LA(1);
          if (!((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 30064771072) != 0))) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(856);
          singleExpression(24);
          break;
        }

        case 7: {
          auto newContext = _tracker.createInstance<RelationalExpressionContext>(_tracker.createInstance<SingleExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleSingleExpression);
          setState(857);

          if (!(precpred(_ctx, 22))) throw FailedPredicateException(this, "precpred(_ctx, 22)");
          setState(858);
          _la = _input->LA(1);
          if (!((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 515396075520) != 0))) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(859);
          singleExpression(23);
          break;
        }

        case 8: {
          auto newContext = _tracker.createInstance<InstanceofExpressionContext>(_tracker.createInstance<SingleExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleSingleExpression);
          setState(860);

          if (!(precpred(_ctx, 21))) throw FailedPredicateException(this, "precpred(_ctx, 21)");
          setState(861);
          match(JavaScriptParser_cpp::Instanceof);
          setState(862);
          singleExpression(22);
          break;
        }

        case 9: {
          auto newContext = _tracker.createInstance<InExpressionContext>(_tracker.createInstance<SingleExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleSingleExpression);
          setState(863);

          if (!(precpred(_ctx, 20))) throw FailedPredicateException(this, "precpred(_ctx, 20)");
          setState(864);
          match(JavaScriptParser_cpp::In);
          setState(865);
          singleExpression(21);
          break;
        }

        case 10: {
          auto newContext = _tracker.createInstance<EqualityExpressionContext>(_tracker.createInstance<SingleExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleSingleExpression);
          setState(866);

          if (!(precpred(_ctx, 19))) throw FailedPredicateException(this, "precpred(_ctx, 19)");
          setState(867);
          _la = _input->LA(1);
          if (!((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 8246337208320) != 0))) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(868);
          singleExpression(20);
          break;
        }

        case 11: {
          auto newContext = _tracker.createInstance<BitAndExpressionContext>(_tracker.createInstance<SingleExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleSingleExpression);
          setState(869);

          if (!(precpred(_ctx, 18))) throw FailedPredicateException(this, "precpred(_ctx, 18)");
          setState(870);
          match(JavaScriptParser_cpp::BitAnd);
          setState(871);
          singleExpression(19);
          break;
        }

        case 12: {
          auto newContext = _tracker.createInstance<BitXOrExpressionContext>(_tracker.createInstance<SingleExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleSingleExpression);
          setState(872);

          if (!(precpred(_ctx, 17))) throw FailedPredicateException(this, "precpred(_ctx, 17)");
          setState(873);
          match(JavaScriptParser_cpp::BitXOr);
          setState(874);
          singleExpression(18);
          break;
        }

        case 13: {
          auto newContext = _tracker.createInstance<BitOrExpressionContext>(_tracker.createInstance<SingleExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleSingleExpression);
          setState(875);

          if (!(precpred(_ctx, 16))) throw FailedPredicateException(this, "precpred(_ctx, 16)");
          setState(876);
          match(JavaScriptParser_cpp::BitOr);
          setState(877);
          singleExpression(17);
          break;
        }

        case 14: {
          auto newContext = _tracker.createInstance<LogicalAndExpressionContext>(_tracker.createInstance<SingleExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleSingleExpression);
          setState(878);

          if (!(precpred(_ctx, 15))) throw FailedPredicateException(this, "precpred(_ctx, 15)");
          setState(879);
          match(JavaScriptParser_cpp::And);
          setState(880);
          singleExpression(16);
          break;
        }

        case 15: {
          auto newContext = _tracker.createInstance<LogicalOrExpressionContext>(_tracker.createInstance<SingleExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleSingleExpression);
          setState(881);

          if (!(precpred(_ctx, 14))) throw FailedPredicateException(this, "precpred(_ctx, 14)");
          setState(882);
          match(JavaScriptParser_cpp::Or);
          setState(883);
          singleExpression(15);
          break;
        }

        case 16: {
          auto newContext = _tracker.createInstance<TernaryExpressionContext>(_tracker.createInstance<SingleExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleSingleExpression);
          setState(884);

          if (!(precpred(_ctx, 13))) throw FailedPredicateException(this, "precpred(_ctx, 13)");
          setState(885);
          match(JavaScriptParser_cpp::QuestionMark);
          setState(886);
          singleExpression(0);
          setState(887);
          match(JavaScriptParser_cpp::Colon);
          setState(888);
          singleExpression(14);
          break;
        }

        case 17: {
          auto newContext = _tracker.createInstance<AssignmentExpressionContext>(_tracker.createInstance<SingleExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleSingleExpression);
          setState(890);

          if (!(precpred(_ctx, 12))) throw FailedPredicateException(this, "precpred(_ctx, 12)");
          setState(891);
          match(JavaScriptParser_cpp::Assign);
          setState(892);
          singleExpression(12);
          break;
        }

        case 18: {
          auto newContext = _tracker.createInstance<AssignmentOperatorExpressionContext>(_tracker.createInstance<SingleExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleSingleExpression);
          setState(893);

          if (!(precpred(_ctx, 11))) throw FailedPredicateException(this, "precpred(_ctx, 11)");
          setState(894);
          assignmentOperator();
          setState(895);
          singleExpression(11);
          break;
        }

        case 19: {
          auto newContext = _tracker.createInstance<MemberIndexExpressionContext>(_tracker.createInstance<SingleExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleSingleExpression);
          setState(897);

          if (!(precpred(_ctx, 46))) throw FailedPredicateException(this, "precpred(_ctx, 46)");
          setState(899);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == JavaScriptParser_cpp::QuestionMarkDot) {
            setState(898);
            match(JavaScriptParser_cpp::QuestionMarkDot);
          }
          setState(901);
          match(JavaScriptParser_cpp::OpenBracket);
          setState(902);
          expressionSequence();
          setState(903);
          match(JavaScriptParser_cpp::CloseBracket);
          break;
        }

        case 20: {
          auto newContext = _tracker.createInstance<MemberDotExpressionContext>(_tracker.createInstance<SingleExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleSingleExpression);
          setState(905);

          if (!(precpred(_ctx, 45))) throw FailedPredicateException(this, "precpred(_ctx, 45)");
          setState(907);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == JavaScriptParser_cpp::QuestionMark) {
            setState(906);
            match(JavaScriptParser_cpp::QuestionMark);
          }
          setState(909);
          match(JavaScriptParser_cpp::Dot);
          setState(911);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == JavaScriptParser_cpp::Hashtag) {
            setState(910);
            match(JavaScriptParser_cpp::Hashtag);
          }
          setState(913);
          identifierName();
          break;
        }

        case 21: {
          auto newContext = _tracker.createInstance<ArgumentsExpressionContext>(_tracker.createInstance<SingleExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleSingleExpression);
          setState(914);

          if (!(precpred(_ctx, 41))) throw FailedPredicateException(this, "precpred(_ctx, 41)");
          setState(915);
          arguments();
          break;
        }

        case 22: {
          auto newContext = _tracker.createInstance<PostIncrementExpressionContext>(_tracker.createInstance<SingleExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleSingleExpression);
          setState(916);

          if (!(precpred(_ctx, 39))) throw FailedPredicateException(this, "precpred(_ctx, 39)");
          setState(917);

          if (!(this->notLineTerminator())) throw FailedPredicateException(this, "this->notLineTerminator()");
          setState(918);
          match(JavaScriptParser_cpp::PlusPlus);
          break;
        }

        case 23: {
          auto newContext = _tracker.createInstance<PostDecreaseExpressionContext>(_tracker.createInstance<SingleExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleSingleExpression);
          setState(919);

          if (!(precpred(_ctx, 38))) throw FailedPredicateException(this, "precpred(_ctx, 38)");
          setState(920);

          if (!(this->notLineTerminator())) throw FailedPredicateException(this, "this->notLineTerminator()");
          setState(921);
          match(JavaScriptParser_cpp::MinusMinus);
          break;
        }

        case 24: {
          auto newContext = _tracker.createInstance<TemplateStringExpressionContext>(_tracker.createInstance<SingleExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleSingleExpression);
          setState(922);

          if (!(precpred(_ctx, 9))) throw FailedPredicateException(this, "precpred(_ctx, 9)");
          setState(923);
          templateStringLiteral();
          break;
        }

        default:
          break;
        } 
      }
      setState(928);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 99, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- InitializerContext ------------------------------------------------------------------

JavaScriptParser_cpp::InitializerContext::InitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::InitializerContext::Assign() {
  return getToken(JavaScriptParser_cpp::Assign, 0);
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::InitializerContext::singleExpression() {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(0);
}


size_t JavaScriptParser_cpp::InitializerContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleInitializer;
}

void JavaScriptParser_cpp::InitializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInitializer(this);
}

void JavaScriptParser_cpp::InitializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInitializer(this);
}

JavaScriptParser_cpp::InitializerContext* JavaScriptParser_cpp::initializer() {
  InitializerContext *_localctx = _tracker.createInstance<InitializerContext>(_ctx, getState());
  enterRule(_localctx, 132, JavaScriptParser_cpp::RuleInitializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(929);
    match(JavaScriptParser_cpp::Assign);
    setState(930);
    singleExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignableContext ------------------------------------------------------------------

JavaScriptParser_cpp::AssignableContext::AssignableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser_cpp::IdentifierContext* JavaScriptParser_cpp::AssignableContext::identifier() {
  return getRuleContext<JavaScriptParser_cpp::IdentifierContext>(0);
}

JavaScriptParser_cpp::KeywordContext* JavaScriptParser_cpp::AssignableContext::keyword() {
  return getRuleContext<JavaScriptParser_cpp::KeywordContext>(0);
}

JavaScriptParser_cpp::ArrayLiteralContext* JavaScriptParser_cpp::AssignableContext::arrayLiteral() {
  return getRuleContext<JavaScriptParser_cpp::ArrayLiteralContext>(0);
}

JavaScriptParser_cpp::ObjectLiteralContext* JavaScriptParser_cpp::AssignableContext::objectLiteral() {
  return getRuleContext<JavaScriptParser_cpp::ObjectLiteralContext>(0);
}


size_t JavaScriptParser_cpp::AssignableContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleAssignable;
}

void JavaScriptParser_cpp::AssignableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignable(this);
}

void JavaScriptParser_cpp::AssignableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignable(this);
}

JavaScriptParser_cpp::AssignableContext* JavaScriptParser_cpp::assignable() {
  AssignableContext *_localctx = _tracker.createInstance<AssignableContext>(_ctx, getState());
  enterRule(_localctx, 134, JavaScriptParser_cpp::RuleAssignable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(936);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 100, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(932);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(933);
      keyword();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(934);
      arrayLiteral();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(935);
      objectLiteral();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ObjectLiteralContext ------------------------------------------------------------------

JavaScriptParser_cpp::ObjectLiteralContext::ObjectLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::ObjectLiteralContext::OpenBrace() {
  return getToken(JavaScriptParser_cpp::OpenBrace, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::ObjectLiteralContext::CloseBrace() {
  return getToken(JavaScriptParser_cpp::CloseBrace, 0);
}

std::vector<JavaScriptParser_cpp::PropertyAssignmentContext *> JavaScriptParser_cpp::ObjectLiteralContext::propertyAssignment() {
  return getRuleContexts<JavaScriptParser_cpp::PropertyAssignmentContext>();
}

JavaScriptParser_cpp::PropertyAssignmentContext* JavaScriptParser_cpp::ObjectLiteralContext::propertyAssignment(size_t i) {
  return getRuleContext<JavaScriptParser_cpp::PropertyAssignmentContext>(i);
}

std::vector<tree::TerminalNode *> JavaScriptParser_cpp::ObjectLiteralContext::Comma() {
  return getTokens(JavaScriptParser_cpp::Comma);
}

tree::TerminalNode* JavaScriptParser_cpp::ObjectLiteralContext::Comma(size_t i) {
  return getToken(JavaScriptParser_cpp::Comma, i);
}


size_t JavaScriptParser_cpp::ObjectLiteralContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleObjectLiteral;
}

void JavaScriptParser_cpp::ObjectLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterObjectLiteral(this);
}

void JavaScriptParser_cpp::ObjectLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitObjectLiteral(this);
}

JavaScriptParser_cpp::ObjectLiteralContext* JavaScriptParser_cpp::objectLiteral() {
  ObjectLiteralContext *_localctx = _tracker.createInstance<ObjectLiteralContext>(_ctx, getState());
  enterRule(_localctx, 136, JavaScriptParser_cpp::RuleObjectLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(938);
    match(JavaScriptParser_cpp::OpenBrace);
    setState(950);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 103, _ctx)) {
    case 1: {
      setState(939);
      propertyAssignment();
      setState(944);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 101, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(940);
          match(JavaScriptParser_cpp::Comma);
          setState(941);
          propertyAssignment(); 
        }
        setState(946);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 101, _ctx);
      }
      setState(948);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaScriptParser_cpp::Comma) {
        setState(947);
        match(JavaScriptParser_cpp::Comma);
      }
      break;
    }

    default:
      break;
    }
    setState(952);
    match(JavaScriptParser_cpp::CloseBrace);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnonymousFunctionContext ------------------------------------------------------------------

JavaScriptParser_cpp::AnonymousFunctionContext::AnonymousFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t JavaScriptParser_cpp::AnonymousFunctionContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleAnonymousFunction;
}

void JavaScriptParser_cpp::AnonymousFunctionContext::copyFrom(AnonymousFunctionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- AnonymousFunctionDeclContext ------------------------------------------------------------------

tree::TerminalNode* JavaScriptParser_cpp::AnonymousFunctionDeclContext::Function_() {
  return getToken(JavaScriptParser_cpp::Function_, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::AnonymousFunctionDeclContext::OpenParen() {
  return getToken(JavaScriptParser_cpp::OpenParen, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::AnonymousFunctionDeclContext::CloseParen() {
  return getToken(JavaScriptParser_cpp::CloseParen, 0);
}

JavaScriptParser_cpp::FunctionBodyContext* JavaScriptParser_cpp::AnonymousFunctionDeclContext::functionBody() {
  return getRuleContext<JavaScriptParser_cpp::FunctionBodyContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::AnonymousFunctionDeclContext::Async() {
  return getToken(JavaScriptParser_cpp::Async, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::AnonymousFunctionDeclContext::Multiply() {
  return getToken(JavaScriptParser_cpp::Multiply, 0);
}

JavaScriptParser_cpp::FormalParameterListContext* JavaScriptParser_cpp::AnonymousFunctionDeclContext::formalParameterList() {
  return getRuleContext<JavaScriptParser_cpp::FormalParameterListContext>(0);
}

JavaScriptParser_cpp::AnonymousFunctionDeclContext::AnonymousFunctionDeclContext(AnonymousFunctionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::AnonymousFunctionDeclContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnonymousFunctionDecl(this);
}
void JavaScriptParser_cpp::AnonymousFunctionDeclContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnonymousFunctionDecl(this);
}
//----------------- ArrowFunctionContext ------------------------------------------------------------------

JavaScriptParser_cpp::ArrowFunctionParametersContext* JavaScriptParser_cpp::ArrowFunctionContext::arrowFunctionParameters() {
  return getRuleContext<JavaScriptParser_cpp::ArrowFunctionParametersContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::ArrowFunctionContext::ARROW() {
  return getToken(JavaScriptParser_cpp::ARROW, 0);
}

JavaScriptParser_cpp::ArrowFunctionBodyContext* JavaScriptParser_cpp::ArrowFunctionContext::arrowFunctionBody() {
  return getRuleContext<JavaScriptParser_cpp::ArrowFunctionBodyContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::ArrowFunctionContext::Async() {
  return getToken(JavaScriptParser_cpp::Async, 0);
}

JavaScriptParser_cpp::ArrowFunctionContext::ArrowFunctionContext(AnonymousFunctionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::ArrowFunctionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrowFunction(this);
}
void JavaScriptParser_cpp::ArrowFunctionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrowFunction(this);
}
//----------------- NamedFunctionContext ------------------------------------------------------------------

JavaScriptParser_cpp::FunctionDeclarationContext* JavaScriptParser_cpp::NamedFunctionContext::functionDeclaration() {
  return getRuleContext<JavaScriptParser_cpp::FunctionDeclarationContext>(0);
}

JavaScriptParser_cpp::NamedFunctionContext::NamedFunctionContext(AnonymousFunctionContext *ctx) { copyFrom(ctx); }

void JavaScriptParser_cpp::NamedFunctionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamedFunction(this);
}
void JavaScriptParser_cpp::NamedFunctionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamedFunction(this);
}
JavaScriptParser_cpp::AnonymousFunctionContext* JavaScriptParser_cpp::anonymousFunction() {
  AnonymousFunctionContext *_localctx = _tracker.createInstance<AnonymousFunctionContext>(_ctx, getState());
  enterRule(_localctx, 138, JavaScriptParser_cpp::RuleAnonymousFunction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(975);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 108, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<JavaScriptParser_cpp::NamedFunctionContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(954);
      functionDeclaration();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<JavaScriptParser_cpp::AnonymousFunctionDeclContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(956);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaScriptParser_cpp::Async) {
        setState(955);
        match(JavaScriptParser_cpp::Async);
      }
      setState(958);
      match(JavaScriptParser_cpp::Function_);
      setState(960);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaScriptParser_cpp::Multiply) {
        setState(959);
        match(JavaScriptParser_cpp::Multiply);
      }
      setState(962);
      match(JavaScriptParser_cpp::OpenParen);
      setState(964);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 262688) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 73)) & 1125899906842623) != 0)) {
        setState(963);
        formalParameterList();
      }
      setState(966);
      match(JavaScriptParser_cpp::CloseParen);
      setState(967);
      functionBody();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<JavaScriptParser_cpp::ArrowFunctionContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(969);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 107, _ctx)) {
      case 1: {
        setState(968);
        match(JavaScriptParser_cpp::Async);
        break;
      }

      default:
        break;
      }
      setState(971);
      arrowFunctionParameters();
      setState(972);
      match(JavaScriptParser_cpp::ARROW);
      setState(973);
      arrowFunctionBody();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrowFunctionParametersContext ------------------------------------------------------------------

JavaScriptParser_cpp::ArrowFunctionParametersContext::ArrowFunctionParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser_cpp::PropertyNameContext* JavaScriptParser_cpp::ArrowFunctionParametersContext::propertyName() {
  return getRuleContext<JavaScriptParser_cpp::PropertyNameContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::ArrowFunctionParametersContext::OpenParen() {
  return getToken(JavaScriptParser_cpp::OpenParen, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::ArrowFunctionParametersContext::CloseParen() {
  return getToken(JavaScriptParser_cpp::CloseParen, 0);
}

JavaScriptParser_cpp::FormalParameterListContext* JavaScriptParser_cpp::ArrowFunctionParametersContext::formalParameterList() {
  return getRuleContext<JavaScriptParser_cpp::FormalParameterListContext>(0);
}


size_t JavaScriptParser_cpp::ArrowFunctionParametersContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleArrowFunctionParameters;
}

void JavaScriptParser_cpp::ArrowFunctionParametersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrowFunctionParameters(this);
}

void JavaScriptParser_cpp::ArrowFunctionParametersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrowFunctionParameters(this);
}

JavaScriptParser_cpp::ArrowFunctionParametersContext* JavaScriptParser_cpp::arrowFunctionParameters() {
  ArrowFunctionParametersContext *_localctx = _tracker.createInstance<ArrowFunctionParametersContext>(_ctx, getState());
  enterRule(_localctx, 140, JavaScriptParser_cpp::RuleArrowFunctionParameters);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(983);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaScriptParser_cpp::OpenBracket:
      case JavaScriptParser_cpp::NullLiteral:
      case JavaScriptParser_cpp::BooleanLiteral:
      case JavaScriptParser_cpp::DecimalLiteral:
      case JavaScriptParser_cpp::HexIntegerLiteral:
      case JavaScriptParser_cpp::OctalIntegerLiteral:
      case JavaScriptParser_cpp::OctalIntegerLiteral2:
      case JavaScriptParser_cpp::BinaryIntegerLiteral:
      case JavaScriptParser_cpp::Break:
      case JavaScriptParser_cpp::Do:
      case JavaScriptParser_cpp::Instanceof:
      case JavaScriptParser_cpp::Typeof:
      case JavaScriptParser_cpp::Case:
      case JavaScriptParser_cpp::Else:
      case JavaScriptParser_cpp::New:
      case JavaScriptParser_cpp::Var:
      case JavaScriptParser_cpp::Catch:
      case JavaScriptParser_cpp::Finally:
      case JavaScriptParser_cpp::Return:
      case JavaScriptParser_cpp::Void:
      case JavaScriptParser_cpp::Continue:
      case JavaScriptParser_cpp::For:
      case JavaScriptParser_cpp::Switch:
      case JavaScriptParser_cpp::While:
      case JavaScriptParser_cpp::Debugger:
      case JavaScriptParser_cpp::Function_:
      case JavaScriptParser_cpp::This:
      case JavaScriptParser_cpp::With:
      case JavaScriptParser_cpp::Default:
      case JavaScriptParser_cpp::If:
      case JavaScriptParser_cpp::Throw:
      case JavaScriptParser_cpp::Delete:
      case JavaScriptParser_cpp::In:
      case JavaScriptParser_cpp::Try:
      case JavaScriptParser_cpp::As:
      case JavaScriptParser_cpp::From:
      case JavaScriptParser_cpp::Of:
      case JavaScriptParser_cpp::Yield:
      case JavaScriptParser_cpp::YieldStar:
      case JavaScriptParser_cpp::Class:
      case JavaScriptParser_cpp::Enum:
      case JavaScriptParser_cpp::Extends:
      case JavaScriptParser_cpp::Super:
      case JavaScriptParser_cpp::Const:
      case JavaScriptParser_cpp::Export:
      case JavaScriptParser_cpp::Import:
      case JavaScriptParser_cpp::Async:
      case JavaScriptParser_cpp::Await:
      case JavaScriptParser_cpp::Implements:
      case JavaScriptParser_cpp::StrictLet:
      case JavaScriptParser_cpp::NonStrictLet:
      case JavaScriptParser_cpp::Private:
      case JavaScriptParser_cpp::Public:
      case JavaScriptParser_cpp::Interface:
      case JavaScriptParser_cpp::Package:
      case JavaScriptParser_cpp::Protected:
      case JavaScriptParser_cpp::Static:
      case JavaScriptParser_cpp::Identifier:
      case JavaScriptParser_cpp::StringLiteral: {
        enterOuterAlt(_localctx, 1);
        setState(977);
        propertyName();
        break;
      }

      case JavaScriptParser_cpp::OpenParen: {
        enterOuterAlt(_localctx, 2);
        setState(978);
        match(JavaScriptParser_cpp::OpenParen);
        setState(980);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 262688) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 73)) & 1125899906842623) != 0)) {
          setState(979);
          formalParameterList();
        }
        setState(982);
        match(JavaScriptParser_cpp::CloseParen);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrowFunctionBodyContext ------------------------------------------------------------------

JavaScriptParser_cpp::ArrowFunctionBodyContext::ArrowFunctionBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::ArrowFunctionBodyContext::singleExpression() {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(0);
}

JavaScriptParser_cpp::FunctionBodyContext* JavaScriptParser_cpp::ArrowFunctionBodyContext::functionBody() {
  return getRuleContext<JavaScriptParser_cpp::FunctionBodyContext>(0);
}


size_t JavaScriptParser_cpp::ArrowFunctionBodyContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleArrowFunctionBody;
}

void JavaScriptParser_cpp::ArrowFunctionBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrowFunctionBody(this);
}

void JavaScriptParser_cpp::ArrowFunctionBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrowFunctionBody(this);
}

JavaScriptParser_cpp::ArrowFunctionBodyContext* JavaScriptParser_cpp::arrowFunctionBody() {
  ArrowFunctionBodyContext *_localctx = _tracker.createInstance<ArrowFunctionBodyContext>(_ctx, getState());
  enterRule(_localctx, 142, JavaScriptParser_cpp::RuleArrowFunctionBody);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(987);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(985);
      singleExpression(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(986);
      functionBody();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentOperatorContext ------------------------------------------------------------------

JavaScriptParser_cpp::AssignmentOperatorContext::AssignmentOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::AssignmentOperatorContext::MultiplyAssign() {
  return getToken(JavaScriptParser_cpp::MultiplyAssign, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::AssignmentOperatorContext::DivideAssign() {
  return getToken(JavaScriptParser_cpp::DivideAssign, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::AssignmentOperatorContext::ModulusAssign() {
  return getToken(JavaScriptParser_cpp::ModulusAssign, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::AssignmentOperatorContext::PlusAssign() {
  return getToken(JavaScriptParser_cpp::PlusAssign, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::AssignmentOperatorContext::MinusAssign() {
  return getToken(JavaScriptParser_cpp::MinusAssign, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::AssignmentOperatorContext::LeftShiftArithmeticAssign() {
  return getToken(JavaScriptParser_cpp::LeftShiftArithmeticAssign, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::AssignmentOperatorContext::RightShiftArithmeticAssign() {
  return getToken(JavaScriptParser_cpp::RightShiftArithmeticAssign, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::AssignmentOperatorContext::RightShiftLogicalAssign() {
  return getToken(JavaScriptParser_cpp::RightShiftLogicalAssign, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::AssignmentOperatorContext::BitAndAssign() {
  return getToken(JavaScriptParser_cpp::BitAndAssign, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::AssignmentOperatorContext::BitXorAssign() {
  return getToken(JavaScriptParser_cpp::BitXorAssign, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::AssignmentOperatorContext::BitOrAssign() {
  return getToken(JavaScriptParser_cpp::BitOrAssign, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::AssignmentOperatorContext::PowerAssign() {
  return getToken(JavaScriptParser_cpp::PowerAssign, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::AssignmentOperatorContext::NullishCoalescingAssign() {
  return getToken(JavaScriptParser_cpp::NullishCoalescingAssign, 0);
}


size_t JavaScriptParser_cpp::AssignmentOperatorContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleAssignmentOperator;
}

void JavaScriptParser_cpp::AssignmentOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignmentOperator(this);
}

void JavaScriptParser_cpp::AssignmentOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignmentOperator(this);
}

JavaScriptParser_cpp::AssignmentOperatorContext* JavaScriptParser_cpp::assignmentOperator() {
  AssignmentOperatorContext *_localctx = _tracker.createInstance<AssignmentOperatorContext>(_ctx, getState());
  enterRule(_localctx, 144, JavaScriptParser_cpp::RuleAssignmentOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(989);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2305561534236983296) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LiteralContext ------------------------------------------------------------------

JavaScriptParser_cpp::LiteralContext::LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::LiteralContext::NullLiteral() {
  return getToken(JavaScriptParser_cpp::NullLiteral, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::LiteralContext::BooleanLiteral() {
  return getToken(JavaScriptParser_cpp::BooleanLiteral, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::LiteralContext::StringLiteral() {
  return getToken(JavaScriptParser_cpp::StringLiteral, 0);
}

JavaScriptParser_cpp::TemplateStringLiteralContext* JavaScriptParser_cpp::LiteralContext::templateStringLiteral() {
  return getRuleContext<JavaScriptParser_cpp::TemplateStringLiteralContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::LiteralContext::RegularExpressionLiteral() {
  return getToken(JavaScriptParser_cpp::RegularExpressionLiteral, 0);
}

JavaScriptParser_cpp::NumericLiteralContext* JavaScriptParser_cpp::LiteralContext::numericLiteral() {
  return getRuleContext<JavaScriptParser_cpp::NumericLiteralContext>(0);
}

JavaScriptParser_cpp::BigintLiteralContext* JavaScriptParser_cpp::LiteralContext::bigintLiteral() {
  return getRuleContext<JavaScriptParser_cpp::BigintLiteralContext>(0);
}


size_t JavaScriptParser_cpp::LiteralContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleLiteral;
}

void JavaScriptParser_cpp::LiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral(this);
}

void JavaScriptParser_cpp::LiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral(this);
}

JavaScriptParser_cpp::LiteralContext* JavaScriptParser_cpp::literal() {
  LiteralContext *_localctx = _tracker.createInstance<LiteralContext>(_ctx, getState());
  enterRule(_localctx, 146, JavaScriptParser_cpp::RuleLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(998);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaScriptParser_cpp::NullLiteral: {
        enterOuterAlt(_localctx, 1);
        setState(991);
        match(JavaScriptParser_cpp::NullLiteral);
        break;
      }

      case JavaScriptParser_cpp::BooleanLiteral: {
        enterOuterAlt(_localctx, 2);
        setState(992);
        match(JavaScriptParser_cpp::BooleanLiteral);
        break;
      }

      case JavaScriptParser_cpp::StringLiteral: {
        enterOuterAlt(_localctx, 3);
        setState(993);
        match(JavaScriptParser_cpp::StringLiteral);
        break;
      }

      case JavaScriptParser_cpp::BackTick: {
        enterOuterAlt(_localctx, 4);
        setState(994);
        templateStringLiteral();
        break;
      }

      case JavaScriptParser_cpp::RegularExpressionLiteral: {
        enterOuterAlt(_localctx, 5);
        setState(995);
        match(JavaScriptParser_cpp::RegularExpressionLiteral);
        break;
      }

      case JavaScriptParser_cpp::DecimalLiteral:
      case JavaScriptParser_cpp::HexIntegerLiteral:
      case JavaScriptParser_cpp::OctalIntegerLiteral:
      case JavaScriptParser_cpp::OctalIntegerLiteral2:
      case JavaScriptParser_cpp::BinaryIntegerLiteral: {
        enterOuterAlt(_localctx, 6);
        setState(996);
        numericLiteral();
        break;
      }

      case JavaScriptParser_cpp::BigHexIntegerLiteral:
      case JavaScriptParser_cpp::BigOctalIntegerLiteral:
      case JavaScriptParser_cpp::BigBinaryIntegerLiteral:
      case JavaScriptParser_cpp::BigDecimalIntegerLiteral: {
        enterOuterAlt(_localctx, 7);
        setState(997);
        bigintLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TemplateStringLiteralContext ------------------------------------------------------------------

JavaScriptParser_cpp::TemplateStringLiteralContext::TemplateStringLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> JavaScriptParser_cpp::TemplateStringLiteralContext::BackTick() {
  return getTokens(JavaScriptParser_cpp::BackTick);
}

tree::TerminalNode* JavaScriptParser_cpp::TemplateStringLiteralContext::BackTick(size_t i) {
  return getToken(JavaScriptParser_cpp::BackTick, i);
}

std::vector<JavaScriptParser_cpp::TemplateStringAtomContext *> JavaScriptParser_cpp::TemplateStringLiteralContext::templateStringAtom() {
  return getRuleContexts<JavaScriptParser_cpp::TemplateStringAtomContext>();
}

JavaScriptParser_cpp::TemplateStringAtomContext* JavaScriptParser_cpp::TemplateStringLiteralContext::templateStringAtom(size_t i) {
  return getRuleContext<JavaScriptParser_cpp::TemplateStringAtomContext>(i);
}


size_t JavaScriptParser_cpp::TemplateStringLiteralContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleTemplateStringLiteral;
}

void JavaScriptParser_cpp::TemplateStringLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTemplateStringLiteral(this);
}

void JavaScriptParser_cpp::TemplateStringLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTemplateStringLiteral(this);
}

JavaScriptParser_cpp::TemplateStringLiteralContext* JavaScriptParser_cpp::templateStringLiteral() {
  TemplateStringLiteralContext *_localctx = _tracker.createInstance<TemplateStringLiteralContext>(_ctx, getState());
  enterRule(_localctx, 148, JavaScriptParser_cpp::RuleTemplateStringLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1000);
    match(JavaScriptParser_cpp::BackTick);
    setState(1004);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaScriptParser_cpp::TemplateStringStartExpression

    || _la == JavaScriptParser_cpp::TemplateStringAtom) {
      setState(1001);
      templateStringAtom();
      setState(1006);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1007);
    match(JavaScriptParser_cpp::BackTick);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TemplateStringAtomContext ------------------------------------------------------------------

JavaScriptParser_cpp::TemplateStringAtomContext::TemplateStringAtomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::TemplateStringAtomContext::TemplateStringAtom() {
  return getToken(JavaScriptParser_cpp::TemplateStringAtom, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::TemplateStringAtomContext::TemplateStringStartExpression() {
  return getToken(JavaScriptParser_cpp::TemplateStringStartExpression, 0);
}

JavaScriptParser_cpp::SingleExpressionContext* JavaScriptParser_cpp::TemplateStringAtomContext::singleExpression() {
  return getRuleContext<JavaScriptParser_cpp::SingleExpressionContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::TemplateStringAtomContext::TemplateCloseBrace() {
  return getToken(JavaScriptParser_cpp::TemplateCloseBrace, 0);
}


size_t JavaScriptParser_cpp::TemplateStringAtomContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleTemplateStringAtom;
}

void JavaScriptParser_cpp::TemplateStringAtomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTemplateStringAtom(this);
}

void JavaScriptParser_cpp::TemplateStringAtomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTemplateStringAtom(this);
}

JavaScriptParser_cpp::TemplateStringAtomContext* JavaScriptParser_cpp::templateStringAtom() {
  TemplateStringAtomContext *_localctx = _tracker.createInstance<TemplateStringAtomContext>(_ctx, getState());
  enterRule(_localctx, 150, JavaScriptParser_cpp::RuleTemplateStringAtom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1014);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaScriptParser_cpp::TemplateStringAtom: {
        enterOuterAlt(_localctx, 1);
        setState(1009);
        match(JavaScriptParser_cpp::TemplateStringAtom);
        break;
      }

      case JavaScriptParser_cpp::TemplateStringStartExpression: {
        enterOuterAlt(_localctx, 2);
        setState(1010);
        match(JavaScriptParser_cpp::TemplateStringStartExpression);
        setState(1011);
        singleExpression(0);
        setState(1012);
        match(JavaScriptParser_cpp::TemplateCloseBrace);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumericLiteralContext ------------------------------------------------------------------

JavaScriptParser_cpp::NumericLiteralContext::NumericLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::NumericLiteralContext::DecimalLiteral() {
  return getToken(JavaScriptParser_cpp::DecimalLiteral, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::NumericLiteralContext::HexIntegerLiteral() {
  return getToken(JavaScriptParser_cpp::HexIntegerLiteral, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::NumericLiteralContext::OctalIntegerLiteral() {
  return getToken(JavaScriptParser_cpp::OctalIntegerLiteral, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::NumericLiteralContext::OctalIntegerLiteral2() {
  return getToken(JavaScriptParser_cpp::OctalIntegerLiteral2, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::NumericLiteralContext::BinaryIntegerLiteral() {
  return getToken(JavaScriptParser_cpp::BinaryIntegerLiteral, 0);
}


size_t JavaScriptParser_cpp::NumericLiteralContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleNumericLiteral;
}

void JavaScriptParser_cpp::NumericLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNumericLiteral(this);
}

void JavaScriptParser_cpp::NumericLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNumericLiteral(this);
}

JavaScriptParser_cpp::NumericLiteralContext* JavaScriptParser_cpp::numericLiteral() {
  NumericLiteralContext *_localctx = _tracker.createInstance<NumericLiteralContext>(_ctx, getState());
  enterRule(_localctx, 152, JavaScriptParser_cpp::RuleNumericLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1016);
    _la = _input->LA(1);
    if (!(((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 31) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BigintLiteralContext ------------------------------------------------------------------

JavaScriptParser_cpp::BigintLiteralContext::BigintLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::BigintLiteralContext::BigDecimalIntegerLiteral() {
  return getToken(JavaScriptParser_cpp::BigDecimalIntegerLiteral, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::BigintLiteralContext::BigHexIntegerLiteral() {
  return getToken(JavaScriptParser_cpp::BigHexIntegerLiteral, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::BigintLiteralContext::BigOctalIntegerLiteral() {
  return getToken(JavaScriptParser_cpp::BigOctalIntegerLiteral, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::BigintLiteralContext::BigBinaryIntegerLiteral() {
  return getToken(JavaScriptParser_cpp::BigBinaryIntegerLiteral, 0);
}


size_t JavaScriptParser_cpp::BigintLiteralContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleBigintLiteral;
}

void JavaScriptParser_cpp::BigintLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBigintLiteral(this);
}

void JavaScriptParser_cpp::BigintLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBigintLiteral(this);
}

JavaScriptParser_cpp::BigintLiteralContext* JavaScriptParser_cpp::bigintLiteral() {
  BigintLiteralContext *_localctx = _tracker.createInstance<BigintLiteralContext>(_ctx, getState());
  enterRule(_localctx, 154, JavaScriptParser_cpp::RuleBigintLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1018);
    _la = _input->LA(1);
    if (!(((((_la - 69) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 69)) & 15) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GetterContext ------------------------------------------------------------------

JavaScriptParser_cpp::GetterContext::GetterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser_cpp::IdentifierContext* JavaScriptParser_cpp::GetterContext::identifier() {
  return getRuleContext<JavaScriptParser_cpp::IdentifierContext>(0);
}

JavaScriptParser_cpp::ClassElementNameContext* JavaScriptParser_cpp::GetterContext::classElementName() {
  return getRuleContext<JavaScriptParser_cpp::ClassElementNameContext>(0);
}


size_t JavaScriptParser_cpp::GetterContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleGetter;
}

void JavaScriptParser_cpp::GetterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGetter(this);
}

void JavaScriptParser_cpp::GetterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGetter(this);
}

JavaScriptParser_cpp::GetterContext* JavaScriptParser_cpp::getter() {
  GetterContext *_localctx = _tracker.createInstance<GetterContext>(_ctx, getState());
  enterRule(_localctx, 156, JavaScriptParser_cpp::RuleGetter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1020);

    if (!(this->n("get"))) throw FailedPredicateException(this, "this->n(\"get\")");
    setState(1021);
    identifier();
    setState(1022);
    classElementName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetterContext ------------------------------------------------------------------

JavaScriptParser_cpp::SetterContext::SetterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser_cpp::IdentifierContext* JavaScriptParser_cpp::SetterContext::identifier() {
  return getRuleContext<JavaScriptParser_cpp::IdentifierContext>(0);
}

JavaScriptParser_cpp::ClassElementNameContext* JavaScriptParser_cpp::SetterContext::classElementName() {
  return getRuleContext<JavaScriptParser_cpp::ClassElementNameContext>(0);
}


size_t JavaScriptParser_cpp::SetterContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleSetter;
}

void JavaScriptParser_cpp::SetterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSetter(this);
}

void JavaScriptParser_cpp::SetterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSetter(this);
}

JavaScriptParser_cpp::SetterContext* JavaScriptParser_cpp::setter() {
  SetterContext *_localctx = _tracker.createInstance<SetterContext>(_ctx, getState());
  enterRule(_localctx, 158, JavaScriptParser_cpp::RuleSetter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1024);

    if (!(this->n("set"))) throw FailedPredicateException(this, "this->n(\"set\")");
    setState(1025);
    identifier();
    setState(1026);
    classElementName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierNameContext ------------------------------------------------------------------

JavaScriptParser_cpp::IdentifierNameContext::IdentifierNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser_cpp::IdentifierContext* JavaScriptParser_cpp::IdentifierNameContext::identifier() {
  return getRuleContext<JavaScriptParser_cpp::IdentifierContext>(0);
}

JavaScriptParser_cpp::ReservedWordContext* JavaScriptParser_cpp::IdentifierNameContext::reservedWord() {
  return getRuleContext<JavaScriptParser_cpp::ReservedWordContext>(0);
}


size_t JavaScriptParser_cpp::IdentifierNameContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleIdentifierName;
}

void JavaScriptParser_cpp::IdentifierNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdentifierName(this);
}

void JavaScriptParser_cpp::IdentifierNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdentifierName(this);
}

JavaScriptParser_cpp::IdentifierNameContext* JavaScriptParser_cpp::identifierName() {
  IdentifierNameContext *_localctx = _tracker.createInstance<IdentifierNameContext>(_ctx, getState());
  enterRule(_localctx, 160, JavaScriptParser_cpp::RuleIdentifierName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1030);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 115, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1028);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1029);
      reservedWord();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierContext ------------------------------------------------------------------

JavaScriptParser_cpp::IdentifierContext::IdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::IdentifierContext::Identifier() {
  return getToken(JavaScriptParser_cpp::Identifier, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::IdentifierContext::NonStrictLet() {
  return getToken(JavaScriptParser_cpp::NonStrictLet, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::IdentifierContext::Async() {
  return getToken(JavaScriptParser_cpp::Async, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::IdentifierContext::As() {
  return getToken(JavaScriptParser_cpp::As, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::IdentifierContext::From() {
  return getToken(JavaScriptParser_cpp::From, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::IdentifierContext::Yield() {
  return getToken(JavaScriptParser_cpp::Yield, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::IdentifierContext::Of() {
  return getToken(JavaScriptParser_cpp::Of, 0);
}


size_t JavaScriptParser_cpp::IdentifierContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleIdentifier;
}

void JavaScriptParser_cpp::IdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdentifier(this);
}

void JavaScriptParser_cpp::IdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdentifier(this);
}

JavaScriptParser_cpp::IdentifierContext* JavaScriptParser_cpp::identifier() {
  IdentifierContext *_localctx = _tracker.createInstance<IdentifierContext>(_ctx, getState());
  enterRule(_localctx, 162, JavaScriptParser_cpp::RuleIdentifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1032);
    _la = _input->LA(1);
    if (!(((((_la - 99) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 99)) & 8458255) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReservedWordContext ------------------------------------------------------------------

JavaScriptParser_cpp::ReservedWordContext::ReservedWordContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaScriptParser_cpp::KeywordContext* JavaScriptParser_cpp::ReservedWordContext::keyword() {
  return getRuleContext<JavaScriptParser_cpp::KeywordContext>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::ReservedWordContext::NullLiteral() {
  return getToken(JavaScriptParser_cpp::NullLiteral, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::ReservedWordContext::BooleanLiteral() {
  return getToken(JavaScriptParser_cpp::BooleanLiteral, 0);
}


size_t JavaScriptParser_cpp::ReservedWordContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleReservedWord;
}

void JavaScriptParser_cpp::ReservedWordContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReservedWord(this);
}

void JavaScriptParser_cpp::ReservedWordContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReservedWord(this);
}

JavaScriptParser_cpp::ReservedWordContext* JavaScriptParser_cpp::reservedWord() {
  ReservedWordContext *_localctx = _tracker.createInstance<ReservedWordContext>(_ctx, getState());
  enterRule(_localctx, 164, JavaScriptParser_cpp::RuleReservedWord);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1037);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaScriptParser_cpp::Break:
      case JavaScriptParser_cpp::Do:
      case JavaScriptParser_cpp::Instanceof:
      case JavaScriptParser_cpp::Typeof:
      case JavaScriptParser_cpp::Case:
      case JavaScriptParser_cpp::Else:
      case JavaScriptParser_cpp::New:
      case JavaScriptParser_cpp::Var:
      case JavaScriptParser_cpp::Catch:
      case JavaScriptParser_cpp::Finally:
      case JavaScriptParser_cpp::Return:
      case JavaScriptParser_cpp::Void:
      case JavaScriptParser_cpp::Continue:
      case JavaScriptParser_cpp::For:
      case JavaScriptParser_cpp::Switch:
      case JavaScriptParser_cpp::While:
      case JavaScriptParser_cpp::Debugger:
      case JavaScriptParser_cpp::Function_:
      case JavaScriptParser_cpp::This:
      case JavaScriptParser_cpp::With:
      case JavaScriptParser_cpp::Default:
      case JavaScriptParser_cpp::If:
      case JavaScriptParser_cpp::Throw:
      case JavaScriptParser_cpp::Delete:
      case JavaScriptParser_cpp::In:
      case JavaScriptParser_cpp::Try:
      case JavaScriptParser_cpp::As:
      case JavaScriptParser_cpp::From:
      case JavaScriptParser_cpp::Of:
      case JavaScriptParser_cpp::Yield:
      case JavaScriptParser_cpp::YieldStar:
      case JavaScriptParser_cpp::Class:
      case JavaScriptParser_cpp::Enum:
      case JavaScriptParser_cpp::Extends:
      case JavaScriptParser_cpp::Super:
      case JavaScriptParser_cpp::Const:
      case JavaScriptParser_cpp::Export:
      case JavaScriptParser_cpp::Import:
      case JavaScriptParser_cpp::Async:
      case JavaScriptParser_cpp::Await:
      case JavaScriptParser_cpp::Implements:
      case JavaScriptParser_cpp::StrictLet:
      case JavaScriptParser_cpp::NonStrictLet:
      case JavaScriptParser_cpp::Private:
      case JavaScriptParser_cpp::Public:
      case JavaScriptParser_cpp::Interface:
      case JavaScriptParser_cpp::Package:
      case JavaScriptParser_cpp::Protected:
      case JavaScriptParser_cpp::Static: {
        enterOuterAlt(_localctx, 1);
        setState(1034);
        keyword();
        break;
      }

      case JavaScriptParser_cpp::NullLiteral: {
        enterOuterAlt(_localctx, 2);
        setState(1035);
        match(JavaScriptParser_cpp::NullLiteral);
        break;
      }

      case JavaScriptParser_cpp::BooleanLiteral: {
        enterOuterAlt(_localctx, 3);
        setState(1036);
        match(JavaScriptParser_cpp::BooleanLiteral);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KeywordContext ------------------------------------------------------------------

JavaScriptParser_cpp::KeywordContext::KeywordContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::Break() {
  return getToken(JavaScriptParser_cpp::Break, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::Do() {
  return getToken(JavaScriptParser_cpp::Do, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::Instanceof() {
  return getToken(JavaScriptParser_cpp::Instanceof, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::Typeof() {
  return getToken(JavaScriptParser_cpp::Typeof, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::Case() {
  return getToken(JavaScriptParser_cpp::Case, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::Else() {
  return getToken(JavaScriptParser_cpp::Else, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::New() {
  return getToken(JavaScriptParser_cpp::New, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::Var() {
  return getToken(JavaScriptParser_cpp::Var, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::Catch() {
  return getToken(JavaScriptParser_cpp::Catch, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::Finally() {
  return getToken(JavaScriptParser_cpp::Finally, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::Return() {
  return getToken(JavaScriptParser_cpp::Return, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::Void() {
  return getToken(JavaScriptParser_cpp::Void, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::Continue() {
  return getToken(JavaScriptParser_cpp::Continue, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::For() {
  return getToken(JavaScriptParser_cpp::For, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::Switch() {
  return getToken(JavaScriptParser_cpp::Switch, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::While() {
  return getToken(JavaScriptParser_cpp::While, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::Debugger() {
  return getToken(JavaScriptParser_cpp::Debugger, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::Function_() {
  return getToken(JavaScriptParser_cpp::Function_, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::This() {
  return getToken(JavaScriptParser_cpp::This, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::With() {
  return getToken(JavaScriptParser_cpp::With, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::Default() {
  return getToken(JavaScriptParser_cpp::Default, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::If() {
  return getToken(JavaScriptParser_cpp::If, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::Throw() {
  return getToken(JavaScriptParser_cpp::Throw, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::Delete() {
  return getToken(JavaScriptParser_cpp::Delete, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::In() {
  return getToken(JavaScriptParser_cpp::In, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::Try() {
  return getToken(JavaScriptParser_cpp::Try, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::Class() {
  return getToken(JavaScriptParser_cpp::Class, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::Enum() {
  return getToken(JavaScriptParser_cpp::Enum, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::Extends() {
  return getToken(JavaScriptParser_cpp::Extends, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::Super() {
  return getToken(JavaScriptParser_cpp::Super, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::Const() {
  return getToken(JavaScriptParser_cpp::Const, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::Export() {
  return getToken(JavaScriptParser_cpp::Export, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::Import() {
  return getToken(JavaScriptParser_cpp::Import, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::Implements() {
  return getToken(JavaScriptParser_cpp::Implements, 0);
}

JavaScriptParser_cpp::Let_Context* JavaScriptParser_cpp::KeywordContext::let_() {
  return getRuleContext<JavaScriptParser_cpp::Let_Context>(0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::Private() {
  return getToken(JavaScriptParser_cpp::Private, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::Public() {
  return getToken(JavaScriptParser_cpp::Public, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::Interface() {
  return getToken(JavaScriptParser_cpp::Interface, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::Package() {
  return getToken(JavaScriptParser_cpp::Package, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::Protected() {
  return getToken(JavaScriptParser_cpp::Protected, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::Static() {
  return getToken(JavaScriptParser_cpp::Static, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::Yield() {
  return getToken(JavaScriptParser_cpp::Yield, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::YieldStar() {
  return getToken(JavaScriptParser_cpp::YieldStar, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::Async() {
  return getToken(JavaScriptParser_cpp::Async, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::Await() {
  return getToken(JavaScriptParser_cpp::Await, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::From() {
  return getToken(JavaScriptParser_cpp::From, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::As() {
  return getToken(JavaScriptParser_cpp::As, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::KeywordContext::Of() {
  return getToken(JavaScriptParser_cpp::Of, 0);
}


size_t JavaScriptParser_cpp::KeywordContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleKeyword;
}

void JavaScriptParser_cpp::KeywordContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterKeyword(this);
}

void JavaScriptParser_cpp::KeywordContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitKeyword(this);
}

JavaScriptParser_cpp::KeywordContext* JavaScriptParser_cpp::keyword() {
  KeywordContext *_localctx = _tracker.createInstance<KeywordContext>(_ctx, getState());
  enterRule(_localctx, 166, JavaScriptParser_cpp::RuleKeyword);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1087);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaScriptParser_cpp::Break: {
        enterOuterAlt(_localctx, 1);
        setState(1039);
        match(JavaScriptParser_cpp::Break);
        break;
      }

      case JavaScriptParser_cpp::Do: {
        enterOuterAlt(_localctx, 2);
        setState(1040);
        match(JavaScriptParser_cpp::Do);
        break;
      }

      case JavaScriptParser_cpp::Instanceof: {
        enterOuterAlt(_localctx, 3);
        setState(1041);
        match(JavaScriptParser_cpp::Instanceof);
        break;
      }

      case JavaScriptParser_cpp::Typeof: {
        enterOuterAlt(_localctx, 4);
        setState(1042);
        match(JavaScriptParser_cpp::Typeof);
        break;
      }

      case JavaScriptParser_cpp::Case: {
        enterOuterAlt(_localctx, 5);
        setState(1043);
        match(JavaScriptParser_cpp::Case);
        break;
      }

      case JavaScriptParser_cpp::Else: {
        enterOuterAlt(_localctx, 6);
        setState(1044);
        match(JavaScriptParser_cpp::Else);
        break;
      }

      case JavaScriptParser_cpp::New: {
        enterOuterAlt(_localctx, 7);
        setState(1045);
        match(JavaScriptParser_cpp::New);
        break;
      }

      case JavaScriptParser_cpp::Var: {
        enterOuterAlt(_localctx, 8);
        setState(1046);
        match(JavaScriptParser_cpp::Var);
        break;
      }

      case JavaScriptParser_cpp::Catch: {
        enterOuterAlt(_localctx, 9);
        setState(1047);
        match(JavaScriptParser_cpp::Catch);
        break;
      }

      case JavaScriptParser_cpp::Finally: {
        enterOuterAlt(_localctx, 10);
        setState(1048);
        match(JavaScriptParser_cpp::Finally);
        break;
      }

      case JavaScriptParser_cpp::Return: {
        enterOuterAlt(_localctx, 11);
        setState(1049);
        match(JavaScriptParser_cpp::Return);
        break;
      }

      case JavaScriptParser_cpp::Void: {
        enterOuterAlt(_localctx, 12);
        setState(1050);
        match(JavaScriptParser_cpp::Void);
        break;
      }

      case JavaScriptParser_cpp::Continue: {
        enterOuterAlt(_localctx, 13);
        setState(1051);
        match(JavaScriptParser_cpp::Continue);
        break;
      }

      case JavaScriptParser_cpp::For: {
        enterOuterAlt(_localctx, 14);
        setState(1052);
        match(JavaScriptParser_cpp::For);
        break;
      }

      case JavaScriptParser_cpp::Switch: {
        enterOuterAlt(_localctx, 15);
        setState(1053);
        match(JavaScriptParser_cpp::Switch);
        break;
      }

      case JavaScriptParser_cpp::While: {
        enterOuterAlt(_localctx, 16);
        setState(1054);
        match(JavaScriptParser_cpp::While);
        break;
      }

      case JavaScriptParser_cpp::Debugger: {
        enterOuterAlt(_localctx, 17);
        setState(1055);
        match(JavaScriptParser_cpp::Debugger);
        break;
      }

      case JavaScriptParser_cpp::Function_: {
        enterOuterAlt(_localctx, 18);
        setState(1056);
        match(JavaScriptParser_cpp::Function_);
        break;
      }

      case JavaScriptParser_cpp::This: {
        enterOuterAlt(_localctx, 19);
        setState(1057);
        match(JavaScriptParser_cpp::This);
        break;
      }

      case JavaScriptParser_cpp::With: {
        enterOuterAlt(_localctx, 20);
        setState(1058);
        match(JavaScriptParser_cpp::With);
        break;
      }

      case JavaScriptParser_cpp::Default: {
        enterOuterAlt(_localctx, 21);
        setState(1059);
        match(JavaScriptParser_cpp::Default);
        break;
      }

      case JavaScriptParser_cpp::If: {
        enterOuterAlt(_localctx, 22);
        setState(1060);
        match(JavaScriptParser_cpp::If);
        break;
      }

      case JavaScriptParser_cpp::Throw: {
        enterOuterAlt(_localctx, 23);
        setState(1061);
        match(JavaScriptParser_cpp::Throw);
        break;
      }

      case JavaScriptParser_cpp::Delete: {
        enterOuterAlt(_localctx, 24);
        setState(1062);
        match(JavaScriptParser_cpp::Delete);
        break;
      }

      case JavaScriptParser_cpp::In: {
        enterOuterAlt(_localctx, 25);
        setState(1063);
        match(JavaScriptParser_cpp::In);
        break;
      }

      case JavaScriptParser_cpp::Try: {
        enterOuterAlt(_localctx, 26);
        setState(1064);
        match(JavaScriptParser_cpp::Try);
        break;
      }

      case JavaScriptParser_cpp::Class: {
        enterOuterAlt(_localctx, 27);
        setState(1065);
        match(JavaScriptParser_cpp::Class);
        break;
      }

      case JavaScriptParser_cpp::Enum: {
        enterOuterAlt(_localctx, 28);
        setState(1066);
        match(JavaScriptParser_cpp::Enum);
        break;
      }

      case JavaScriptParser_cpp::Extends: {
        enterOuterAlt(_localctx, 29);
        setState(1067);
        match(JavaScriptParser_cpp::Extends);
        break;
      }

      case JavaScriptParser_cpp::Super: {
        enterOuterAlt(_localctx, 30);
        setState(1068);
        match(JavaScriptParser_cpp::Super);
        break;
      }

      case JavaScriptParser_cpp::Const: {
        enterOuterAlt(_localctx, 31);
        setState(1069);
        match(JavaScriptParser_cpp::Const);
        break;
      }

      case JavaScriptParser_cpp::Export: {
        enterOuterAlt(_localctx, 32);
        setState(1070);
        match(JavaScriptParser_cpp::Export);
        break;
      }

      case JavaScriptParser_cpp::Import: {
        enterOuterAlt(_localctx, 33);
        setState(1071);
        match(JavaScriptParser_cpp::Import);
        break;
      }

      case JavaScriptParser_cpp::Implements: {
        enterOuterAlt(_localctx, 34);
        setState(1072);
        match(JavaScriptParser_cpp::Implements);
        break;
      }

      case JavaScriptParser_cpp::StrictLet:
      case JavaScriptParser_cpp::NonStrictLet: {
        enterOuterAlt(_localctx, 35);
        setState(1073);
        let_();
        break;
      }

      case JavaScriptParser_cpp::Private: {
        enterOuterAlt(_localctx, 36);
        setState(1074);
        match(JavaScriptParser_cpp::Private);
        break;
      }

      case JavaScriptParser_cpp::Public: {
        enterOuterAlt(_localctx, 37);
        setState(1075);
        match(JavaScriptParser_cpp::Public);
        break;
      }

      case JavaScriptParser_cpp::Interface: {
        enterOuterAlt(_localctx, 38);
        setState(1076);
        match(JavaScriptParser_cpp::Interface);
        break;
      }

      case JavaScriptParser_cpp::Package: {
        enterOuterAlt(_localctx, 39);
        setState(1077);
        match(JavaScriptParser_cpp::Package);
        break;
      }

      case JavaScriptParser_cpp::Protected: {
        enterOuterAlt(_localctx, 40);
        setState(1078);
        match(JavaScriptParser_cpp::Protected);
        break;
      }

      case JavaScriptParser_cpp::Static: {
        enterOuterAlt(_localctx, 41);
        setState(1079);
        match(JavaScriptParser_cpp::Static);
        break;
      }

      case JavaScriptParser_cpp::Yield: {
        enterOuterAlt(_localctx, 42);
        setState(1080);
        match(JavaScriptParser_cpp::Yield);
        break;
      }

      case JavaScriptParser_cpp::YieldStar: {
        enterOuterAlt(_localctx, 43);
        setState(1081);
        match(JavaScriptParser_cpp::YieldStar);
        break;
      }

      case JavaScriptParser_cpp::Async: {
        enterOuterAlt(_localctx, 44);
        setState(1082);
        match(JavaScriptParser_cpp::Async);
        break;
      }

      case JavaScriptParser_cpp::Await: {
        enterOuterAlt(_localctx, 45);
        setState(1083);
        match(JavaScriptParser_cpp::Await);
        break;
      }

      case JavaScriptParser_cpp::From: {
        enterOuterAlt(_localctx, 46);
        setState(1084);
        match(JavaScriptParser_cpp::From);
        break;
      }

      case JavaScriptParser_cpp::As: {
        enterOuterAlt(_localctx, 47);
        setState(1085);
        match(JavaScriptParser_cpp::As);
        break;
      }

      case JavaScriptParser_cpp::Of: {
        enterOuterAlt(_localctx, 48);
        setState(1086);
        match(JavaScriptParser_cpp::Of);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Let_Context ------------------------------------------------------------------

JavaScriptParser_cpp::Let_Context::Let_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::Let_Context::NonStrictLet() {
  return getToken(JavaScriptParser_cpp::NonStrictLet, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::Let_Context::StrictLet() {
  return getToken(JavaScriptParser_cpp::StrictLet, 0);
}


size_t JavaScriptParser_cpp::Let_Context::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleLet_;
}

void JavaScriptParser_cpp::Let_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLet_(this);
}

void JavaScriptParser_cpp::Let_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLet_(this);
}

JavaScriptParser_cpp::Let_Context* JavaScriptParser_cpp::let_() {
  Let_Context *_localctx = _tracker.createInstance<Let_Context>(_ctx, getState());
  enterRule(_localctx, 168, JavaScriptParser_cpp::RuleLet_);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1089);
    _la = _input->LA(1);
    if (!(_la == JavaScriptParser_cpp::StrictLet

    || _la == JavaScriptParser_cpp::NonStrictLet)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EosContext ------------------------------------------------------------------

JavaScriptParser_cpp::EosContext::EosContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaScriptParser_cpp::EosContext::SemiColon() {
  return getToken(JavaScriptParser_cpp::SemiColon, 0);
}

tree::TerminalNode* JavaScriptParser_cpp::EosContext::EOF() {
  return getToken(JavaScriptParser_cpp::EOF, 0);
}


size_t JavaScriptParser_cpp::EosContext::getRuleIndex() const {
  return JavaScriptParser_cpp::RuleEos;
}

void JavaScriptParser_cpp::EosContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEos(this);
}

void JavaScriptParser_cpp::EosContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaScriptParser_cppListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEos(this);
}

JavaScriptParser_cpp::EosContext* JavaScriptParser_cpp::eos() {
  EosContext *_localctx = _tracker.createInstance<EosContext>(_ctx, getState());
  enterRule(_localctx, 170, JavaScriptParser_cpp::RuleEos);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1095);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 118, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1091);
      match(JavaScriptParser_cpp::SemiColon);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1092);
      match(JavaScriptParser_cpp::EOF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1093);

      if (!(this->lineTerminatorAhead())) throw FailedPredicateException(this, "this->lineTerminatorAhead()");
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1094);

      if (!(this->closeBrace())) throw FailedPredicateException(this, "this->closeBrace()");
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool JavaScriptParser_cpp::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 24: return expressionStatementSempred(antlrcpp::downCast<ExpressionStatementContext *>(context), predicateIndex);
    case 28: return continueStatementSempred(antlrcpp::downCast<ContinueStatementContext *>(context), predicateIndex);
    case 29: return breakStatementSempred(antlrcpp::downCast<BreakStatementContext *>(context), predicateIndex);
    case 30: return returnStatementSempred(antlrcpp::downCast<ReturnStatementContext *>(context), predicateIndex);
    case 31: return yieldStatementSempred(antlrcpp::downCast<YieldStatementContext *>(context), predicateIndex);
    case 39: return throwStatementSempred(antlrcpp::downCast<ThrowStatementContext *>(context), predicateIndex);
    case 47: return classElementSempred(antlrcpp::downCast<ClassElementContext *>(context), predicateIndex);
    case 48: return methodDefinitionSempred(antlrcpp::downCast<MethodDefinitionContext *>(context), predicateIndex);
    case 65: return singleExpressionSempred(antlrcpp::downCast<SingleExpressionContext *>(context), predicateIndex);
    case 78: return getterSempred(antlrcpp::downCast<GetterContext *>(context), predicateIndex);
    case 79: return setterSempred(antlrcpp::downCast<SetterContext *>(context), predicateIndex);
    case 85: return eosSempred(antlrcpp::downCast<EosContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool JavaScriptParser_cpp::expressionStatementSempred(ExpressionStatementContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return this->notOpenBraceAndNotFunction();

  default:
    break;
  }
  return true;
}

bool JavaScriptParser_cpp::continueStatementSempred(ContinueStatementContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 1: return this->notLineTerminator();

  default:
    break;
  }
  return true;
}

bool JavaScriptParser_cpp::breakStatementSempred(BreakStatementContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 2: return this->notLineTerminator();

  default:
    break;
  }
  return true;
}

bool JavaScriptParser_cpp::returnStatementSempred(ReturnStatementContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 3: return this->notLineTerminator();

  default:
    break;
  }
  return true;
}

bool JavaScriptParser_cpp::yieldStatementSempred(YieldStatementContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 4: return this->notLineTerminator();

  default:
    break;
  }
  return true;
}

bool JavaScriptParser_cpp::throwStatementSempred(ThrowStatementContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 5: return this->notLineTerminator();

  default:
    break;
  }
  return true;
}

bool JavaScriptParser_cpp::classElementSempred(ClassElementContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 6: return this->n("static");
    case 7: return this->n("static");
    case 8: return this->n("static");

  default:
    break;
  }
  return true;
}

bool JavaScriptParser_cpp::methodDefinitionSempred(MethodDefinitionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 9: return this->notLineTerminator();

  default:
    break;
  }
  return true;
}

bool JavaScriptParser_cpp::singleExpressionSempred(SingleExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 10: return precpred(_ctx, 47);
    case 11: return precpred(_ctx, 27);
    case 12: return precpred(_ctx, 26);
    case 13: return precpred(_ctx, 25);
    case 14: return precpred(_ctx, 24);
    case 15: return precpred(_ctx, 23);
    case 16: return precpred(_ctx, 22);
    case 17: return precpred(_ctx, 21);
    case 18: return precpred(_ctx, 20);
    case 19: return precpred(_ctx, 19);
    case 20: return precpred(_ctx, 18);
    case 21: return precpred(_ctx, 17);
    case 22: return precpred(_ctx, 16);
    case 23: return precpred(_ctx, 15);
    case 24: return precpred(_ctx, 14);
    case 25: return precpred(_ctx, 13);
    case 26: return precpred(_ctx, 12);
    case 27: return precpred(_ctx, 11);
    case 28: return precpred(_ctx, 46);
    case 29: return precpred(_ctx, 45);
    case 30: return precpred(_ctx, 41);
    case 31: return precpred(_ctx, 39);
    case 32: return this->notLineTerminator();
    case 33: return precpred(_ctx, 38);
    case 34: return this->notLineTerminator();
    case 35: return precpred(_ctx, 9);

  default:
    break;
  }
  return true;
}

bool JavaScriptParser_cpp::getterSempred(GetterContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 36: return this->n("get");

  default:
    break;
  }
  return true;
}

bool JavaScriptParser_cpp::setterSempred(SetterContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 37: return this->n("set");

  default:
    break;
  }
  return true;
}

bool JavaScriptParser_cpp::eosSempred(EosContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 38: return this->lineTerminatorAhead();
    case 39: return this->closeBrace();

  default:
    break;
  }
  return true;
}

void JavaScriptParser_cpp::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  javascriptparser_cppParserInitialize();
#else
  ::antlr4::internal::call_once(javascriptparser_cppParserOnceFlag, javascriptparser_cppParserInitialize);
#endif
}
