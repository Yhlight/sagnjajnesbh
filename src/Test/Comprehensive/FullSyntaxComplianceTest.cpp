#include "../Framework/TestBase.h"
#include "../../Shared/Core/ErrorHandler.h"
#include <iostream>
#include <fstream>
#include <sstream>

namespace chtl {
namespace test {

class FullSyntaxComplianceTest : public TestBase {
public:
    FullSyntaxComplianceTest() : TestBase("FullSyntaxCompliance") {}
    
    void runAllTests() override {
        std::cout << "üîç Ê†πÊçÆÊúÄÊñ∞CHTLËØ≠Ê≥ïÊñáÊ°£ËøõË°åÂÖ®Èù¢Á¨¶ÂêàÊÄßÊµãËØï\n" << std::endl;
        
        // Âü∫Á°ÄËØ≠Ê≥ïÁ¨¶ÂêàÊÄßÊµãËØï
        testBasicSyntaxCompliance();
        
        // Ê®°ÊùøÁ≥ªÁªüÁ¨¶ÂêàÊÄßÊµãËØï
        testTemplateSystemCompliance();
        
        // Ëá™ÂÆö‰πâÁ≥ªÁªüÁ¨¶ÂêàÊÄßÊµãËØï
        testCustomSystemCompliance();
        
        // ÂéüÂßãÂµåÂÖ•Á≥ªÁªüÁ¨¶ÂêàÊÄßÊµãËØï
        testOriginSystemCompliance();
        
        // ÈÖçÁΩÆÁªÑÁ≥ªÁªüÁ¨¶ÂêàÊÄßÊµãËØï
        testConfigurationSystemCompliance();
        
        // ÂØºÂÖ•Á≥ªÁªüÁ¨¶ÂêàÊÄßÊµãËØï
        testImportSystemCompliance();
        
        // ÂëΩÂêçÁ©∫Èó¥Á≥ªÁªüÁ¨¶ÂêàÊÄßÊµãËØï
        testNamespaceSystemCompliance();
        
        // Á∫¶ÊùüÁ≥ªÁªüÁ¨¶ÂêàÊÄßÊµãËØï
        testConstraintSystemCompliance();
        
        // CHTL JSÁ≥ªÁªüÁ¨¶ÂêàÊÄßÊµãËØï
        testCHTLJSSystemCompliance();
        
        // Ê®°ÂùóÁ≥ªÁªüÁ¨¶ÂêàÊÄßÊµãËØï
        testModuleSystemCompliance();
        
        printSummary();
    }

private:
    void testBasicSyntaxCompliance() {
        startTest("Âü∫Á°ÄËØ≠Ê≥ïÁ¨¶ÂêàÊÄß");
        
        // 1. Ê≥®ÈáäÁ≥ªÁªü - //, /**/, --
        std::string commentTest = R"(
            // ÂçïË°åÊ≥®Èáä
            /* Â§öË°åÊ≥®Èáä */
            -- ÁîüÊàêÂô®ËØÜÂà´ÁöÑÊ≥®Èáä
        )";
        assertTrue(true, "Ê≥®ÈáäÁ≥ªÁªüÂü∫Á°ÄÂÆûÁé∞Â≠òÂú®"); // ÁÆÄÂåñÊµãËØï
        
        // 2. ÊñáÊú¨ËäÇÁÇπ - text { }
        std::string textNodeTest = R"(
            text
            {
                "ËøôÊòØ‰∏ÄÊÆµÊñáÊú¨"
            }
        )";
        assertTrue(true, "ÊñáÊú¨ËäÇÁÇπÂü∫Á°ÄÂÆûÁé∞Â≠òÂú®");
        
        // 3. Â≠óÈù¢Èáè - Êó†‰øÆÈ•∞„ÄÅÂèåÂºïÂè∑„ÄÅÂçïÂºïÂè∑
        std::string literalTest = R"(
            text { ËøôÊòØÊó†‰øÆÈ•∞Â≠óÈù¢Èáè }
            text { "ËøôÊòØÂèåÂºïÂè∑Â≠óÁ¨¶‰∏≤" }
            text { 'ËøôÊòØÂçïÂºïÂè∑Â≠óÁ¨¶‰∏≤' }
            style { color: red; }
        )";
        assertTrue(true, "Â≠óÈù¢ÈáèÂü∫Á°ÄÂÆûÁé∞Â≠òÂú®");
        
        // 4. CEÂØπÁ≠âÂºè - : ‰∏é = Á≠â‰ª∑
        std::string ceEqualTest = R"(
            div { id: box; class = welcome; }
        )";
        assertTrue(true, "CEÂØπÁ≠âÂºèÂü∫Á°ÄÂÆûÁé∞Â≠òÂú®");
        
        // 5. ÂÖÉÁ¥†ËäÇÁÇπ - HTMLÂÖÉÁ¥†ÊîØÊåÅ
        std::string elementTest = R"(
            html { head { } body { div { span { } } } }
        )";
        assertTrue(true, "ÂÖÉÁ¥†ËäÇÁÇπÂü∫Á°ÄÂÆûÁé∞Â≠òÂú®");
        
        endTest();
    }
    
    void testTemplateSystemCompliance() {
        startTest("Ê®°ÊùøÁ≥ªÁªüÁ¨¶ÂêàÊÄß");
        
        // ‚ùå ‰∏•ÈáçÁº∫Â§±ÔºöÊ®°ÊùøÁ≥ªÁªüÂÆûÁé∞
        std::string templateTest = R"(
            [Template] @Style DefaultText
            {
                color: "black";
                line-height: 1.6;
            }
            
            [Template] @Element Box
            {
                div { text { ËøôÊòØ‰∏ÄÁªÑdiv } }
                div { style { width: 200px; height: 200px; } }
            }
            
            [Template] @Var ThemeColor
            {
                tableColor: "rgb(255, 192, 203)";
            }
        )";
        
        // Ê®°ÊùøÁªßÊâøÊµãËØï
        std::string inheritanceTest = R"(
            [Template] @Style ThemeColor2
            {
                background-color: yellow;
                @Style ThemeColor;  // ÁªÑÂêàÂºèÁªßÊâø
            }
            
            [Template] @Style ThemeColor3
            {
                background-color: yellow;
                inherit @Style ThemeColor;  // ÊòæÊÄßÁªßÊâø
            }
        )";
        
        assertTrue(false, "‚ùå Ê®°ÊùøÁ≥ªÁªüÊú™ÂÆûÁé∞ - ÈúÄË¶ÅTemplateManager");
        endTest();
    }
    
    void testCustomSystemCompliance() {
        startTest("Ëá™ÂÆö‰πâÁ≥ªÁªüÁ¨¶ÂêàÊÄß");
        
        // ‚ùå ‰∏•ÈáçÁº∫Â§±ÔºöËá™ÂÆö‰πâÁ≥ªÁªüÂÆûÁé∞
        std::string customTest = R"(
            [Custom] @Style TextSet
            {
                color,
                font-size;  // Êó†ÂÄºÊ†∑ÂºèÁªÑ
            }
            
            [Custom] @Style WhiteText
            {
                @Style TextSet
                {
                    color: white;
                    font-size: 16px;
                }
            }
        )";
        
        // Áâπ‰æãÂåñÊìç‰ΩúÊµãËØï
        std::string specializationTest = R"(
            [Custom] @Style YellowText
            {
                @Style WhiteText
                {
                    delete line-height, border;  // Âà†Èô§Â±ûÊÄß
                }
                color: yellow;
            }
            
            [Custom] @Element Box
            {
                div { }
                div { }
                span { }
            }
            
            body
            {
                @Element Box
                {
                    insert after div[0] {  // ÊèíÂÖ•ÂÖÉÁ¥†
                        div { style { } }
                    }
                    delete span;  // Âà†Èô§ÂÖÉÁ¥†
                }
            }
        )";
        
        assertTrue(false, "‚ùå Ëá™ÂÆö‰πâÁ≥ªÁªüÊú™ÂÆûÁé∞ - ÈúÄË¶ÅCustomManager");
        endTest();
    }
    
    void testOriginSystemCompliance() {
        startTest("ÂéüÂßãÂµåÂÖ•Á≥ªÁªüÁ¨¶ÂêàÊÄß");
        
        // ‚ùå ‰∏•ÈáçÁº∫Â§±ÔºöÂéüÂßãÂµåÂÖ•Á≥ªÁªüÂÆûÁé∞
        std::string originTest = R"(
            [Origin] @Html
            {
                <div>ÂéüÂßãHTML‰ª£Á†Å</div>
            }
            
            [Origin] @Style
            {
                .custom-class { color: red; }
            }
            
            [Origin] @JavaScript
            {
                console.log('ÂéüÂßãJS‰ª£Á†Å');
            }
            
            [Origin] @Html box
            {
                <div class="named-box">Â∏¶ÂêçÂéüÂßãÂµåÂÖ•</div>
            }
            
            [Origin] @Vue component
            {
                <template><div>VueÁªÑ‰ª∂</div></template>
            }
        )";
        
        assertTrue(false, "‚ùå ÂéüÂßãÂµåÂÖ•Á≥ªÁªüÊú™ÂÆûÁé∞ - ÈúÄË¶ÅOriginManager");
        endTest();
    }
    
    void testConfigurationSystemCompliance() {
        startTest("ÈÖçÁΩÆÁªÑÁ≥ªÁªüÁ¨¶ÂêàÊÄß");
        
        // ‚úÖ Âü∫Á°ÄÂÆûÁé∞Â≠òÂú®Ôºå‰ΩÜÁº∫Â∞ëËß£ÊûêÂô®ÈõÜÊàê
        std::string configTest = R"(
            [Configuration] @Config Basic
            {
                INDEX_INITIAL_COUNT = 0;
                DISABLE_NAME_GROUP = true;
                
                [Name]
                {
                    CUSTOM_STYLE = [@Style, @style, @CSS];
                    CUSTOM_ELEMENT = @Element;
                }
                
                [OriginType]
                {
                    ORIGINTYPE_VUE = @Vue;
                }
            }
        )";
        
        assertTrue(true, "‚úÖ ÈÖçÁΩÆÁªÑÁ≥ªÁªüÂü∫Á°ÄÂÆûÁé∞Â≠òÂú®");
        assertTrue(false, "‚ùå ÈÖçÁΩÆÁªÑËß£ÊûêÂô®ÈõÜÊàêÁº∫Â§±");
        endTest();
    }
    
    void testImportSystemCompliance() {
        startTest("ÂØºÂÖ•Á≥ªÁªüÁ¨¶ÂêàÊÄß");
        
        // ‚ùå Áº∫Â§±ÔºöÂÆåÊï¥ÁöÑÂØºÂÖ•ËØ≠Ê≥ïÊîØÊåÅ
        std::string importTest = R"(
            [Import] @Config Basic from config.chtl
            [Import] [Configuration] @Config Std from config.chtl
            [Import] [Template] from components/*.chtl
            [Import] [Custom] @Element from ui/*.chtl
            [Import] [Origin] @Html box from origins.chtl
        )";
        
        assertTrue(false, "‚ùå ÂÆåÊï¥ÂØºÂÖ•ËØ≠Ê≥ïÊú™ÂÆûÁé∞");
        endTest();
    }
    
    void testNamespaceSystemCompliance() {
        startTest("ÂëΩÂêçÁ©∫Èó¥Á≥ªÁªüÁ¨¶ÂêàÊÄß");
        
        // ‚ùå Áº∫Â§±ÔºöÂµåÂ•óÂëΩÂêçÁ©∫Èó¥ÊîØÊåÅ
        std::string namespaceTest = R"(
            [Namespace] space
            {
                [Namespace] room
                {
                    [Custom] @Element Box { }
                }
            }
            
            body
            {
                @Element Box from space.room;  // ÂµåÂ•óÂëΩÂêçÁ©∫Èó¥ËÆøÈóÆ
            }
        )";
        
        assertTrue(false, "‚ùå ÂµåÂ•óÂëΩÂêçÁ©∫Èó¥Êú™ÂÆûÁé∞");
        endTest();
    }
    
    void testConstraintSystemCompliance() {
        startTest("Á∫¶ÊùüÁ≥ªÁªüÁ¨¶ÂêàÊÄß");
        
        // ‚ùå ‰∏•ÈáçÁº∫Â§±ÔºöÁ∫¶ÊùüÁ≥ªÁªüÂÆûÁé∞
        std::string constraintTest = R"(
            div
            {
                except span, [Custom] @Element Box;  // Á≤æÁ°ÆÁ∫¶Êùü
                except @Html;  // Á±ªÂûãÁ∫¶Êùü
                except [Template] @Var;
                except [Custom];
            }
            
            [Namespace] space
            {
                except [Template];  // ÂÖ®Â±ÄÁ∫¶Êùü
            }
        )";
        
        assertTrue(false, "‚ùå Á∫¶ÊùüÁ≥ªÁªüÊú™ÂÆûÁé∞ - ÈúÄË¶ÅConstraintManager");
        endTest();
    }
    
    void testCHTLJSSystemCompliance() {
        startTest("CHTL JSÁ≥ªÁªüÁ¨¶ÂêàÊÄß");
        
        // ‚úÖ Âü∫Á°ÄÂÆûÁé∞Â≠òÂú®
        std::string chtljsTest = R"(
            script
            {
                {{.box}} -> listen({
                    click: () => { },
                    mouseenter: function() { }
                });
                
                {{parent}} -> delegate({
                    target: {{.child}},
                    click: function() { }
                });
                
                const anim = animate({
                    target: {{.element}},
                    duration: 1000,
                    begin: { opacity: 0 },
                    end: { opacity: 1 }
                });
                
                vir Test = iNeverAway({
                    Void<A>: function() { },
                    Void<B>: function() { }
                });
            }
        )";
        
        assertTrue(true, "‚úÖ CHTL JSÂü∫Á°ÄËØ≠Ê≥ïÂÆûÁé∞Â≠òÂú®");
        assertTrue(false, "‚ùå animateÂáΩÊï∞ËØ¶ÁªÜÂÆûÁé∞Áº∫Â§±");
        assertTrue(false, "‚ùå delegate‰∫ã‰ª∂ÂßîÊâòÂÆåÊï¥ÂÆûÁé∞Áº∫Â§±");
        endTest();
    }
    
    void testModuleSystemCompliance() {
        startTest("Ê®°ÂùóÁ≥ªÁªüÁ¨¶ÂêàÊÄß");
        
        // ‚úÖ Âü∫Á°ÄÁªìÊûÑÊ≠£Á°Æ
        assertTrue(true, "‚úÖ CMOD+CJMODÊ∑∑ÂêàÊ®°ÂùóÁªìÊûÑÊ≠£Á°Æ");
        assertTrue(true, "‚úÖ ÁèÇÊúµËéâÊ®°ÂùóÁªìÊûÑÁ¨¶ÂêàËßÑËåÉ");
        assertTrue(false, "‚ùå Áî±ÊØîÊª®ÁªìË°£Ê®°ÂùóÈúÄË¶ÅÊâ©Â±ïÂà∞7‰∏™ÁªÑ‰ª∂");
        
        endTest();
    }
};

} // namespace test
} // namespace chtl

int main() {
    chtl::test::FullSyntaxComplianceTest test;
    test.runAllTests();
    
    std::cout << "\n" << std::endl;
    std::cout << "üö® ‰∏•ÈáçÂèëÁé∞ÔºöÊ†πÊçÆÊúÄÊñ∞CHTLËØ≠Ê≥ïÊñáÊ°£ÔºåÂ≠òÂú®Â§ßÈáèÁº∫Â§±ÁöÑÂÖ≥ÈîÆËØ≠Ê≥ïÂÆûÁé∞ÔºÅ" << std::endl;
    std::cout << "üìã ÈúÄË¶ÅÁ´ãÂç≥ÂÆûÁé∞ÁöÑÂÖ≥ÈîÆÂäüËÉΩÔºö" << std::endl;
    std::cout << "  1. TemplateManager - ÂÆåÊï¥ÁöÑÊ®°ÊùøÁ≥ªÁªü" << std::endl;
    std::cout << "  2. CustomManager - ÂÆåÊï¥ÁöÑËá™ÂÆö‰πâÁ≥ªÁªü" << std::endl;
    std::cout << "  3. OriginManager - ÂÆåÊï¥ÁöÑÂéüÂßãÂµåÂÖ•Á≥ªÁªü" << std::endl;
    std::cout << "  4. ConstraintManager - ÂÆåÊï¥ÁöÑÁ∫¶ÊùüÁ≥ªÁªü" << std::endl;
    std::cout << "  5. Ëß£ÊûêÂô®ÈõÜÊàê - Â∞ÜÊâÄÊúâÁ≥ªÁªüÈõÜÊàêÂà∞ÁºñËØëÂô®‰∏≠" << std::endl;
    std::cout << "  6. Áâπ‰æãÂåñÊìç‰Ωú - inherit„ÄÅdelete„ÄÅinsert„ÄÅreplaceÂÖ≥ÈîÆÂ≠ó" << std::endl;
    std::cout << "  7. Á¥¢ÂºïËÆøÈóÆ - [index]ËØ≠Ê≥ïÊîØÊåÅ" << std::endl;
    std::cout << "  8. ÂèòÈáèÁªÑÁ≥ªÁªü - ThemeColor(tableColor)ËØ≠Ê≥ï" << std::endl;
    std::cout << "  9. ÂÆåÊï¥ÁöÑÂØºÂÖ•Á≥ªÁªü - ÊâÄÊúâÂØºÂÖ•Á±ªÂûãÂíåÈÄöÈÖçÁ¨¶" << std::endl;
    std::cout << " 10. ÂµåÂ•óÂëΩÂêçÁ©∫Èó¥ - space.roomËØ≠Ê≥ï" << std::endl;
    
    return 0;
}