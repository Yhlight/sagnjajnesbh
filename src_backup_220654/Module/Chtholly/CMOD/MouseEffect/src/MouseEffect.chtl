// 按CHTL语法文档：使用[Custom] @Element定义组件，使用局部style和script
// 珂朵莉鼠标特效 - 如星光般闪耀的追随效果
[Custom] @Element ChthollyMouseEffect
{
    div
    {
        class: "chtholly-mouse-effect";
        
        style
        {
            .chtholly-mouse-effect
            {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                pointer-events: none;
                z-index: 9999;
                overflow: hidden;
            }
            
            .mouse-sparkle
            {
                position: absolute;
                width: 6px;
                height: 6px;
                background: radial-gradient(circle, #ffb6c1 0%, #ff69b4 50%, transparent 100%);
                border-radius: 50%;
                pointer-events: none;
                animation: sparkleLife 1.5s ease-out forwards;
            }
            
            .mouse-sparkle.large
            {
                width: 10px;
                height: 10px;
                background: radial-gradient(circle, #fff 0%, #ffb6c1 30%, #ff69b4 70%, transparent 100%);
            }
            
            .mouse-sparkle.small
            {
                width: 4px;
                height: 4px;
            }
            
            @keyframes sparkleLife
            {
                0% {
                    opacity: 1;
                    transform: scale(0) rotate(0deg);
                }
                20% {
                    opacity: 1;
                    transform: scale(1) rotate(90deg);
                }
                100% {
                    opacity: 0;
                    transform: scale(0.3) rotate(360deg);
                }
            }
            
            .mouse-cursor-glow
            {
                position: absolute;
                width: 20px;
                height: 20px;
                background: radial-gradient(circle, rgba(255, 182, 193, 0.8) 0%, rgba(255, 105, 180, 0.4) 50%, transparent 100%);
                border-radius: 50%;
                pointer-events: none;
                transform: translate(-50%, -50%);
                transition: all 0.1s ease-out;
                z-index: 10000;
            }
            
            .mouse-trail-particle
            {
                position: absolute;
                width: 3px;
                height: 3px;
                background: #ffb6c1;
                border-radius: 50%;
                pointer-events: none;
                animation: trailFade 0.8s ease-out forwards;
            }
            
            @keyframes trailFade
            {
                0% {
                    opacity: 0.8;
                    transform: scale(1);
                }
                100% {
                    opacity: 0;
                    transform: scale(0.2);
                }
            }
            
            .click-ripple
            {
                position: absolute;
                border: 2px solid #ff69b4;
                border-radius: 50%;
                background: radial-gradient(circle, rgba(255, 182, 193, 0.3) 0%, transparent 70%);
                pointer-events: none;
                animation: rippleExpand 0.6s ease-out forwards;
            }
            
            @keyframes rippleExpand
            {
                0% {
                    width: 0;
                    height: 0;
                    opacity: 1;
                }
                100% {
                    width: 60px;
                    height: 60px;
                    opacity: 0;
                }
            }
            
            .heart-particle
            {
                position: absolute;
                font-size: 12px;
                color: #ff69b4;
                pointer-events: none;
                animation: heartFloat 2s ease-out forwards;
                user-select: none;
            }
            
            @keyframes heartFloat
            {
                0% {
                    opacity: 1;
                    transform: translateY(0) scale(1) rotate(0deg);
                }
                100% {
                    opacity: 0;
                    transform: translateY(-50px) scale(1.5) rotate(15deg);
                }
            }
        }
        
        script
        {
            // 按CHTL语法文档：使用虚对象和增强选择器管理鼠标特效
            vir mouseEffectController = iNeverAway({
                Init: function() {
                    this.isActive = true;
                    this.lastSparkleTime = 0;
                    this.lastTrailTime = 0;
                    this.trailParticles = [];
                    this.sparkleCount = 0;
                    
                    console.log('🌸 珂朵莉的鼠标特效已启动，如星光般闪耀...');
                },
                
                CreateSparkle: function(x, y) {
                    if (!this.isActive) return;
                    
                    const now = Date.now();
                    if (now - this.lastSparkleTime < 50) return; // 限制频率
                    this.lastSparkleTime = now;
                    
                    const sparkle = document.createElement('div');
                    sparkle.className = 'mouse-sparkle';
                    
                    // 随机大小
                    const rand = Math.random();
                    if (rand > 0.8) sparkle.classList.add('large');
                    else if (rand < 0.3) sparkle.classList.add('small');
                    
                    // 随机位置偏移
                    const offsetX = (Math.random() - 0.5) * 20;
                    const offsetY = (Math.random() - 0.5) * 20;
                    
                    sparkle.style.left = (x + offsetX) + 'px';
                    sparkle.style.top = (y + offsetY) + 'px';
                    
                    {{.chtholly-mouse-effect}}.appendChild(sparkle);
                    
                    // 自动清理
                    setTimeout(() => {
                        if (sparkle.parentNode) {
                            sparkle.remove();
                        }
                    }, 1500);
                },
                
                CreateTrailParticle: function(x, y) {
                    if (!this.isActive) return;
                    
                    const now = Date.now();
                    if (now - this.lastTrailTime < 20) return; // 更高频率的拖尾
                    this.lastTrailTime = now;
                    
                    const particle = document.createElement('div');
                    particle.className = 'mouse-trail-particle';
                    particle.style.left = x + 'px';
                    particle.style.top = y + 'px';
                    
                    {{.chtholly-mouse-effect}}.appendChild(particle);
                    
                    // 自动清理
                    setTimeout(() => {
                        if (particle.parentNode) {
                            particle.remove();
                        }
                    }, 800);
                },
                
                CreateClickRipple: function(x, y) {
                    const ripple = document.createElement('div');
                    ripple.className = 'click-ripple';
                    ripple.style.left = (x - 30) + 'px';
                    ripple.style.top = (y - 30) + 'px';
                    
                    {{.chtholly-mouse-effect}}.appendChild(ripple);
                    
                    setTimeout(() => {
                        if (ripple.parentNode) {
                            ripple.remove();
                        }
                    }, 600);
                },
                
                CreateHeartParticle: function(x, y) {
                    const hearts = ['💕', '💖', '💗', '💝', '🌸', '✨'];
                    const heart = document.createElement('div');
                    heart.className = 'heart-particle';
                    heart.textContent = hearts[Math.floor(Math.random() * hearts.length)];
                    heart.style.left = x + 'px';
                    heart.style.top = y + 'px';
                    
                    {{.chtholly-mouse-effect}}.appendChild(heart);
                    
                    setTimeout(() => {
                        if (heart.parentNode) {
                            heart.remove();
                        }
                    }, 2000);
                },
                
                UpdateCursorGlow: function(x, y) {
                    let glow = {{.mouse-cursor-glow}};
                    if (!glow) {
                        glow = document.createElement('div');
                        glow.className = 'mouse-cursor-glow';
                        {{.chtholly-mouse-effect}}.appendChild(glow);
                    }
                    
                    glow.style.left = x + 'px';
                    glow.style.top = y + 'px';
                },
                
                Toggle: function() {
                    this.isActive = !this.isActive;
                    if (this.isActive) {
                        console.log('🌸 珂朵莉的鼠标特效已启用');
                    } else {
                        console.log('🌸 珂朵莉的鼠标特效已禁用');
                        // 清理所有特效
                        {{.mouse-sparkle}}.forEach(el => el.remove());
                        {{.mouse-trail-particle}}.forEach(el => el.remove());
                    }
                }
            });
            
            // 鼠标移动事件
            {{document}}->listen({
                mousemove: function(event) {
                    if (!mouseEffectController.isActive) return;
                    
                    const x = event.clientX;
                    const y = event.clientY;
                    
                    // 更新光晕
                    mouseEffectController->UpdateCursorGlow(x, y);
                    
                    // 创建拖尾粒子
                    mouseEffectController->CreateTrailParticle(x, y);
                    
                    // 随机创建星光
                    if (Math.random() > 0.9) {
                        mouseEffectController->CreateSparkle(x, y);
                    }
                }
            });
            
            // 鼠标点击事件
            {{document}}->listen({
                click: function(event) {
                    if (!mouseEffectController.isActive) return;
                    
                    const x = event.clientX;
                    const y = event.clientY;
                    
                    // 创建点击涟漪
                    mouseEffectController->CreateClickRipple(x, y);
                    
                    // 创建爱心粒子
                    mouseEffectController->CreateHeartParticle(x, y);
                }
            });
            
            // 双击创建特殊效果
            {{document}}->listen({
                dblclick: function(event) {
                    if (!mouseEffectController.isActive) return;
                    
                    const x = event.clientX;
                    const y = event.clientY;
                    
                    // 创建多个爱心
                    for (let i = 0; i < 5; i++) {
                        setTimeout(() => {
                            const offsetX = (Math.random() - 0.5) * 40;
                            const offsetY = (Math.random() - 0.5) * 40;
                            mouseEffectController->CreateHeartParticle(x + offsetX, y + offsetY);
                        }, i * 100);
                    }
                }
            });
            
            // 键盘快捷键切换
            {{document}}->listen({
                keydown: function(event) {
                    if (event.ctrlKey && event.key === 'm') {
                        event.preventDefault();
                        mouseEffectController->Toggle();
                    }
                }
            });
            
            // 初始化
            {{document}}->listen({
                DOMContentLoaded: function() {
                    mouseEffectController->Init();
                    console.log('🌸 珂朵莉的鼠标特效已准备就绪！按Ctrl+M可以切换效果');
                }
            });
            
            // 页面可见性控制
            {{document}}->listen({
                visibilitychange: function() {
                    if (document.hidden) {
                        mouseEffectController.isActive = false;
                    } else {
                        mouseEffectController.isActive = true;
                    }
                }
            });
        }
    }
}

// 按CHTL语法文档：定义相关的自定义样式组
[Custom] @Style ChthollyMouseEffectStyle
{
    sparkle-color,
    glow-color,
    trail-color;
    
    position: fixed;
    pointer-events: none;
    z-index: 9999;
}