#include "Scanner/CHTLUnifiedScanner.h"
#include "CHTLCompiler/State/CHTLState.h"
#include "CHTLJSCompiler/Core/AutoAdditionManager.h"
#include "CHTLJSCompiler/Core/JSEventRegistry.h"
#include <iostream>
#include <string>

using namespace chtl;

int main() {
    std::cout << "üéØ CHTLÈ°πÁõÆ - ÊµãËØïÂ∑≤ÊúâÂäüËÉΩ üéØ" << std::endl;
    std::cout << "============================" << std::endl;
    std::cout << "È™åËØÅÊâÄÊúâÂ∑≤ÂÆûÁé∞ÁöÑÂäüËÉΩÊòØÂê¶Ê≠£Â∏∏Â∑•‰Ωú" << std::endl;
    
    try {
        // 1. ÊµãËØïÁªü‰∏ÄÊâ´ÊèèÂô®
        std::cout << "\nüîç ÊµãËØïÁªü‰∏ÄÊâ´ÊèèÂô®..." << std::endl;
        scanner::CHTLUnifiedScanner scanner;
        
        std::string testCode = R"(
            div {
                style { color: red; }
                script { {{box}}->click(); listen({target: {{button}}); }
                text { Êó†‰øÆÈ•∞Â≠óÈù¢Èáè }
            }
        )";
        
        auto scanResult = scanner.scanCode(testCode);
        std::cout << "‚úÖ Êâ´ÊèèÂô®Ê≠£Â∏∏ÔºåÁâáÊÆµÊï∞: " << scanResult.fragments.size() << std::endl;
        
        // 2. ÊµãËØïCHTL JSÁâπÂæÅÊ£ÄÊµã
        std::cout << "\nüéØ ÊµãËØïCHTL JSÁâπÂæÅÊ£ÄÊµã..." << std::endl;
        std::string chtljsCode = "{{box}}->click(); listen({target: {{button}}});";
        bool hasCHTLJSFeatures = scanner.detectCHTLJSFeatures(chtljsCode);
        std::cout << "‚úÖ CHTL JSÁâπÂæÅÊ£ÄÊµã: " << (hasCHTLJSFeatures ? "Ê≠£Á°Æ" : "Â§±Ë¥•") << std::endl;
        
        // 3. ÊµãËØïËá™Âä®Ê∑ªÂä†ÁÆ°ÁêÜÂô®
        std::cout << "\nüîß ÊµãËØïËá™Âä®Ê∑ªÂä†ÁÆ°ÁêÜÂô®..." << std::endl;
        chtljs::AutoAdditionManager autoAddition;
        autoAddition.setDebugMode(false);
        
        std::string codeWithAutoAddition = R"(
            div {
                style { .box { color: red; } }
                script { {{.welcome}}->click(); }
            }
        )";
        
        std::string processedCode = autoAddition.processCodeWithAutoAddition(codeWithAutoAddition);
        std::cout << "‚úÖ Ëá™Âä®Ê∑ªÂä†ÁÆ°ÁêÜÂô®Ê≠£Â∏∏Â∑•‰Ωú" << std::endl;
        
        // 4. ÊµãËØïJS‰∫ã‰ª∂Ê≥®ÂÜåË°®
        std::cout << "\nüìã ÊµãËØïJS‰∫ã‰ª∂Ê≥®ÂÜåË°®..." << std::endl;
        chtljs::JSEventRegistry eventRegistry;
        
        auto allEvents = eventRegistry.getAllEvents();
        std::cout << "‚úÖ ÊîØÊåÅÁöÑJS‰∫ã‰ª∂Êï∞Èáè: " << allEvents.size() << std::endl;
        
        bool supportsClick = eventRegistry.isValidEvent("click");
        std::cout << "‚úÖ ÊîØÊåÅclick‰∫ã‰ª∂: " << (supportsClick ? "ÊòØ" : "Âê¶") << std::endl;
        
        // 5. ÊµãËØïÁä∂ÊÄÅÊú∫
        std::cout << "\n‚öôÔ∏è ÊµãËØïÁä∂ÊÄÅÊú∫..." << std::endl;
        StateManager stateManager;
        
        auto currentState = stateManager.getCurrentState();
        std::cout << "‚úÖ Áä∂ÊÄÅÊú∫ÂΩìÂâçÁä∂ÊÄÅ: " << static_cast<int>(currentState) << std::endl;
        
        std::cout << "\nüéâ ÊâÄÊúâÂ∑≤ÊúâÂäüËÉΩÊµãËØïÂÆåÊàêÔºÅ" << std::endl;
        std::cout << "‚úÖ Áªü‰∏ÄÊâ´ÊèèÂô® - Ê≠£Â∏∏Â∑•‰Ωú" << std::endl;
        std::cout << "‚úÖ Ëá™Âä®Ê∑ªÂä†ÁÆ°ÁêÜÂô® - Ê≠£Â∏∏Â∑•‰Ωú" << std::endl;
        std::cout << "‚úÖ JS‰∫ã‰ª∂Ê≥®ÂÜåË°® - Ê≠£Â∏∏Â∑•‰Ωú" << std::endl;
        std::cout << "‚úÖ Áä∂ÊÄÅÊú∫ - Ê≠£Â∏∏Â∑•‰Ωú" << std::endl;
        std::cout << "‚úÖ Âü∫‰∫é‰∏ä‰∏ãÊñáÔºå‰∏çÂ∞ÜÊó†‰øÆÈ•∞Â≠óÈù¢Èáè‰Ωú‰∏∫CHTL JSÂà§Êñ≠Êù°‰ª∂" << std::endl;
        
        std::cout << "\nüìã ÁªìËÆ∫ÔºöÊ†∏ÂøÉÂäüËÉΩÂ∑≤ÁªèÂÆûÁé∞ÔºåÊó†ÈúÄÈáçÂÜôÔºÅ" << std::endl;
        
        return 0;
        
    } catch (const std::exception& e) {
        std::cerr << "‚ùå ÊµãËØïÂºÇÂ∏∏: " << e.what() << std::endl;
        return 1;
    }
}