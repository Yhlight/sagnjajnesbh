// ============================================================================
// CHTL语法全面测试文件
// 严格根据CHTL语法文档进行全面测试
// ============================================================================

// ============================================================================
// 1. 基础语法测试
// ============================================================================

// 1.1 注释系统测试
// 单行注释 - 不会出现在生成的HTML中
/* 
 * 多行注释 - 不会出现在生成的HTML中
 * 支持多行内容
 */
-- 生成器注释 - 会被保留在生成的HTML中

// ============================================================================
// 2. 模板系统测试
// ============================================================================

// 2.1 样式组模板测试
[Template] @Style ButtonBase {
    padding: 12px 24px;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.3s ease;
}

[Template] @Style ButtonPrimary {
    background: #3b82f6;
    color: white;
}

[Template] @Style ButtonSecondary {
    background: #64748b;
    color: white;
}

// 2.2 元素模板测试
[Template] @Element Card {
    div {
        class: card;
        
        style {
            .card {
                background: white;
                border-radius: 8px;
                padding: 20px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }
        }
        
        div {
            class: card-header;
            text { 卡片标题 }
        }
        
        div {
            class: card-content;
            text { 卡片内容 }
        }
    }
}

// 2.3 变量组模板测试
[Template] @Var ThemeColors {
    primaryColor: "#3b82f6";
    secondaryColor: "#64748b";
    accentColor: "#f59e0b";
    dangerColor: "#ef4444";
    successColor: "#10b981";
}

[Template] @Var Spacing {
    small: "8px";
    medium: "16px";
    large: "24px";
    xlarge: "32px";
}

// 2.4 样式组继承测试
[Template] @Style ExtendedButton {
    inherit @Style ButtonBase;
    background: #10b981;
    font-weight: bold;
}

// ============================================================================
// 3. 自定义系统测试
// ============================================================================

// 3.1 自定义元素测试
[Custom] @Element InteractiveCard from Card {
    // 删除原有元素
    delete div[1];  // 删除第二个div
    
    // 插入新元素
    insert after div[0] {
        button {
            class: card-action;
            text { 点击我 }
        }
    }
    
    // 替换元素
    replace div[0] {
        h3 {
            class: card-title;
            text { 交互式卡片 }
        }
    }
}

// 3.2 自定义样式组测试
[Custom] @Style FlexLayout {
    display,
    justify-content,
    align-items;
}

[Custom] @Style GridLayout {
    display,
    grid-template-columns,
    grid-gap;
}

// 3.3 自定义变量组测试
[Custom] @Var AppTheme {
    primaryColor: "#2563eb";
    textColor: "#1f2937";
    backgroundColor: "#f9fafb";
}

// 3.4 索引访问测试
[Custom] @Element ModifiedList from List {
    // 为第一个li添加样式
    li[0] {
        style {
            font-weight: bold;
            color: #2563eb;
        }
    }
    
    // 删除第三个li
    delete li[2];
    
    // 为第二个li添加特殊类
    li[1] {
        class: special-item;
    }
}

// ============================================================================
// 4. 原始嵌入系统测试
// ============================================================================

// 4.1 HTML嵌入测试
[Origin] @Html CustomHeader {
    <header class="site-header">
        <nav class="main-nav">
            <a href="/">首页</a>
            <a href="/about">关于</a>
            <a href="/contact">联系</a>
        </nav>
    </header>
}

// 4.2 样式嵌入测试
[Origin] @Style Animations {
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    @keyframes slideIn {
        from { transform: translateX(-100%); }
        to { transform: translateX(0); }
    }
    
    .fade-in {
        animation: fadeIn 0.5s ease-in-out;
    }
    
    .slide-in {
        animation: slideIn 0.3s ease-out;
    }
}

// 4.3 脚本嵌入测试
[Origin] @JavaScript Utils {
    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }
    
    function throttle(func, limit) {
        let inThrottle;
        return function() {
            const args = arguments;
            const context = this;
            if (!inThrottle) {
                func.apply(context, args);
                inThrottle = true;
                setTimeout(() => inThrottle = false, limit);
            }
        }
    }
}

// 4.4 自定义嵌入类型测试
[Origin] @Vue TodoComponent {
    <template>
        <div class="todo-item">
            <input type="checkbox" v-model="completed">
            <span :class="{ completed }">{{ text }}</span>
            <button @click="remove">删除</button>
        </div>
    </template>
    
    <script>
    export default {
        props: ['text', 'completed'],
        methods: {
            remove() {
                this.$emit('remove');
            }
        }
    }
    </script>
    
    <style scoped>
    .completed {
        text-decoration: line-through;
        opacity: 0.6;
    }
    </style>
}

[Origin] @React CounterComponent {
    import React, { useState } from 'react';
    
    function Counter({ initialValue = 0 }) {
        const [count, setCount] = useState(initialValue);
        
        return (
            <div className="counter">
                <h3>计数器: {count}</h3>
                <button onClick={() => setCount(count + 1)}>增加</button>
                <button onClick={() => setCount(count - 1)}>减少</button>
                <button onClick={() => setCount(0)}>重置</button>
            </div>
        );
    }
    
    export default Counter;
}

// ============================================================================
// 5. 导入系统测试
// ============================================================================

// 5.1 基础导入测试
[Import] @Html from header as HeaderTemplate
[Import] @Style from theme as ThemeStyle
[Import] @JavaScript from utils as Utils
[Import] @Chtl from ModuleName
[Import] @CJmod from ExtensionName

// 5.2 特定类型导入测试
[Import] [Custom] @Element ButtonComponent from ui/button
[Import] [Template] @Style BaseStyles from ui/styles
[Import] [Custom] @Var ThemeColors from config/theme

// 5.3 批量导入测试
[Import] [Template] from ui/templates
[Import] [Custom] from components/custom
[Import] [Origin] from assets/origins

// 5.4 通配符导入测试
[Import] @Chtl from modules/*
[Import] @Chtl from themes/*.cmod
[Import] @Chtl from Chtholly.*
[Import] @Chtl from Chtholly.Effects

// ============================================================================
// 6. 命名空间系统测试
// ============================================================================

[Namespace] UI {
    [Namespace] Components {
        [Template] @Element Button {
            button {
                class: ui-button;
                text { UI按钮 }
            }
        }
        
        [Template] @Element Input {
            input {
                class: ui-input;
                type: text;
            }
        }
    }
    
    [Namespace] Themes {
        [Template] @Style DarkTheme {
            background: #1f2937;
            color: #f9fafb;
        }
        
        [Template] @Style LightTheme {
            background: #ffffff;
            color: #111827;
        }
    }
}

[Namespace] Layout {
    [Template] @Style Container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 20px;
    }
    
    [Template] @Style Grid {
        display: grid;
        grid-template-columns: repeat(12, 1fr);
        gap: 20px;
    }
}

// ============================================================================
// 7. 配置系统测试
// ============================================================================

[Configuration] @Config ProjectConfig {
    INDEX_INITIAL_COUNT = 0;
    DISABLE_NAME_GROUP = false;
    DEBUG_MODE = true;
    ENABLE_OPTIMIZATION = true;
    
    [Name] {
        CUSTOM_ELEMENT = @Element;
        TEMPLATE_STYLE = @Style;
        IMPORT_CHTL = @Chtl;
        VARIABLE_GROUP = @Var;
    }
    
    [OriginType] {
        ORIGINTYPE_VUE = @Vue;
        ORIGINTYPE_REACT = @React;
        ORIGINTYPE_ANGULAR = @Angular;
        ORIGINTYPE_SVELTE = @Svelte;
    }
}

[Configuration] @Config DevelopmentConfig {
    DEBUG_MODE = true;
    MINIFY_OUTPUT = false;
    SOURCE_MAPS = true;
}

[Configuration] @Config ProductionConfig {
    DEBUG_MODE = false;
    MINIFY_OUTPUT = true;
    SOURCE_MAPS = false;
}

// ============================================================================
// 8. 主HTML结构测试
// ============================================================================

html {
    lang: zh-CN;
    
    head {
        meta {
            charset: UTF-8;
        }
        
        meta {
            name: viewport;
            content: "width=device-width, initial-scale=1.0";
        }
        
        title { 
            text { CHTL语法全面测试页面 } 
        }
        
        // 测试嵌入原始样式
        style {
            // 全局重置样式
            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }
            
            body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                line-height: 1.6;
                color: #333;
            }
        }
    }
    
    body {
        // ====================================================================
        // 基础语法特性测试
        // ====================================================================
        
        header {
            class: main-header;
            id: site-header;
            
            style {
                .main-header {
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    padding: 40px 0;
                    text-align: center;
                }
                
                // 测试伪类选择器
                .main-header:hover {
                    background: linear-gradient(135deg, #764ba2 0%, #667eea 100%);
                }
                
                // 测试伪元素选择器
                .main-header::before {
                    content: "🎯";
                    margin-right: 10px;
                }
            }
            
            h1 {
                text { CHTL语法全面测试 }
                margin: 0;
                font-size: 2.5rem;
            }
            
            p {
                text { 测试CHTL语法文档中的所有特性 }
                margin: 10px 0 0 0;
                font-size: 1.2rem;
                opacity: 0.9;
            }
        }
        
        // ====================================================================
        // 文本节点和字面量测试
        // ====================================================================
        
        section {
            class: text-literals-test;
            
            style {
                .text-literals-test {
                    padding: 40px 20px;
                    max-width: 1200px;
                    margin: 0 auto;
                }
            }
            
            h2 {
                text { 文本节点和字面量测试 }
                color: #2563eb;
                margin-bottom: 20px;
            }
            
            div {
                class: literal-examples;
                
                p {
                    text { 这是无修饰字面量文本 }
                }
                
                p {
                    text { "这是双引号字符串文本" }
                }
                
                p {
                    text { '这是单引号字符串文本' }
                }
            }
        }
        
        // ====================================================================
        // CE对等式测试
        // ====================================================================
        
        section {
            class: ce-equality-test;
            
            div {
                class: colon-syntax;   // 使用冒号
                id = equal-syntax;     // 使用等号，完全等价
                data-test: "ce-equality";
                
                style {
                    .colon-syntax {
                        border: 2px solid #10b981;
                        padding: 15px;
                        margin: 10px 0;
                    }
                }
                
                text { CE对等式测试：冒号和等号完全等价 }
            }
        }
        
        // ====================================================================
        // 属性系统测试
        // ====================================================================
        
        section {
            class: attributes-test;
            
            div {
                id: attribute-box;
                class: test-container;
                data-value: 123;
                data-string: "测试字符串";
                data-boolean: true;
                aria-label: "属性测试容器";
                
                style {
                    .test-container {
                        background: #f0f9ff;
                        border: 1px solid #0ea5e9;
                        padding: 20px;
                        margin: 20px 0;
                        border-radius: 8px;
                    }
                }
                
                h3 {
                    text { 属性系统测试 }
                    color: #0ea5e9;
                }
                
                p {
                    text { 测试各种HTML属性的设置和使用 }
                }
            }
        }
        
        // ====================================================================
        // 样式系统测试
        // ====================================================================
        
        section {
            class: style-system-test;
            
            style {
                .style-system-test {
                    padding: 40px 20px;
                    background: #fafafa;
                }
            }
            
            h2 {
                text { 样式系统测试 }
                color: #7c3aed;
                margin-bottom: 30px;
            }
            
            // 测试局部样式块
            div {
                class: local-style-demo;
                
                style {
                    // 内联样式
                    padding: 20px;
                    margin: 10px;
                    
                    // 类选择器 - 自动添加到全局样式
                    .local-style-demo {
                        background: #fef3c7;
                        border-radius: 8px;
                        border: 2px solid #f59e0b;
                    }
                    
                    // ID选择器
                    #special-element {
                        color: #dc2626;
                        font-weight: bold;
                    }
                    
                    // 伪类选择器
                    .local-style-demo:hover {
                        background: #fde68a;
                        transform: translateY(-2px);
                        transition: all 0.3s ease;
                    }
                    
                    // 伪元素选择器
                    .local-style-demo::after {
                        content: " ✨";
                    }
                }
                
                h3 {
                    text { 局部样式块测试 }
                }
                
                p {
                    id: special-element;
                    text { 这个段落使用了ID选择器样式 }
                }
            }
            
            // 测试自动添加规则
            div {
                // 没有明确的class或id，测试自动添加
                style {
                    .auto-added-class {
                        background: #ddd6fe;
                        padding: 15px;
                        border-radius: 6px;
                    }
                    
                    #auto-added-id {
                        border: 1px solid #8b5cf6;
                    }
                }
                
                text { 测试自动添加规则：缺什么，自动添加什么 }
            }
        }
        
        // ====================================================================
        // 模板使用测试
        // ====================================================================
        
        section {
            class: template-usage-test;
            
            style {
                .template-usage-test {
                    padding: 40px 20px;
                }
            }
            
            h2 {
                text { 模板使用测试 }
                color: #059669;
                margin-bottom: 30px;
            }
            
            // 使用变量组
            div {
                style {
                    color: ThemeColors(primaryColor);
                    background: ThemeColors(secondaryColor);
                    padding: Spacing(medium);
                    margin: Spacing(small) 0;
                    border-radius: 8px;
                }
                
                text { 使用变量组ThemeColors和Spacing }
            }
            
            // 使用自定义样式组
            div {
                style {
                    @Style FlexLayout {
                        display: flex;
                        justify-content: center;
                        align-items: center;
                    }
                    
                    height: 100px;
                    background: #ecfdf5;
                    border: 1px solid #10b981;
                    border-radius: 8px;
                    margin: 20px 0;
                }
                
                text { 使用自定义样式组FlexLayout }
            }
            
            // 使用元素模板
            Card
            
            // 使用自定义元素
            InteractiveCard
        }
        
        // ====================================================================
        // 约束系统测试
        // ====================================================================
        
        section {
            class: constraint-test;
            
            div {
                class: safe-content;
                
                // 约束多种类型（链式语法）
                except @Html, [Custom], [Template];
                
                style {
                    .safe-content {
                        background: #fef2f2;
                        border: 2px solid #ef4444;
                        padding: 20px;
                        margin: 20px 0;
                        border-radius: 8px;
                    }
                }
                
                h3 {
                    text { 约束系统测试 }
                    color: #dc2626;
                }
                
                // 只允许基础元素
                p { 
                    text { 这个区域被约束，只能包含基础HTML元素 } 
                }
                
                ul {
                    li { text { 列表项1 } }
                    li { text { 列表项2 } }
                    li { text { 列表项3 } }
                }
            }
        }
        
        // ====================================================================
        // CHTL JS扩展语法测试
        // ====================================================================
        
        section {
            class: chtljs-test;
            
            style {
                .chtljs-test {
                    padding: 40px 20px;
                    background: #f0f9ff;
                }
                
                .interactive-button {
                    background: #3b82f6;
                    color: white;
                    border: none;
                    padding: 12px 24px;
                    border-radius: 6px;
                    cursor: pointer;
                    margin: 10px;
                    transition: all 0.3s ease;
                }
                
                .interactive-button:hover {
                    background: #2563eb;
                    transform: translateY(-2px);
                }
                
                .animation-target {
                    width: 100px;
                    height: 100px;
                    background: #10b981;
                    border-radius: 50%;
                    margin: 20px auto;
                    transition: all 0.3s ease;
                }
            }
            
            h2 {
                text { CHTL JS扩展语法测试 }
                color: #1d4ed8;
                margin-bottom: 30px;
            }
            
            // 测试增强选择器和箭头操作符
            button {
                class: interactive-button;
                id: selector-test-btn;
                
                script {
                    // 测试各种选择器
                    {{.interactive-button}}->style->display = 'inline-block';
                    {{#selector-test-btn}}->setAttribute('data-tested', 'true');
                    {{button}}->style->fontFamily = 'Arial, sans-serif';
                    {{&}}->setAttribute('data-self', 'current-element');
                    
                    // 测试箭头操作符链式调用
                    {{&}}->classList->add('tested')->style->opacity = '1';
                }
                
                text { 选择器测试按钮 }
            }
            
            // 测试增强监听器
            button {
                class: interactive-button;
                id: listener-test-btn;
                
                script {
                    {{&}}->listen({
                        click: function(e) {
                            console.log('按钮被点击');
                            {{&}}->style->background = '#059669';
                        },
                        mouseenter: function(e) {
                            {{&}}->classList->add('hover');
                        },
                        mouseleave: function(e) {
                            {{&}}->classList->remove('hover');
                        },
                        focus: function(e) {
                            {{&}}->style->outline = '2px solid #3b82f6';
                        },
                        blur: function(e) {
                            {{&}}->style->outline = 'none';
                        }
                    });
                }
                
                text { 监听器测试按钮 }
            }
            
            // 测试事件委托
            div {
                class: delegation-container;
                
                style {
                    .delegation-container {
                        border: 2px dashed #6366f1;
                        padding: 20px;
                        margin: 20px 0;
                    }
                    
                    .delegated-item {
                        background: #e0e7ff;
                        padding: 10px;
                        margin: 5px;
                        border-radius: 4px;
                        cursor: pointer;
                    }
                }
                
                script {
                    {{&}}->delegate({
                        target: {{.delegated-item}},
                        click: function(e) {
                            console.log('委托点击事件触发');
                            {{this}}->style->background = '#c7d2fe';
                        },
                        mouseenter: function(e) {
                            {{this}}->style->transform = 'scale(1.05)';
                        },
                        mouseleave: function(e) {
                            {{this}}->style->transform = 'scale(1)';
                        }
                    });
                }
                
                h3 {
                    text { 事件委托测试 }
                }
                
                div {
                    class: delegated-item;
                    text { 委托项目 1 }
                }
                
                div {
                    class: delegated-item;
                    text { 委托项目 2 }
                }
                
                div {
                    class: delegated-item;
                    text { 委托项目 3 }
                }
            }
            
            // 测试动画系统
            div {
                class: animation-test;
                
                style {
                    .animation-test {
                        text-align: center;
                        padding: 30px;
                    }
                }
                
                h3 {
                    text { 动画系统测试 }
                }
                
                div {
                    class: animation-target;
                }
                
                button {
                    class: interactive-button;
                    
                    script {
                        {{&}}->listen({
                            click: function() {
                                animate({
                                    target: {{.animation-target}},
                                    duration: 1000,
                                    easing: 'ease-out',
                                    properties: {
                                        opacity: [1, 0.5, 1],
                                        transform: ['scale(1)', 'scale(1.2)', 'scale(1)'],
                                        background: ['#10b981', '#f59e0b', '#10b981']
                                    },
                                    onComplete: function() {
                                        console.log('动画完成');
                                    }
                                });
                            }
                        });
                    }
                    
                    text { 启动动画 }
                }
            }
            
            // 测试虚对象
            div {
                class: virtual-object-test;
                
                script {
                    vir UIManager = listen({
                        init: function() {
                            console.log('初始化UI管理器');
                            {{.virtual-object-test}}->style->background = '#ecfdf5';
                        },
                        destroy: function() {
                            console.log('销毁UI管理器');
                            {{.virtual-object-test}}->style->background = '#fef2f2';
                        },
                        toggle: function() {
                            const current = {{.virtual-object-test}}->style->background;
                            if (current.includes('ecfdf5')) {
                                UIManager->destroy();
                            } else {
                                UIManager->init();
                            }
                        }
                    });
                    
                    // 使用虚对象（编译为函数引用）
                    UIManager->init();
                }
                
                style {
                    .virtual-object-test {
                        padding: 20px;
                        border: 2px solid #059669;
                        border-radius: 8px;
                        margin: 20px 0;
                    }
                }
                
                h3 {
                    text { 虚对象测试 }
                }
                
                p {
                    text { 虚对象是编译时语法糖，不产生运行时对象 }
                }
                
                button {
                    class: interactive-button;
                    
                    script {
                        {{&}}->listen({
                            click: function() {
                                UIManager->toggle();
                            }
                        });
                    }
                    
                    text { 切换虚对象状态 }
                }
            }
        }
        
        // ====================================================================
        // 删除操作语法测试
        // ====================================================================
        
        section {
            class: deletion-test;
            
            style {
                .deletion-test {
                    padding: 40px 20px;
                    background: #fffbeb;
                }
            }
            
            h2 {
                text { 删除操作测试 }
                color: #d97706;
                margin-bottom: 30px;
            }
            
            p {
                text { 删除操作在自定义和模板中使用，这里展示概念 }
                font-style: italic;
                color: #92400e;
            }
        }
        
        // ====================================================================
        // 链式语法测试
        // ====================================================================
        
        section {
            class: chaining-test;
            
            // 测试支持链式的except约束
            except @Html, [Custom], [Template];
            
            style {
                .chaining-test {
                    padding: 40px 20px;
                    background: #f0fdf4;
                }
            }
            
            h2 {
                text { 链式语法测试 }
                color: #059669;
                margin-bottom: 30px;
            }
            
            p {
                text { except约束支持链式语法，delete属性也支持链式 }
            }
            
            div {
                class: chain-demo;
                
                style {
                    .chain-demo {
                        border: 2px solid #10b981;
                        padding: 15px;
                        border-radius: 8px;
                    }
                }
                
                text { 这个div受到链式约束限制 }
            }
        }
        
        // ====================================================================
        // 命名空间使用测试
        // ====================================================================
        
        section {
            class: namespace-usage-test;
            
            style {
                .namespace-usage-test {
                    padding: 40px 20px;
                    background: #fdf2f8;
                }
            }
            
            h2 {
                text { 命名空间使用测试 }
                color: #be185d;
                margin-bottom: 30px;
            }
            
            // 使用命名空间中的元素（概念演示）
            div {
                class: namespace-demo;
                
                style {
                    .namespace-demo {
                        border: 2px solid #ec4899;
                        padding: 20px;
                        border-radius: 8px;
                    }
                }
                
                text { 命名空间元素使用：UI::Components::Button, UI::Themes::DarkTheme }
            }
        }
        
        // ====================================================================
        // 原始嵌入使用测试
        // ====================================================================
        
        section {
            class: origin-embedding-test;
            
            style {
                .origin-embedding-test {
                    padding: 40px 20px;
                    background: #f8fafc;
                }
            }
            
            h2 {
                text { 原始嵌入测试 }
                color: #475569;
                margin-bottom: 30px;
            }
            
            // 使用嵌入的HTML
            CustomHeader
            
            div {
                class: embedding-demo;
                
                style {
                    .embedding-demo {
                        border: 2px solid #64748b;
                        padding: 20px;
                        border-radius: 8px;
                        margin: 20px 0;
                    }
                }
                
                text { 原始嵌入内容已在上方显示 }
            }
        }
        
        // ====================================================================
        // 无序和可选键值对测试
        // ====================================================================
        
        section {
            class: keyvalue-test;
            
            style {
                .keyvalue-test {
                    padding: 40px 20px;
                    background: #f1f5f9;
                }
            }
            
            h2 {
                text { 键值对语法测试 }
                color: #334155;
                margin-bottom: 30px;
            }
            
            div {
                class: keyvalue-demo;
                
                script {
                    // 测试无序键值对
                    const config = {
                        timeout: 5000,
                        retries: 3,
                        url: "https://api.example.com",
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                            "Authorization": "Bearer token123"
                        }
                    };
                    
                    // 测试可选键值对函数
                    function createRequest({
                        url,
                        method = "GET",
                        timeout?,
                        headers?,
                        data?
                    }) {
                        console.log('创建请求:', { url, method, timeout, headers, data });
                        return { url, method, timeout, headers, data };
                    }
                    
                    // 使用函数
                    {{&}}->listen({
                        click: function() {
                            const request = createRequest({
                                url: "https://test.com",
                                method: "POST",
                                timeout: 3000,
                                data: { test: true }
                            });
                            console.log('请求配置:', request);
                        }
                    });
                }
                
                style {
                    .keyvalue-demo {
                        border: 2px solid #0ea5e9;
                        padding: 20px;
                        border-radius: 8px;
                        cursor: pointer;
                    }
                    
                    .keyvalue-demo:hover {
                        background: #e0f2fe;
                    }
                }
                
                text { 点击测试无序和可选键值对功能 }
            }
        }
        
        // ====================================================================
        // 变量组特例化测试
        // ====================================================================
        
        section {
            class: var-specialization-test;
            
            style {
                .var-specialization-test {
                    padding: 40px 20px;
                    background: #fefce8;
                }
            }
            
            h2 {
                text { 变量组特例化测试 }
                color: #a16207;
                margin-bottom: 30px;
            }
            
            div {
                class: specialization-demo;
                
                style {
                    .specialization-demo {
                        // 变量组特例化
                        color: AppTheme(textColor = "#374151");
                        background: AppTheme(primaryColor);
                        padding: 20px;
                        border-radius: 8px;
                        margin: 20px 0;
                    }
                }
                
                text { 这个元素使用了变量组特例化 }
            }
        }
        
        // ====================================================================
        // 样式组继承测试
        // ====================================================================
        
        section {
            class: inheritance-test;
            
            style {
                .inheritance-test {
                    padding: 40px 20px;
                    background: #fdf4ff;
                }
            }
            
            h2 {
                text { 样式组继承测试 }
                color: #a21caf;
                margin-bottom: 30px;
            }
            
            button {
                class: extended-button;
                
                style {
                    .extended-button {
                        // 继承ButtonBase样式
                        padding: 12px 24px;
                        border: none;
                        border-radius: 6px;
                        cursor: pointer;
                        transition: all 0.3s ease;
                        
                        // ExtendedButton的额外样式
                        background: #10b981;
                        font-weight: bold;
                        text-transform: uppercase;
                    }
                    
                    .extended-button:hover {
                        background: #059669;
                        transform: translateY(-1px);
                    }
                }
                
                text { 继承样式按钮 }
            }
        }
        
        // ====================================================================
        // 页脚
        // ====================================================================
        
        footer {
            class: main-footer;
            
            style {
                .main-footer {
                    background: #1f2937;
                    color: #f9fafb;
                    text-align: center;
                    padding: 40px 20px;
                    margin-top: 60px;
                }
            }
            
            div {
                class: footer-content;
                
                style {
                    .footer-content {
                        max-width: 1200px;
                        margin: 0 auto;
                    }
                }
                
                h3 {
                    text { CHTL语法全面测试完成 }
                    margin-bottom: 15px;
                    color: #60a5fa;
                }
                
                p {
                    text { 本页面测试了CHTL语法文档中的所有核心特性 }
                    opacity: 0.8;
                    margin-bottom: 10px;
                }
                
                p {
                    text { 包括：基础语法、样式系统、模板系统、自定义系统、约束系统、CHTL JS扩展等 }
                    opacity: 0.6;
                    font-size: 0.9rem;
                }
            }
        }
    }
}